(window.webpackJsonp=window.webpackJsonp||[]).push([[496],{769:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、开始"}},[t._v("#")]),t._v(" 一、开始")]),t._v(" "),a("p",[t._v("本文讲解 Docker 的基本用法。")]),t._v(" "),a("h2",{attrs:{id:"二、docker-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、docker-用法"}},[t._v("#")]),t._v(" 二、Docker 用法")]),t._v(" "),a("h3",{attrs:{id:"_1-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1. 概念")]),t._v(" "),a("p",[t._v("Docker 中有两个重要概念。")]),t._v(" "),a("p",[t._v("一个是镜像（Image）：镜像是一个文件，它是用来创建容器的，像"),a("code",[t._v("“Win7纯净版.rar”")]),t._v("文件。")]),t._v(" "),a("p",[t._v("另一个是容器（Container）：容器特别像一个虚拟机，容器中运行着一个完整的操作系统。可以在容器中装 Nodejs，可以执行 "),a("code",[t._v("npm install")]),t._v("，可以做一切你当前操作系统能做的事情。")]),t._v(" "),a("p",[t._v("另外，当前使用的真实操作系统称为“宿主机”(Host)")]),t._v(" "),a("p",[t._v("镜像是通过一个 Dockerfile 打包来的，它非常像我们前端的 "),a("code",[t._v("package.json")]),t._v(" 文件。创建关系为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Dockerfile: 类似于“package.json”\n |\n V\nImage: 类似于“Win7纯净版.rar”\n |\n V\nContainer: 一个完整操作系统\n")])])]),a("h3",{attrs:{id:"_2-前端项目打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-前端项目打包"}},[t._v("#")]),t._v(" 2. 前端项目打包")]),t._v(" "),a("h4",{attrs:{id:"_1-下载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载"}},[t._v("#")]),t._v(" （1）下载")]),t._v(" "),a("p",[t._v("官网下载 Docker Desktop。")]),t._v(" "),a("h4",{attrs:{id:"_2-初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化"}},[t._v("#")]),t._v(" （2）初始化")]),t._v(" "),a("p",[t._v("我们可以新建一个文件夹 "),a("code",[t._v("test-docker")]),t._v("，添加一个 "),a("code",[t._v("index.html")]),t._v("，随便写点什么，然后添加 "),a("code",[t._v("Dockerfile")]),t._v(" 文件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 基于哪个镜像\nFROM nginx \n\n# 将宿主机中的./index.html文件复制进容器里的/usr/share/nginx/html/index.html\nCOPY ./index.html /usr/share/nginx/html/index.html\n\n# 容器对外暴露80端口\nEXPOSE 80 \n")])])]),a("p",[t._v("COPY有个要注意的点是，复制目录的时候要把dest的目录也写上，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("COPY server/ /usr/src/nodejs/server\n")])])]),a("p",[t._v("不能：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("COPY server/ /usr/src/nodejs/\n")])])]),a("p",[t._v("这一点和 Shell 命令还不太一样。")]),t._v(" "),a("h4",{attrs:{id:"_3-打包镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-打包镜像"}},[t._v("#")]),t._v(" （3）打包镜像")]),t._v(" "),a("p",[t._v("接下来可以对我们的测试文件夹打镜像：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cd test-docker\ndocker build -t test-docker:1.0.0 .  \n")])])]),a("p",[t._v("build 命令用来制作镜像，"),a("code",[t._v("-t")]),t._v(" 是给镜像打标签，"),a("code",[t._v("-f")]),t._v(" 参数是指定 Dockerfile 路径，由于我们使用的是默认 Dockerfile 名称，所以可以不同填写该参数。最后一个"),a("code",[t._v(".")]),t._v("也不要省略，表示 Dockerfile 文件的所在目录，代表是当前路径，它指定镜像构建的上下文。")]),t._v(" "),a("h4",{attrs:{id:"_4-创建容器并运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-创建容器并运行"}},[t._v("#")]),t._v(" （4）创建容器并运行")]),t._v(" "),a("p",[t._v("然后通过镜像 test-docker 创建一个容器并运行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker run --name test-docker -d -p 3000:80 test-docker:1.0.0\n")])])]),a("p",[t._v("说明：创建的容器名称是 test-docker，你可以理解为 pid，这个名称唯一，创建之后如果不删除会一直存在。"),a("code",[t._v("-p")]),t._v(" 用来指定端口映射，将容器的端口3000映射到主机"),a("code",[t._v("80")]),t._v("端口上，这样就可外部访问了。")]),t._v(" "),a("p",[t._v("然后在当前主机的浏览器中打开 "),a("code",[t._v("localhost:3000")]),t._v("，就可以看到我们的 "),a("code",[t._v("index.html")]),t._v(" 内容了。")]),t._v(" "),a("h4",{attrs:{id:"_5-容器调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-容器调试"}},[t._v("#")]),t._v(" （5）容器调试")]),t._v(" "),a("p",[t._v("可以进入容器内部：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker ls -a # 查看所有容器，包括当前容器的id\ndocker exec -it <id> bash\n")])])]),a("p",[t._v("原理实际上是启动了容器内的"),a("code",[t._v("/bin/bash")]),t._v("，此时你就可以通过"),a("code",[t._v("bash shell")]),t._v("与容器内交互了。就像远程连接了 SSH 一样。")]),t._v(" "),a("p",[t._v("也可以查看容器日志：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker logs -f <id> # 容器id\n")])])]),a("p",[t._v("上面是对静态资源的打包，其实普通的 Vue、React 项目的打包也是一样，不过要 COPY 下打包文件夹下的文件就好了，这样可以让镜像体积更小。")]),t._v(" "),a("h3",{attrs:{id:"_3-node-项目打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-node-项目打包"}},[t._v("#")]),t._v(" 3. Node 项目打包")]),t._v(" "),a("p",[t._v("对于 NodeJS 项目，比如 Koa 或者 Express 这些，和静态资源的区别只是它们需要起个服务，占个端口。")]),t._v(" "),a("p",[t._v("对于 Docker 来说，只要改 Dockerfile 文件，其他步骤是一样的。")]),t._v(" "),a("p",[t._v("这里也是新建个 Koa 服务，来测试下。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// server.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Koa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'koa'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Koa")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ctx")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# Dockerfile\nFROM node:14.15.0\n\n# 在容器中创建一个目录\nRUN mkdir -p /usr/src/nodejs/\n\n# 定位到容器的工作目录\nWORKDIR /usr/src/nodejs/\n\n# 把当前目录下的所有文件拷贝到 Image 的 /usr/src/nodejs/ 目录下\nCOPY . /usr/src/nodejs/\n\nEXPOSE 3000\nCMD npm start\n")])])]),a("h3",{attrs:{id:"_4-docker-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-命令"}},[t._v("#")]),t._v(" 4. docker 命令")]),t._v(" "),a("p",[t._v("镜像相关：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker pull [镜像名称:版本] # 拉取镜像\ndocker images  # 镜像列表\ndocker rmi [镜像名称:版本] # 删除镜像\ndocker history [镜像名称:版本] # 镜像操作记录\ndocker tag [镜像名称:版本][新镜像名称:新版本]\ndocker inspect [镜像名称:版本] # 查看镜像详细\ndocker search [关键字] # 搜索镜像\ndocker login # docker hub 登陆\ndocker logout # docker hub 登陆\n")])])]),a("p",[t._v("容器相关：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker ps -a # 容器列表(所有容器)\ndocker ps  # 查看所有(运行的)容器\ndocker exec -ti <id> bash  # 以 bash 命令进入容器内\ndocker run -ti --name [容器名称][镜像名称:版本] bash # 启动容器并进入\ndocker logs <container_id> # 查看容器日志\ndocker top <container_id> # 查看容器最近的一个进程\ndocker run -ti --name [容器名称] -p 8080:80 [镜像名称:版本] bash  # 端口映射\ndocker rm <container_id> # 删除容器\ndocker stop <container_id> # 停止容器\ndocker start <container_id> # 开启容器\ndocker restart <container_id> # 重启容器\ndocker inspect <container_id> # 查看容器详情\ndocker commit [容器名称] my_image:v1.0  # 容器提交为新的镜像\t\n")])])]),a("h2",{attrs:{id:"三、docker-hub-限频问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、docker-hub-限频问题"}},[t._v("#")]),t._v(" 三、Docker hub 限频问题")]),t._v(" "),a("p",[t._v("如果在拉取镜像等操作时遇到限频问题，可以添加镜像，并重启 Docker：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://hub-mirror.c.163.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://mirror.baidubce.com"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"四、相关资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、相关资料"}},[t._v("#")]),t._v(" 四、相关资料")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844904035053486087",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 搭建你的第一个 Node 项目到服务器"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844904081966759943",target:"_blank",rel:"noopener noreferrer"}},[t._v("看完这篇，再也不用焦虑如何写dockerfile了"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/install/mirror#macos",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker —— 从入门到实践"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/zisefeizhu/article/details/83472190",target:"_blank",rel:"noopener noreferrer"}},[t._v("dockerfile详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/claram/article/details/104228727",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker run 命令的 -i -t -d选项的作用"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);