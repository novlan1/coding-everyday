(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{369:function(a,t,e){"use strict";e.r(t);var s=e(25),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"#1-sql%E8%AF%AD%E5%8F%A5"}},[a._v("1. SQL语句")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#11-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%90%8D%E7%A7%B0%E5%A6%82%E5%B0%86titles_test%E8%A1%A8%E5%90%8D%E4%BF%AE%E6%94%B9%E4%B8%BAtitles_2017"}},[a._v("1.1. 修改数据表名称，如将titles_test表名修改为titles_2017。")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#12-%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%A6%82%E6%9E%9C%E6%95%B0%E6%8D%AE%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E8%AF%B7%E5%BF%BD%E7%95%A5"}},[a._v("1.2. 插入数据，如果数据已经存在，请忽略")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#13-%E5%AF%B9%E4%BA%8Eemployees%E8%A1%A8%E5%9C%A8%E5%AF%B9first_name%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%90%8D%E5%90%8E%E9%80%89%E5%87%BA%E5%A5%87%E6%95%B0%E6%8E%92%E5%90%8D%E5%AF%B9%E5%BA%94%E7%9A%84first_name"}},[a._v("1.3. 对于employees表，在对first_name进行排名后，选出奇数排名对应的first_name")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#14-%E4%B8%89%E5%BC%A0%E8%A1%A8filmfilm_id-title-descriptioncategorycategory_id-namefilm-categoryfilm_id-category_id%E5%B1%9E%E4%BA%8Eaction%E5%88%86%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E7%94%B5%E5%BD%B1%E5%AF%B9%E5%BA%94%E7%9A%84titledescription"}},[a._v("1.4. 三张表，film(film_id, title, description)，category(category_id, name)，film-category(film_id, category_id)，属于Action分类的所有电影对应的title,description")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#15-%E6%89%BE%E5%87%BA%E6%B2%A1%E6%9C%89%E5%88%86%E7%B1%BB%E7%9A%84%E7%94%B5%E5%BD%B1id%E4%BB%A5%E5%8F%8A%E5%90%8D%E7%A7%B0"}},[a._v("1.5. 找出没有分类的电影id以及名称")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#16-%E6%9F%A5%E6%89%BE%E6%8F%8F%E8%BF%B0%E4%BF%A1%E6%81%AFfilmdescription%E4%B8%AD%E5%8C%85%E5%90%ABrobot%E7%9A%84%E7%94%B5%E5%BD%B1%E5%AF%B9%E5%BA%94%E7%9A%84%E5%88%86%E7%B1%BB%E5%90%8D%E7%A7%B0categoryname%E4%BB%A5%E5%8F%8A%E7%94%B5%E5%BD%B1%E6%95%B0%E7%9B%AEcountfilmfilm_id%E8%80%8C%E4%B8%94%E8%BF%98%E9%9C%80%E8%A6%81%E8%AF%A5%E5%88%86%E7%B1%BB%E5%8C%85%E5%90%AB%E7%94%B5%E5%BD%B1%E6%80%BB%E6%95%B0%E9%87%8Fcountfilm_categorycategory_id5%E9%83%A8"}},[a._v("1.6. 查找描述信息(film.description)中包含robot的电影对应的分类名称(category.name)以及电影数目(count(film.film_id))，而且还需要该分类包含电影总数量(count(film_category.category_id))>=5部")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#17-%E6%9F%A5%E6%89%BEsalary%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8Crunning_total%E5%85%B6%E4%B8%ADrunning_total%E4%B8%BA%E5%89%8Dn%E4%B8%AA%E5%BD%93%E5%89%8D-to_date--9999-01-01%E5%91%98%E5%B7%A5%E7%9A%84salary%E7%B4%AF%E8%AE%A1%E5%92%8C%E5%85%B6%E4%BB%96%E4%BB%A5%E6%AD%A4%E7%B1%BB%E6%8E%A8%E5%85%B7%E4%BD%93%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8Bdemo%E5%B1%95%E7%A4%BA"}},[a._v("1.7. 查找salary的累计和running_total。其中running_total为前N个当前( to_date = '9999-01-01')员工的salary累计和，其他以此类推。具体结果如下Demo展示。")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#18-%E5%88%A0%E9%99%A4emp_no%E9%87%8D%E5%A4%8D%E7%9A%84%E8%AE%B0%E5%BD%95%E5%8F%AA%E4%BF%9D%E7%95%99%E6%9C%80%E5%B0%8F%E7%9A%84id%E5%AF%B9%E5%BA%94%E7%9A%84%E8%AE%B0%E5%BD%95"}},[a._v("1.8. 删除emp_no重复的记录，只保留最小的id对应的记录。")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#19-mysql-top-%E6%8A%A5%E9%94%99"}},[a._v("1.9. MYSQL top 报错")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#110-%E6%9F%A5%E6%89%BE%E8%96%AA%E6%B0%B4%E5%8F%98%E5%8A%A8%E8%B6%85%E8%BF%8715%E6%AC%A1%E7%9A%84%E5%91%98%E5%B7%A5%E5%8F%B7emp_no%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%98%E5%8A%A8%E6%AC%A1%E6%95%B0"}},[a._v("1.10. 查找薪水变动超过15次的员工号emp_no以及其对应的变动次数")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#111-%E6%9F%A5%E6%89%BE%E5%BD%93%E5%89%8D%E8%96%AA%E6%B0%B4to_date9999-01-01%E6%8E%92%E5%90%8D%E7%AC%AC%E4%BA%8C%E5%A4%9A%E7%9A%84%E5%91%98%E5%B7%A5%E7%BC%96%E5%8F%B7emp_no%E8%96%AA%E6%B0%B4salarylast_name%E4%BB%A5%E5%8F%8Afirst_name%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%B8%8D%E4%BD%BF%E7%94%A8order-by%E5%AE%8C%E6%88%90%E5%90%97"}},[a._v("1.11. 查找当前薪水(to_date='9999-01-01')排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，你可以不使用order by完成吗")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#112-%E6%9F%A5%E6%89%BE%E5%91%98%E5%B7%A5%E7%BC%96%E5%8F%B7emp_no%E4%B8%BA10001%E5%85%B6%E8%87%AA%E5%85%A5%E8%81%8C%E4%BB%A5%E6%9D%A5%E7%9A%84%E8%96%AA%E6%B0%B4salary%E6%B6%A8%E5%B9%85%E6%80%BB%E5%85%B1%E6%B6%A8%E4%BA%86%E5%A4%9A%E5%B0%91growth%E5%8F%AF%E8%83%BD%E6%9C%89%E5%A4%9A%E6%AC%A1%E6%B6%A8%E8%96%AA%E6%B2%A1%E6%9C%89%E9%99%8D%E8%96%AA"}},[a._v("1.12. 查找员工编号emp_no为10001其自入职以来的薪水salary涨幅(总共涨了多少)growth(可能有多次涨薪，没有降薪)")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#113-%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E8%87%AA%E5%85%A5%E8%81%8C%E4%BB%A5%E6%9D%A5%E7%9A%84%E8%96%AA%E6%B0%B4%E6%B6%A8%E5%B9%85%E6%83%85%E5%86%B5%E7%BB%99%E5%87%BA%E5%91%98%E5%B7%A5%E7%BC%96%E5%8F%B7emp_no%E4%BB%A5%E5%8F%8A%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E8%96%AA%E6%B0%B4%E6%B6%A8%E5%B9%85growth%E5%B9%B6%E6%8C%89%E7%85%A7growth%E8%BF%9B%E8%A1%8C%E5%8D%87%E5%BA%8F"}},[a._v("1.13. 查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#114-%E5%AF%B9%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E7%9A%84%E5%BD%93%E5%89%8Dto_date9999-01-01%E8%96%AA%E6%B0%B4%E6%8C%89%E7%85%A7salary%E8%BF%9B%E8%A1%8C%E6%8C%89%E7%85%A71-n%E7%9A%84%E6%8E%92%E5%90%8D%E7%9B%B8%E5%90%8Csalary%E5%B9%B6%E5%88%97%E4%B8%94%E6%8C%89%E7%85%A7emp_no%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97"}},[a._v("1.14. 对所有员工的当前(to_date='9999-01-01')薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#115-%E4%B8%83%E5%BC%A0%E5%9B%BE%E5%85%A5%E9%97%A8sql"}},[a._v("1.15. 七张图入门SQL")])])])])]),a._v(" "),t("h2",{attrs:{id:"_1-sql语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-sql语句"}},[a._v("#")]),a._v(" 1. SQL语句")]),a._v(" "),t("h3",{attrs:{id:"_1-1-修改数据表名称-如将titles-test表名修改为titles-2017。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-修改数据表名称-如将titles-test表名修改为titles-2017。"}},[a._v("#")]),a._v(" 1.1. 修改数据表名称，如将titles_test表名修改为titles_2017。")]),a._v(" "),t("p",[a._v("题目是sqlite3，必须要加to")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("alter table titles_test rename to titles_2017\n")])])]),t("p",[a._v("如果是mysql，不用加to")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("alter table titles_test rename titles_2017\n")])])]),t("h3",{attrs:{id:"_1-2-插入数据-如果数据已经存在-请忽略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-插入数据-如果数据已经存在-请忽略"}},[a._v("#")]),a._v(" 1.2. 插入数据，如果数据已经存在，请忽略")]),a._v(" "),t("p",[a._v("因为题目判定系统使用的是sqlite3，所以必须按sqlite3的写法来做，")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("insert or ignore into actor\nvalues(3,'ED','CHASE','2006-02-15 12:34:33');\n")])])]),t("p",[a._v("如果是mysql，那么把or去掉，像下面这样：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("insert IGNORE into actor\nvalues(3,'ED','CHASE','2006-02-15 12:34:33');\n")])])]),t("h3",{attrs:{id:"_1-3-对于employees表-在对first-name进行排名后-选出奇数排名对应的first-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-对于employees表-在对first-name进行排名后-选出奇数排名对应的first-name"}},[a._v("#")]),a._v(" 1.3. 对于employees表，在对first_name进行排名后，选出奇数排名对应的first_name")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select e1.first_name \nfrom employees as e1 \nwhere(\nselect count(*) from employees as e2 \nwhere e1.first_name >= e2.first_name\n)%2=1;\n")])])]),t("p",[a._v("先排序，然后取出奇数列。如果 e1.first_name 是第一位，比如a，那 e2.first_name 只有1个，就是 e1.first_name 本身；如果 e1.first_name 排在第二位，比如吧，就有它和比它小的2个。")]),a._v(" "),t("p",[a._v("下面是打印出排序后的序号")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT e2.first_name, \n    (SELECT COUNT(*) FROM employees AS e3 \n     WHERE e3.first_name <= e2.first_name) \n   AS rowid FROM employees AS e2\n")])])]),t("h3",{attrs:{id:"_1-4-三张表-film-film-id-title-description-category-category-id-name-film-category-film-id-category-id-属于action分类的所有电影对应的title-description"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-三张表-film-film-id-title-description-category-category-id-name-film-category-film-id-category-id-属于action分类的所有电影对应的title-description"}},[a._v("#")]),a._v(" 1.4. 三张表，film(film_id, title, description)，category(category_id, name)，film-category(film_id, category_id)，属于Action分类的所有电影对应的title,description")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 子查询方法\nselect f.title, f.description from film as f \nwhere f.film_id in \n( \nselect fc.film_id \nfrom film_category as fc \nwhere fc.category_id in\n(\nselect c.category_id \nfrom category as c \nwhere c.name = 'Action'\n)\n);\n\n\n# 非子查询方法\nselect f.title, f.description \nfrom film as f \ninner join film_category as fc on fc.film_id = f.film_id \ninner join category as c on fc.category_id = c.category_id \nwhere c.name = 'action';\n\n\n# 其他方法\nselect f.title, f.description \nfrom film as f, film_category as fc,category as c \nwhere f.film_id = fc.film_id \nand fc.category_id = c.category_id \nand c.name = 'ACTION';\n")])])]),t("h3",{attrs:{id:"_1-5-找出没有分类的电影id以及名称"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-找出没有分类的电影id以及名称"}},[a._v("#")]),a._v(" 1.5. 找出没有分类的电影id以及名称")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("# 解题思路是运用 LEFT JOIN 连接两表，用 IS NULL 语句限定条件\nselect f.title, f.description \nfrom film as f \nleft join film_category as fc \non fc.film_id = f.film_id \nwhere fc.category_id is Null;\n")])])]),t("h3",{attrs:{id:"_1-6-查找描述信息-film-description-中包含robot的电影对应的分类名称-category-name-以及电影数目-count-film-film-id-而且还需要该分类包含电影总数量-count-film-category-category-id-5部"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-查找描述信息-film-description-中包含robot的电影对应的分类名称-category-name-以及电影数目-count-film-film-id-而且还需要该分类包含电影总数量-count-film-category-category-id-5部"}},[a._v("#")]),a._v(" 1.6. 查找描述信息(film.description)中包含robot的电影对应的分类名称(category.name)以及电影数目(count(film.film_id))，而且还需要该分类包含电影总数量(count(film_category.category_id))>=5部")]),a._v(" "),t("ul",[t("li",[a._v("1、找到对应电影数量>=5的所有分类，建立成虚表cc")]),a._v(" "),t("li",[a._v("2、设定限制条件 f.description like '%robot%'")]),a._v(" "),t("li",[a._v("3、在表cc、f、fc、c中查找包括robot的电影对应的分类名称和对应的电影数目。")]),a._v(" "),t("li",[a._v("注意c.category_id = cc.category_id 是必要的。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select c.name, count(fc.film_id) \nfrom(\nselect category_id, count(film_id) \nfrom film_category as fc \ngroup by category_id \nhaving count(film_id) >=5  \n) as cc,\nfilm as f, category as c, film_category as fc\nwhere f.film_id = fc.film_id \nand fc.category_id = c.category_id\nand c.category_id = cc.category_id\nand f.description like '%robot%';\n")])])]),t("h3",{attrs:{id:"_1-7-查找salary的累计和running-total。其中running-total为前n个当前-to-date-9999-01-01-员工的salary累计和-其他以此类推。具体结果如下demo展示。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-查找salary的累计和running-total。其中running-total为前n个当前-to-date-9999-01-01-员工的salary累计和-其他以此类推。具体结果如下demo展示。"}},[a._v("#")]),a._v(" 1.7. 查找salary的累计和running_total。其中running_total为前N个当前( to_date = '9999-01-01')员工的salary累计和，其他以此类推。具体结果如下Demo展示。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("emp_no\tsalary\trunning_total\n10001\t88958\t88958\n10002\t72527\t161485\n10003\t43311\t204796\n10004\t74057\t278853\n")])])]),t("p",[a._v("本题的思路为复用 salaries 表进行子查询，最后以 s1.emp_no 排序输出求和结果。")]),a._v(" "),t("ul",[t("li",[a._v("1、输出的第三个字段，是由一个 SELECT 子查询构成。将子查询内复用的 salaries 表记为 s2，主查询的 salaries 表记为 s1，")]),a._v(" "),t("li",[a._v("当主查询的 s1.emp_no 确定时，对子查询中不大于 s1.emp_no 的 s2.emp_no 所对应的薪水求和")]),a._v(" "),t("li",[a._v("2、注意是对员工当前的薪水求和，所以在主查询和子查询内都要加限定条件 to_date = '9999-01-01'")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select s1.emp_no, s1.salary, (\nselect count(s2.salary) \nfrom salaries as s2 \nwhere s2.emp_no <= s1.emp_no \nand s2.to_date='9999-01-01'\n)as running_total\nfrom salaries as s1\nwhere s1.to_date = '9999-01-01'\norder by s1.emp_no;\n")])])]),t("h3",{attrs:{id:"_1-8-删除emp-no重复的记录-只保留最小的id对应的记录。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-删除emp-no重复的记录-只保留最小的id对应的记录。"}},[a._v("#")]),a._v(" 1.8. 删除emp_no重复的记录，只保留最小的id对应的记录。")]),a._v(" "),t("ul",[t("li",[a._v("先用 GROUP BY 和 MIN() 选出每个 emp_no 分组中最小的 id")]),a._v(" "),t("li",[a._v("然后用 DELETE FROM ... WHERE ... NOT IN ... 语句删除 “非每个分组最小id对应的所有记录”")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("delete from titles_test \nwhere id not in (\nselect min(id) \nfrom titles_test \ngroup by emp_no\n);\n")])])]),t("h3",{attrs:{id:"_1-9-mysql-top-报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-mysql-top-报错"}},[a._v("#")]),a._v(" 1.9. MYSQL top 报错")]),a._v(" "),t("p",[t("strong",[a._v("top 语法适用于sqlserver或access，不适用于mysql。在mysql下，得用limit。比如 select * from test limit 3")])]),a._v(" "),t("h3",{attrs:{id:"_1-10-查找薪水变动超过15次的员工号emp-no以及其对应的变动次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-查找薪水变动超过15次的员工号emp-no以及其对应的变动次数"}},[a._v("#")]),a._v(" 1.10. 查找薪水变动超过15次的员工号emp_no以及其对应的变动次数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select a.emp_no,count(*) t from salaries a inner join salaries b\non a.emp_no=b.emp_no and a.to_date = b.from_date\nwhere a.salary < b.salary\ngroup by a.emp_no\nhaving t>15\n")])])]),t("h3",{attrs:{id:"_1-11-查找当前薪水-to-date-9999-01-01-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name-你可以不使用order-by完成吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-查找当前薪水-to-date-9999-01-01-排名第二多的员工编号emp-no、薪水salary、last-name以及first-name-你可以不使用order-by完成吗"}},[a._v("#")]),a._v(" 1.11. 查找当前薪水(to_date='9999-01-01')排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，你可以不使用order by完成吗")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("解法1 max 任意相同工资人数\nselect e.emp_no,s.salary,e.last_name,e.first_name\nfrom\nemployees e\njoin \nsalaries s on e.emp_no=s.emp_no \nand  s.to_date='9999-01-01'\nand s.salary = (select max(salary)\n                from salaries\n                where salary<(select max(salary) \n                              from salaries \n                              where to_date='9999-01-01'\n                             )\n                        and to_date='9999-01-01'\n                )\n\n第二种 通用型可以求任意第几高，并且可以求多个形同工资\nselect e.emp_no,s.salary,e.last_name,e.first_name\nfrom\nemployees e\njoin \nsalaries s on e.emp_no=s.emp_no \nand  s.to_date='9999-01-01'\nand s.salary = \n(\n     select s1.salary\n     from \n     salaries s1\n     join\n     salaries s2 on s1.salary<=s2.salary \n     and s1.to_date='9999-01-01' and s2.to_date='9999-01-01'\n     group by s1.salary\n     having count(distinct s2.salary)=2\n )\n")])])]),t("h3",{attrs:{id:"_1-12-查找员工编号emp-no为10001其自入职以来的薪水salary涨幅-总共涨了多少-growth-可能有多次涨薪-没有降薪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-查找员工编号emp-no为10001其自入职以来的薪水salary涨幅-总共涨了多少-growth-可能有多次涨薪-没有降薪"}},[a._v("#")]),a._v(" 1.12. 查找员工编号emp_no为10001其自入职以来的薪水salary涨幅(总共涨了多少)growth(可能有多次涨薪，没有降薪)")]),a._v(" "),t("ol",[t("li",[a._v("先分别找到emp_no=10001的员工的第一次工资记录与最后一次工资记录")]),a._v(" "),t("li",[a._v("再将最后一次工资记录减去第一次工资记录得到入职以来salary的涨幅，最后用别名growth代替")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT ( \n(SELECT salary FROM salaries WHERE emp_no = 10001 ORDER BY to_date DESC LIMIT 1) -\n(SELECT salary FROM salaries WHERE emp_no = 10001 ORDER BY to_date ASC LIMIT 1)\n) AS growth\n")])])]),t("h3",{attrs:{id:"_1-13-查找所有员工自入职以来的薪水涨幅情况-给出员工编号emp-no以及其对应的薪水涨幅growth-并按照growth进行升序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-查找所有员工自入职以来的薪水涨幅情况-给出员工编号emp-no以及其对应的薪水涨幅growth-并按照growth进行升序"}},[a._v("#")]),a._v(" 1.13. 查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("select a.emp_no, (b.salary - c.salary) as growth\nfrom\n    employees as a\n    inner join salaries as b\n    on a.emp_no = b.emp_no and b.to_date = '9999-01-01'\n    inner join salaries as c\n    on a.emp_no = c.emp_no and a.hire_date = c.from_date\norder by growth asc\n")])])]),t("h3",{attrs:{id:"_1-14-对所有员工的当前-to-date-9999-01-01-薪水按照salary进行按照1-n的排名-相同salary并列且按照emp-no升序排列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-对所有员工的当前-to-date-9999-01-01-薪水按照salary进行按照1-n的排名-相同salary并列且按照emp-no升序排列"}},[a._v("#")]),a._v(" 1.14. 对所有员工的当前(to_date='9999-01-01')薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列")]),a._v(" "),t("p",[a._v("本题的主要思想是复用salaries表进行比较排名，具体思路如下：")]),a._v(" "),t("ol",[t("li",[a._v("从两张相同的salaries表（分别为s1与s2）进行对比分析，先将两表限定条件设为to_date = '9999-01-01'，挑选出当前所有员工的薪水情况。")]),a._v(" "),t("li",[a._v("本题的精髓在于 s1.salary <= s2.salary，意思是"),t("strong",[a._v("在输出s1.salary的情况下，有多少个s2.salary大于等于s1.salary")]),a._v("，比如当s1.salary=94409时，有3个s2.salary（分别为94692,94409,94409）大于等于它，但由于94409重复，利用COUNT(DISTINCT s2.salary)去重可得工资为94409的rank等于2。其余排名以此类推。")]),a._v(" "),t("li",[a._v("千万不要忘了GROUP BY s1.emp_no，否则输出的记录只有一条（可能是第一条或者最后一条，根据不同的数据库而定），因为用了合计函数COUNT()")]),a._v(" "),t("li",[a._v("最后先以 s1.salary 逆序排列，再以 s1.emp_no 顺序排列输出结果")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("SELECT s1.emp_no, s1.salary, COUNT(DISTINCT s2.salary) AS rank\nFROM salaries AS s1, salaries AS s2\nWHERE s1.to_date = '9999-01-01'  AND s2.to_date = '9999-01-01' AND s1.salary <= s2.salary\nGROUP BY s1.emp_no\nORDER BY s1.salary DESC, s1.emp_no ASC\n")])])]),t("h3",{attrs:{id:"_1-15-七张图入门sql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-七张图入门sql"}},[a._v("#")]),a._v(" 1.15. 七张图入门SQL")]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145805_c34d21fc8057.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145821_f4936f2f31a6.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145831_070a792a8142.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145839_fcbd0a6052e3.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145849_c8e066a9f4bb.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145856_7d6bad210af0.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720145905_3f5b705ad8fa.png",alt:"img"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200720180544_cbfa40405d70.png",alt:"img"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);