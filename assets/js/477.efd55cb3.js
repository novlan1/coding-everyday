(window.webpackJsonp=window.webpackJsonp||[]).push([[477],{749:function(v,_,e){"use strict";e.r(_);var a=e(14),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"一、开始"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、开始"}},[v._v("#")]),v._v(" 一、开始")]),v._v(" "),_("p",[v._v("最近几个月看的源码比较多，记录下一些当下的理解。")]),v._v(" "),_("h2",{attrs:{id:"二、为什么要阅读源码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么要阅读源码"}},[v._v("#")]),v._v(" 二、为什么要阅读源码")]),v._v(" "),_("p",[v._v("个人阅读源码的动机主要是好奇心，好奇"),_("code",[v._v("babel")]),v._v("究竟是如何转化JS的、"),_("code",[v._v("vue-loader")]),v._v("内部究竟做了什么，再深入一点，"),_("code",[v._v("webpack")]),v._v("的架构是什么，"),_("code",[v._v("webpack")]),v._v("和"),_("code",[v._v("rollup")]),v._v("打包原理是不是一样的、有什么不同？")]),v._v(" "),_("p",[v._v("阅读别人的文章终究不深刻，另外你也不知道他说的对不对，虽然一套套的，但很有可能别人的文章已经过时了。")]),v._v(" "),_("p",[_("code",[v._v("webpack")]),v._v("的"),_("code",[v._v("tree-shaking")]),v._v("是很好的例子，很多文章讲的某些案例不能实现"),_("code",[v._v("tree-shaking")]),v._v("，但"),_("code",[v._v("webpack")]),v._v("最新版本可能并不是这样。想一想原因，"),_("code",[v._v("tree-shaking")]),v._v("不生效的原因是因为静态解析不完备、副作用不能排除，当解决了这个问题，就可以更好的进行"),_("code",[v._v("tree-shaking")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"三、怎么阅读源码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、怎么阅读源码"}},[v._v("#")]),v._v(" 三、怎么阅读源码")]),v._v(" "),_("p",[v._v("如果一个框架有自己的文档的话，首先要读下它的文档，因为它的难度比较低，而且文档中也有对其核心功能、核心API的详细说明，读源码的时候可以重点看下这些对外的接口是怎样实现的。")]),v._v(" "),_("p",[v._v("另外，阅读某些源码可能需要一点门槛，通常是基础知识，比如"),_("code",[v._v("@babel/core")]),v._v("中广泛用的"),_("code",[v._v("generator")]),v._v("和"),_("code",[v._v("gensync")]),v._v("、"),_("code",[v._v("webpack")]),v._v("中用到的"),_("code",[v._v("tapable")]),v._v("插件，对这些前置知识不熟悉的话需要补齐。")]),v._v(" "),_("p",[v._v("阅读源码过程中，应该抓住主流程。为什么呢？因为分支可能比你想象中要多，如果一开始就把精力放在每一个分支上，估计很快就放弃。当你对主流程掌握后，然后再阅读感兴趣的细节部分，应该是一个更好的选择。")]),v._v(" "),_("p",[v._v("阅读过程中，在思想层面上，一定要多思考、多对比，想一下为什么这样实现，有什么好处，为什么不那样实现，是不是有更好的实现方式。还可以对比一下与它类似的框架有什么不同，是什么原因造成了这种不同。")]),v._v(" "),_("p",[v._v("在方法层面上，至少是"),_("code",[v._v("clone")]),v._v("下来，"),_("code",[v._v("build/dev")]),v._v("下、自己跑一下，写几个"),_("code",[v._v("demo")]),v._v("。另外，"),_("code",[v._v("debug")]),v._v("调试、"),_("code",[v._v("console")]),v._v("打印关键信息、画流程图辅助都是有用的。")]),v._v(" "),_("p",[v._v("读研究生时，一个老师说搞科研要“求源求新”，这句话放到读源码上也适用。”求源“就是看它第一次"),_("code",[v._v("commit")]),v._v("是怎样的、"),_("code",[v._v("v1.0.0")]),v._v("是怎样的，它最开始是为了解决什么问题而出现的。”求新“就是看它最新的版本是怎样的，架构有什么改动，加入了什么新的特性。")]),v._v(" "),_("p",[v._v("当你对某个框架有自己的感悟时，可以尝试写一篇文章。自己会和写出来是不一样的，在写的过程中，极有可能发现自己对某些知识点掌握得并不深刻，你需要说服自己，然后才能说服别人。")]),v._v(" "),_("h2",{attrs:{id:"四、阅读源码的好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、阅读源码的好处"}},[v._v("#")]),v._v(" 四、阅读源码的好处")]),v._v(" "),_("p",[v._v("一个很重要的好处是拓宽技术视野，即知识的广度和深度。有意思的是，阅读源码可以兼得广度和深度。深度指的是你都阅读源码了，都在学习原理了，还不深吗？广度指的是阅读过程中遇到的其他知识点，比如"),_("code",[v._v("@babel/parser")]),v._v("中对"),_("code",[v._v("unicode")]),v._v("的运用，还有上面提到的"),_("code",[v._v("gensync")]),v._v("，广度的根本原因是很多框架都是站在巨人的肩膀上的。")]),v._v(" "),_("p",[v._v("拓宽技术视野又有什么好处呢？其实就跟“读万卷书，行万里路”一样，首先，当工作中遇到类似问题时，你可能会想到与之前不一样的解决办法，其次，当你想自己写一个框架来解决某个问题时，你可能会有较多的思路和想法。")]),v._v(" "),_("h2",{attrs:{id:"五、什么是技术强"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、什么是技术强"}},[v._v("#")]),v._v(" 五、什么是技术强")]),v._v(" "),_("p",[v._v("参考"),_("a",{attrs:{href:"https://www.zhihu.com/question/456527668/answer/1858291784",target:"_blank",rel:"noopener noreferrer"}},[v._v("尤雨溪的回答"),_("OutboundLink")],1),v._v("，强可以理解为制造影响力的能力，影响力的本质来自于解决问题。如果一个领域的问题被解决得差不多了，那么在这个领域制造影响力的难度就大了许多。要想影响力大，要发现问题，并思考什么才是值得解决的问题，另外具备高质量的解决问题的技术水准。")])])}),[],!1,null,null,null);_.default=t.exports}}]);