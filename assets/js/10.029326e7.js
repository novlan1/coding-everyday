(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{312:function(t,e,s){"use strict";s.r(e);var a=s(25),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("唯一区别：正则匹配的性能区别")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("rewrite ^/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".*"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$ https://example.com/"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrewrite ^ https://example.com"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),t._v("? permanent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("301")]),t._v(" https://example.com"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_uri")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("第一种 "),e("code",[t._v("rewrite")]),t._v(" 写法是抓取所有的 URI 再减去开头第一个 / (反斜线)。")]),t._v(" "),e("li",[t._v("第二种写法用了"),e("code",[t._v("$request_uri")]),t._v(" 省去了减去开头第一个反斜线的过程，正则匹配上性能更优。但仍不如第三种写法，因为 rewrite 有很多写法和规则，执行到最后 nginx 才知道这是一个 301 永久重定向。")]),t._v(" "),e("li",[t._v("第三种则直接 "),e("code",[t._v("return 301 + $request_uri")]),t._v("，直接告诉 nginx 这是个 301重定向，直接抓取指定URI。")])]),t._v(" "),e("p",[t._v("所以以上三种写法，第三种性能更优一些。当然，一般情况下快那么一点点，作为普通业余站长来说，我们也感觉不到。")])])}),[],!1,null,null,null);e.default=n.exports}}]);