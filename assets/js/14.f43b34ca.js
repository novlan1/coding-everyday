(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{289:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E5%88%A9%E7%94%A8%E5%BC%82%E6%88%96%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B0"}},[t._v("1. 利用异或交换两个数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%AF%BB%E6%89%BE%E5%94%AF%E4%B8%80%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0"}},[t._v("2. 寻找唯一的重复元素")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E5%AF%BB%E6%89%BE%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E5%87%BA%E7%8E%B0%E4%BA%86%E5%A5%87%E6%95%B0%E6%AC%A1%E7%9A%84%E6%95%B0"}},[t._v("3. 寻找只有一个出现了奇数次的数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%AF%BB%E6%89%BE%E5%8F%AA%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%87%BA%E7%8E%B0%E4%BA%86%E5%A5%87%E6%95%B0%E6%AC%A1%E7%9A%84%E6%95%B0"}},[t._v("4. 寻找只有两个出现了奇数次的数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95"}},[t._v("5. 不用加减乘除做加法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#6-%E5%BC%82%E6%88%96%E8%BF%9B%E8%A1%8C%E5%8A%A0%E5%AF%86"}},[t._v("6. 异或进行加密")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#7-%E8%BF%94%E5%9B%9Emax%E5%80%BC%E4%B8%8D%E7%94%A8%E6%AF%94%E8%BE%83%E5%88%A4%E6%96%AD"}},[t._v("7. 返回max值，不用比较判断")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#8-%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81"}},[t._v("8. 格雷编码")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#9-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8"}},[t._v("9. 布隆过滤器")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#91-%E5%AE%9E%E9%99%85%E5%B7%A5%E7%A8%8B%E7%9A%84%E5%BA%94%E7%94%A8"}},[t._v("9.1. 实际工程的应用")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#92-%E4%BD%8D%E5%9B%BEbitmap"}},[t._v("9.2. 位图（bitmap）")])])])])]),t._v(" "),a("h2",{attrs:{id:"异或"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异或"}},[t._v("#")]),t._v(" 异或 ")]),t._v(" "),a("h3",{attrs:{id:"_1-利用异或交换两个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-利用异或交换两个数"}},[t._v("#")]),t._v(" 1. 利用异或交换两个数")]),t._v(" "),a("p",[t._v("思路：\n这个交换两个变量而无需借助第3个临时变量过程，其实现主要是基于异或运算的如下性质：")]),t._v(" "),a("ol",[a("li",[t._v("任意一个变量X与其自身进行异或运算，结果为0，即"),a("code",[t._v("X^X=0")])]),t._v(" "),a("li",[t._v("任意一个变量X与0进行异或运算，结果不变，即"),a("code",[t._v("X^0=X")])]),t._v(" "),a("li",[t._v("异或运算具有可结合性，即"),a("code",[t._v("a^b^c=（a^b）^c=a^（b^c）")])]),t._v(" "),a("li",[t._v("异或运算具有可交换性，即"),a("code",[t._v("a^b=b^a")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a = a^b\nb = a^b = a^b^b = a\na = a^b = a^b ^a = a^a^b = b (这一步的时候a还是等于a^b)\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSwap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-寻找唯一的重复元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-寻找唯一的重复元素"}},[t._v("#")]),t._v(" 2. 寻找唯一的重复元素")]),t._v(" "),a("p",[t._v("1-1000放在含有1001个元素的数组中，只有唯一的一个元素值重复，其它均只出现一次。每个数组元素只能访问一次，设计一个算法，将它找出来；不用辅助存储空间，能否设计一个算法实现？")]),t._v(" "),a("p",[t._v("答：\n令，"),a("code",[t._v("1^2^...^1000")]),t._v("（序列中不包含n）的结果为"),a("code",[t._v("T")]),t._v("\n则"),a("code",[t._v("1^2^...^1000")]),t._v("（序列中包含n）的结果就是"),a("code",[t._v("T^n")]),t._v("。\n"),a("code",[t._v("T^(T^n)=n")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_3-寻找只有一个出现了奇数次的数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-寻找只有一个出现了奇数次的数"}},[t._v("#")]),t._v(" 3. 寻找只有一个出现了奇数次的数")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findOdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n     s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s\n")])])]),a("h3",{attrs:{id:"_4-寻找只有两个出现了奇数次的数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-寻找只有两个出现了奇数次的数"}},[t._v("#")]),t._v(" 4. 寻找只有两个出现了奇数次的数")]),t._v(" "),a("p",[t._v("给定一个数字arr，其中只有有两个数字出现了奇数次，其它数字都出现了偶数次，按照从小到大顺序输出这两个数。")]),t._v(" "),a("p",[t._v("思路：")]),t._v(" "),a("ol",[a("li",[t._v("从头到尾异或一遍，你就得到了需要求的两个数异或后的值。这两个数显然不相等，异或出来的结果不为0。")]),t._v(" "),a("li",[t._v("我们可以据此找出两个数的二进制表达中不同的一位，然后把所有这n个数分成两类，在那一位上是0的分成一类，在那一位上是1的分到另一类。")]),t._v(" "),a("li",[t._v("按照原先的异或解法，从每一部分中找出唯一的奇数次整数即可。")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findOdds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  res1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" \n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    res1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  \n  res2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" res1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      res2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  res3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" res1\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("res3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" res3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" res2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("res2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-不用加减乘除做加法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-不用加减乘除做加法"}},[t._v("#")]),t._v(" 5. 不用加减乘除做加法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("思路：\n1. 5+7，5二进制为101，7二进制为111 第一步：相加各位的值，不算进位，\n   得到010，二进制每位相加就相当于各位做异或操作，101^111。\n\n2. 第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左\n   移一位得到1010，(101&111)<<1。\n\n3. 第三步重复上述两步， 各位相加 010^1010=1000，进位值为\n   100=(010&1010)<<1。\n\n4. 继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为\n   最终结果。\n")])])]),a("p",[t._v("简单来说，就是"),a("strong",[t._v("异或，按位与并左移（计算进位值），直到进位值为0")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),t._v("\n    n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),t._v("\n    m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("和大数"),a("code",[t._v("0xFFFFFFFF")]),t._v("做与运算，最大不会超过这个数，模拟C++中超出最大范围变成0！")]),t._v(" "),a("p",[a("code",[t._v("a^0xFFFFFFFF")]),t._v(" 相当于对a取反")]),t._v(" "),a("h3",{attrs:{id:"_6-异或进行加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-异或进行加密"}},[t._v("#")]),t._v(" 6. 异或进行加密")]),t._v(" "),a("p",[t._v("异或运算可完成简单的加密与解密过程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("明文text，用户给定的密码pw，假设密文为cipher。\n\ncipher = text ^ pw\n\ntext = cipher ^ pw = (text ^ pw) ^ pw \n                   = text ^ (pw) ^ pw\n                   = text\n\n如果text长度大于pw，循环使用pw与text进行按位异或。\n")])])]),a("h3",{attrs:{id:"_7-返回max值-不用比较判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-返回max值-不用比较判断"}},[t._v("#")]),t._v(" 7. 返回max值，不用比较判断")]),t._v(" "),a("p",[t._v("方法一：\n得到 "),a("code",[t._v("a-b")]),t._v(" 的符号，根据该符号决定返回 "),a("code",[t._v("a")]),t._v(" 或 "),a("code",[t._v("b")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果符号为0，那么得到1，如果符号为1，那么得到0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("flip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取符号位，返回值1代表非负数，0代表负数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" flip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b\n\n  scA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getSign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  scB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" scA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" scB \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果a > b，scA = 1, 则返回a; 如果 a < b，scB = 1, 则返回b")]),t._v("\n")])])]),a("p",[t._v("方法一可能会有问题，当a-b溢出时，会发生错误。")]),t._v(" "),a("p",[t._v("方法二：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b\n\n  a_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getSign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a的符号，若为1表示非负，为0表示负")]),t._v("\n  b_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getSign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  c_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getSign"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\n  dif_ab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b_s "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示a和b的符号是否不相同，不相同为1，相同为0")]),t._v("\n  same_ab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dif_ab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示a和b的符号是否相同，相同为1，相同为0")]),t._v("\n\n  res_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" diff_ab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a_s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" same_ab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c_s\n  res_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" res_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b\n")])])]),a("p",[t._v("解释：")]),t._v(" "),a("ol",[a("li",[t._v("ab符号相同一定不会溢出，所以取差值c的符号")]),t._v(" "),a("li",[t._v("ab符号不同，可能会溢出，取a的符号。a若为正，符号为1，返回a；a若为负，符号为0，返回b")])]),t._v(" "),a("h3",{attrs:{id:"_8-格雷编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-格雷编码"}},[t._v("#")]),t._v(" 8. 格雷编码")]),t._v(" "),a("p",[t._v("格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。")]),t._v(" "),a("p",[t._v("给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grayCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n")])])]),a("p",[t._v("解释：")]),t._v(" "),a("ol",[a("li",[t._v("给定位数 "),a("code",[t._v("n")]),t._v("，"),a("code",[t._v("i")]),t._v(" 从 0 取到 "),a("code",[t._v("2^n−1")])]),t._v(" "),a("li",[a("code",[t._v("gray(i) = i ^ (i / 2)")])])]),t._v(" "),a("p",[t._v("如 n = 3:\ngray(0) = 0 ^ 0 = 000 ^ 000 = 000\ngray(1) = 1 ^ 0 = 001 ^ 000 = 001\ngray(2) = 2 ^ 1 = 010 ^ 001 = 011\ngray(3) = 3 ^ 1 = 011 ^ 001 = 010\ngray(4) = 4 ^ 2 = 100 ^ 010 = 110\ngray(5) = 5 ^ 2 = 101 ^ 010 = 111\ngray(6) = 6 ^ 3 = 110 ^ 011 = 101\ngray(7) = 7 ^ 3 = 111 ^ 011 = 100")]),t._v(" "),a("h3",{attrs:{id:"_9-布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-布隆过滤器"}},[t._v("#")]),t._v(" 9. 布隆过滤器")]),t._v(" "),a("p",[t._v("如果一个黑名单网站包含100亿个黑名单网页，每个网页最多占64B，设计一个系统，判断当前的URL是否在这个黑名单当中，要求额外空间不超过30GB，允许误差率为万分之一。")]),t._v(" "),a("p",[t._v("解题思路：布隆过滤器")]),t._v(" "),a("blockquote",[a("p",[t._v("布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。\n布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。")])]),t._v(" "),a("h4",{attrs:{id:"_9-1-实际工程的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-实际工程的应用"}},[t._v("#")]),t._v(" 9.1. 实际工程的应用")]),t._v(" "),a("p",[t._v("实际上，布隆过滤器广泛应用于网页黑名单系统、垃圾邮件过滤系统、爬虫网址判重系统等，有人会想，我直接将网页URL存入数据库进行查找不就好了，或者建立一个哈希表进行查找不就OK了。")]),t._v(" "),a("p",[t._v("当数据量小的时候，这么思考是对的，但如果整个网页黑名单系统包含100亿个网页URL，在数据库查找是很费时的，并且如果每个URL空间为64B，那么需要内存为640GB，一般的服务器很难达到这个需求。")]),t._v(" "),a("p",[t._v("那么，在这种内存不够且检索速度慢的情况下，不妨考虑下布隆过滤器，但业务上要可以忍受判断失误率。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/bloom_filter.jpg",alt:"实际工程的应用"}})]),t._v(" "),a("h4",{attrs:{id:"_9-2-位图-bitmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-位图-bitmap"}},[t._v("#")]),t._v(" 9.2. 位图（bitmap）")]),t._v(" "),a("p",[t._v("布隆过滤器其中重要的实现就是位图的实现，也就是位数组，并且在这个数组中每一个位置只占有1个bit，而每个bit只有0和1两种状态。如上图bitarray所示！bitarray也叫bitmap，大小也就是布隆过滤器的大小。")]),t._v(" "),a("p",[t._v("假设一种有k个哈希函数，且每个哈希函数的输出范围都大于m，接着将输出值对k取余（%m）,就会得到k个[0, m-1]的值，由于每个哈希函数之间相互独立，因此这k个数也相互独立，最后将这k个数对应到bitarray上并标记为1（涂黑）。")]),t._v(" "),a("p",[t._v("等判断时，将输入对象经过这k个哈希函数计算得到k个值，然后判断对应bitarray的k个位置是否都为1（是否标黑），"),a("strong",[t._v("如果有一个不为黑，那么这个输入对象则不在这个集合中，也就不是黑名单了！如果都是黑，那说明在集合中，但有可能会误")]),t._v("，由于当输入对象过多，而集合也就是bitarray过小，则会出现大部分为黑的情况，那样就容易发生误判！因此使用布隆过滤器是需要容忍错误率的，即使很低很低！")]),t._v(" "),a("p",[t._v("参考资料：")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/72378274",target:"_blank",rel:"noopener noreferrer"}},[t._v("数学之美：布隆过滤器"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/2104d11ee0a2",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解布隆过滤器"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);