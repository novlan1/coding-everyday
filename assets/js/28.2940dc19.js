(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{299:function(t,a,_){"use strict";_.r(a);var s=_(14),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95"}},[t._v("1. 数据结构与算法")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#11-%E5%A4%8D%E6%9D%82%E5%BA%A6"}},[t._v("1.1. 复杂度")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#111-log%E7%BA%A7%E5%88%AB%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6"}},[t._v("1.1.1. "),a("code",[t._v("log")]),t._v("级别的时间复杂度")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#112-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%8C%89%E7%85%A7%E9%98%B6%E6%8E%92%E5%BA%8F"}},[t._v("1.1.2. 时间复杂度按照阶排序")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#113-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%AA%8D%E9%97%A8"}},[t._v("1.1.3. 复杂度分析窍门")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#114-%E6%B8%90%E8%BF%9B%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6"}},[t._v("1.1.4. 渐进时间复杂度")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#12-%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82"}},[t._v("1.2. 算法设计要求")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#13-%E4%BB%8E%E5%93%AA%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90"}},[t._v("1.3. 从哪几个方面进行算法分析")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#14-%E6%9C%AC%E8%B4%A8"}},[t._v("1.4. 本质")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#15-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E4%B8%8E%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84"}},[t._v("1.5. 数据结构之逻辑结构与物理(存储)结构")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#16-%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%95%B0%E7%BB%84"}},[t._v("1.6. 链表与数组")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#17-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84"}},[t._v("1.7. 线性表的存储结构")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#18-%E6%A0%91%E7%9A%84%E5%88%86%E7%B1%BB"}},[t._v("1.8. 树的分类")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#19-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91"}},[t._v("1.9. 二叉搜索树")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#191-%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%A0%91%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0%E8%BF%87%E7%A8%8B"}},[t._v("1.9.1. 二分搜索树删除元素过程")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AE%9A%E4%B9%89avl"}},[t._v("1.10. 平衡二叉树定义("),a("code",[t._v("AVL")]),t._v(")：")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#111-trie"}},[t._v("1.11. Trie")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#112-%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E7%89%B9%E6%80%A7"}},[t._v("1.12. 前序、中序、后序遍历的特性")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#113-%E5%B7%B2%E7%9F%A5%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86"}},[t._v("1.13. 已知前序、中序遍历，求后序遍历")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#114-%E5%B7%B2%E7%9F%A5%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86"}},[t._v("1.14. 已知中序和后序遍历，求前序遍历")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#115-%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%85%B6%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%BB%93%E6%9E%9C%E4%B8%8E%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E7%BB%93%E6%9E%9C%E4%B8%80%E6%A0%B7%E9%82%A3%E4%B9%88"}},[t._v("1.15. 如果一个二叉树，其中序遍历结果与前序遍历结果一样，那么")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#116-%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8E%E7%BB%A7%E8%8A%82%E7%82%B9%E5%92%8C%E5%89%8D%E9%A9%B1%E8%8A%82%E7%82%B9"}},[t._v("1.16. 什么是后继节点和前驱节点")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#117-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%E8%B4%A8"}},[t._v("1.17. 二叉树的重要性质")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#118-%E5%9B%BE%E8%AE%BA"}},[t._v("1.18. 图论")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1181-%E5%88%86%E7%B1%BB"}},[t._v("1.18.1. 分类")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#119-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2"}},[t._v("1.19. 广度优先搜索")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#120-%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F"}},[t._v("1.20. 图的连通性，连通分量")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#121-%E8%BF%9E%E9%80%9A%E5%9B%BE"}},[t._v("1.21. 连通图")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#122-%E7%94%9F%E6%88%90%E6%A0%91"}},[t._v("1.22. 生成树")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1221-%E7%94%9F%E6%88%90%E6%A3%AE%E6%9E%97"}},[t._v("1.22.1. 生成森林")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#123-%E9%82%BB%E6%8E%A5%E7%82%B9"}},[t._v("1.23. 邻接点")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#124-%E7%AE%80%E5%8D%95%E5%9B%BE"}},[t._v("1.24. 简单图")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#125-%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95"}},[t._v("1.25. 图的表示方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#126-%E5%AE%8C%E5%85%A8%E5%9B%BE%E5%85%B8%E5%9E%8B%E7%9A%84%E7%A8%A0%E5%AF%86%E5%9B%BE"}},[t._v("1.26. 完全图（典型的稠密图）")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#127-%E9%82%BB%E6%8E%A5%E8%A1%A8"}},[t._v("1.27. 邻接表")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#128-%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5"}},[t._v("1.28. 邻接矩阵")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#129-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91minimum-span-tree"}},[t._v("1.29. 最小生成树"),a("code",[t._v("Minimum Span Tree")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#130-%E5%88%87%E5%88%86%E5%AE%9A%E7%90%86cut-property"}},[t._v("1.30. 切分定理Cut Property")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#131-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98"}},[t._v("1.31. 最短路径问题")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#132-%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95"}},[t._v("1.32. 狄克斯特拉算法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#133-bellman-ford%E7%AE%97%E6%B3%95"}},[t._v("1.33. "),a("code",[t._v("Bellman-Ford")]),t._v("算法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#134-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F"}},[t._v("1.34. 拓扑排序")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1341-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%E6%96%B9%E6%B3%95"}},[t._v("1.34.1. 判断是否有环方法：")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#135-%E6%A0%91%E5%92%8C%E5%9B%BE%E7%9A%84%E5%85%B3%E7%B3%BB"}},[t._v("1.35. 树和图的关系")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#136-%E5%A0%86"}},[t._v("1.36. 堆")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#137-%E5%A0%86%E5%92%8C%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("1.37. 堆和搜索二叉树的区别")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#138-%E6%95%A3%E5%88%97%E8%A1%A8hashtable"}},[t._v("1.38. 散列表（"),a("code",[t._v("hashtable")]),t._v("）")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E6%8E%92%E5%BA%8F"}},[t._v("2. 排序")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21-%E5%B7%A5%E7%A8%8B%E4%B8%8A%E7%9A%84%E6%8E%92%E5%BA%8F"}},[t._v("2.1. 工程上的排序")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#22-%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6"}},[t._v("2.2. 经典排序的空间复杂度")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#23-%E4%B8%8D%E7%A8%B3%E5%AE%9A%E6%8E%92%E5%BA%8F"}},[t._v("2.3. 不稳定排序")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#24-%E6%8E%92%E5%BA%8F%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81"}},[t._v("2.4. 排序初始状态")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#25-%E4%BB%8E1000%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B8%AD%E6%89%BE%E5%87%BA%E6%9C%80%E5%A4%A7%E7%9A%8410%E4%B8%AA%E5%AD%97"}},[t._v("2.5. 从1000个数字中找出最大的10个字？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#26-%E6%95%B0%E6%8D%AE%E8%A1%A8a%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E8%B7%9D%E5%85%B6%E6%9C%80%E7%BB%88%E4%BD%8D%E7%BD%AE%E4%B8%8D%E8%BF%9C%E4%B8%BA%E8%8A%82%E7%9C%81%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F%E5%BA%94%E9%87%87%E7%94%A8%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95%E6%8E%92%E5%BA%8F"}},[t._v("2.6. 数据表A中每个元素距其最终位置不远，为节省时间排序，应采用什么方法排序？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#27-%E6%9F%A5%E6%89%BE"}},[t._v("2.7. 查找")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#28-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E7%9A%84%E6%9C%80%E5%B0%8F%E6%AF%94%E8%BE%83%E6%AC%A1%E6%95%B0"}},[t._v("2.8. 有序数组合并的最小比较次数")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#29-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE%E5%AF%B9%E6%AF%94"}},[t._v("2.9. 二分查找、顺序查找、分块查找对比")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#210-%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%93%8D%E4%BD%9C%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94"}},[t._v("2.10. 几种常见的数据结构的操作性能对比")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#211-bloomfilter"}},[t._v("2.11. BloomFilter")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#212-%E6%B0%B4%E5%BA%93%E7%AE%97%E6%B3%95"}},[t._v("2.12. 水库算法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#213-set%E5%92%8Cmap%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6"}},[t._v("2.13. Set和Map的时间复杂度")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#21301-%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%80%A7"}},[t._v("2.13.0.1. 什么是数据的顺序性？")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#214-n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98"}},[t._v("2.14. N皇后问题")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#215-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2"}},[t._v("2.15. 动态规划和记忆化搜索")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#216-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91"}},[t._v("2.16. 哈夫曼树")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#2161-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E6%9E%84%E9%80%A0"}},[t._v("2.16.1. 哈夫曼树的构造")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2162-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9"}},[t._v("2.16.2. 哈夫曼树的特点")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#217-%E5%93%88%E5%B8%8C%E8%A1%A8%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81"}},[t._v("2.17. 哈希表如何解决冲突？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#218-%E5%A0%86%E6%98%AF%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91"}},[t._v("2.18. 堆是完全二叉树")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#2181-%E6%B1%82%E6%9C%80%E5%A4%A7%E7%9A%84k%E4%B8%AA%E6%95%B0"}},[t._v("2.18.1. 求最大的k个数")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#219-js%E5%86%85%E9%83%A8%E7%9A%84settimeout%E6%98%AF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%B4%E6%8A%A4%E7%9A%84"}},[t._v("2.19. JS内部的"),a("code",[t._v("setTimeout")]),t._v("是用什么数据结构维护的？")])])])])]),t._v(" "),a("h2",{attrs:{id:"_1-数据结构与算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构与算法"}},[t._v("#")]),t._v(" 1. 数据结构与算法")]),t._v(" "),a("h3",{attrs:{id:"_1-1-复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-复杂度"}},[t._v("#")]),t._v(" 1.1. 复杂度")]),t._v(" "),a("ul",[a("li",[t._v("像"),a("code",[t._v("O(1)")]),t._v(", "),a("code",[t._v("O(ln(n))")]),t._v(", "),a("code",[t._v("O(n^a)")]),t._v("等，我们把它叫做多项式级复杂度，因为它的规模n出现在底数的位置；")]),t._v(" "),a("li",[t._v("另一种像是"),a("code",[t._v("O(a^n)")]),t._v("和"),a("code",[t._v("O(n!)")]),t._v("等，它是非多项式级的复杂度。")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("O(1)")]),t._v("=常量时间")]),t._v(" "),a("li",[a("code",[t._v("O(n)")]),t._v("=线性时间")]),t._v(" "),a("li",[a("code",[t._v("O(logn)")]),t._v("=对数时间")])]),t._v(" "),a("h4",{attrs:{id:"_1-1-1-log级别的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-log级别的时间复杂度"}},[t._v("#")]),t._v(" 1.1.1. "),a("code",[t._v("log")]),t._v("级别的时间复杂度")]),t._v(" "),a("ul",[a("li",[t._v("算法中"),a("code",[t._v("log")]),t._v("级别的时间复杂度都是由于使用了分治思想，这个底数直接由分治的复杂度决定。")]),t._v(" "),a("li",[t._v("如果采用二分法,那么就会以2为底数，三分法就会以3为底数，其他亦然。")]),t._v(" "),a("li",[t._v("不过无论底数是什么，log级别的渐进意义是一样的。")]),t._v(" "),a("li",[t._v("也就是说该算法的时间复杂度的增长与处理数据多少的增长的关系是一样的。")])]),t._v(" "),a("h4",{attrs:{id:"_1-1-2-时间复杂度按照阶排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-时间复杂度按照阶排序"}},[t._v("#")]),t._v(" 1.1.2. 时间复杂度按照阶排序")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/time_complexity.png",alt:"时间复杂度"}})]),t._v(" "),a("h4",{attrs:{id:"_1-1-3-复杂度分析窍门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-复杂度分析窍门"}},[t._v("#")]),t._v(" 1.1.3. 复杂度分析窍门")]),t._v(" "),a("ol",[a("li",[t._v("若两段算法分别有复杂度"),a("code",[t._v("T1(n) = O(f1(n))")]),t._v(" 和"),a("code",[t._v("T2(n) = O(f2(n))")]),t._v("，则：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("T1(n) + T2(n) = max(O(f1(n)), O(f2(n)))\nT1(n) * T2(n) = O(f1(n) * f2(n))\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("若"),a("code",[t._v("T(n)")]),t._v("是关于 n 的 k 阶多项式，那么"),a("code",[t._v("T(n) = θ(n^k)")])]),t._v(" "),a("li",[t._v("一个"),a("code",[t._v("for")]),t._v("循环的时间复杂度等于循环次数乘以循环体代码的复杂度")]),t._v(" "),a("li",[a("code",[t._v("if-else")]),t._v("结构的复杂度取决于"),a("code",[t._v("if")]),t._v("的条件判断复杂度和两个分支部分的复杂度，总体复杂度"),a("strong",[t._v("取三者中最大")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_1-1-4-渐进时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-4-渐进时间复杂度"}},[t._v("#")]),t._v(" 1.1.4. 渐进时间复杂度")]),t._v(" "),a("p",[t._v("渐进时间复杂度是指**"),a("code",[t._v("n")]),t._v("趋于无穷时的复杂度**。向有序表中任意一个位置插入元素，插入位置之后的元素依次挪动一个位置，假设元素插入的位置坐标为"),a("code",[t._v("k")]),t._v("，则时间复杂度为"),a("code",[t._v("O(k)")]),t._v("，渐进时间复杂度为"),a("code",[t._v("O(n)")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-算法设计要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-算法设计要求"}},[t._v("#")]),t._v(" 1.2. 算法设计要求")]),t._v(" "),a("ol",[a("li",[t._v("正确性")]),t._v(" "),a("li",[t._v("可读性")]),t._v(" "),a("li",[t._v("健壮性")]),t._v(" "),a("li",[t._v("效率与低存储量需求")])]),t._v(" "),a("h3",{attrs:{id:"_1-3-从哪几个方面进行算法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-从哪几个方面进行算法分析"}},[t._v("#")]),t._v(" 1.3. 从哪几个方面进行算法分析")]),t._v(" "),a("ol",[a("li",[t._v("时间复杂度")]),t._v(" "),a("li",[t._v("空间复杂度")]),t._v(" "),a("li",[t._v("稳定性")])]),t._v(" "),a("h3",{attrs:{id:"_1-4-本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-本质"}},[t._v("#")]),t._v(" 1.4. 本质")]),t._v(" "),a("ol",[a("li",[t._v("算法的本质是寻找规律并实现。")]),t._v(" "),a("li",[t._v("如何找出规律？发现输入和输出的关系，寻找突破点")])]),t._v(" "),a("h3",{attrs:{id:"_1-5-数据结构之逻辑结构与物理-存储-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-数据结构之逻辑结构与物理-存储-结构"}},[t._v("#")]),t._v(" 1.5. 数据结构之逻辑结构与物理(存储)结构")]),t._v(" "),a("ol",[a("li",[t._v("逻辑结构：\n逻辑结构分为四种类型："),a("strong",[t._v("集合结构，线性结构，树形结构，图形结构")]),t._v("。")])]),t._v(" "),a("p",[t._v("1.1 集合结构。数据元素同属一个集合，单个数据元素之间"),a("strong",[t._v("没有任何关系")]),t._v("。")]),t._v(" "),a("p",[t._v("1.2 线性结构。类似于线性关系，也就是说，线性结构中的数据元素之间是"),a("strong",[t._v("一对一")]),t._v("的关系。")]),t._v(" "),a("p",[t._v("1.3 树形结构。树形结构中的数据元素之间存在"),a("strong",[t._v("一对多")]),t._v("的关系。（各元素及元素关系所组成图形类似于树状图）。")]),t._v(" "),a("p",[t._v("1.4 图形结构。数据元素之间是"),a("strong",[t._v("多对多")]),t._v("的关系。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("物理结构（存储结构）：\n物理结构又叫存储结构，分为四种，顺序存储结构、链式存储结构、索引结构、散列结构。")])]),t._v(" "),a("p",[t._v("2.1 顺序存储结构。一段连续的内存空间。")]),t._v(" "),a("ul",[a("li",[t._v("优点：随机访问")]),t._v(" "),a("li",[t._v("缺点：插入删除效率低，大小固定")])]),t._v(" "),a("p",[t._v("2.2 链式存储结构。不连续的内存空间。")]),t._v(" "),a("ul",[a("li",[t._v("优点：大小动态扩展，插入删除效率高")]),t._v(" "),a("li",[t._v("缺点：不能随机访问。")])]),t._v(" "),a("p",[t._v("2.3 索引存储结构。为了方便查找，整体无序，但索引块之间有序，需要额外空间，存储索引表。")]),t._v(" "),a("ul",[a("li",[t._v("优点：对顺序查找的一种改进，查找效率高")]),t._v(" "),a("li",[t._v("缺点：需额外空间存储索引")])]),t._v(" "),a("p",[t._v("2.4 散列存储结构。选取某个函数，数据元素根据散列函数计算存储位置可能存在多个数据元素存储在同一位置，引起地址冲突")]),t._v(" "),a("ul",[a("li",[t._v("优点：查找基于数据本身即可找到，查找效率高，存取效率高。")]),t._v(" "),a("li",[t._v("缺点：存取随机，不便于顺序查找。")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-链表与数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-链表与数组"}},[t._v("#")]),t._v(" 1.6. 链表与数组")]),t._v(" "),a("p",[t._v("链表类比：寻宝游戏，朋友们散坐在电影院")]),t._v(" "),a("ul",[a("li",[t._v("链表：读取O(n)、插入O(1)、删除O(1)")]),t._v(" "),a("li",[t._v("数组：读取O(1)、插入O(n)、删除O(n)")])]),t._v(" "),a("p",[t._v("对比：")]),t._v(" "),a("ol",[a("li",[t._v("链表擅长"),a("strong",[t._v("插入和删除")])]),t._v(" "),a("li",[t._v("数组擅长随机访问（数组擅长读取）。")])]),t._v(" "),a("p",[t._v("解释：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数组查询元素：知道第一个按顺序遍历就行")])]),t._v(" "),a("li",[a("p",[t._v("数组增加元素：如果需要给index为10的位置添加，则从index为11的位置开始右移")])]),t._v(" "),a("li",[a("p",[t._v("数组删除元素：如果需要删除index为10的位置，则从index为11的位置开始左移")])])]),t._v(" "),a("p",[t._v("链表：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("链表查找：当同时读取所有元素时，链表的效率很高，读第一个，读第二个，以此类推。")])]),t._v(" "),a("li",[a("p",[t._v("但当你需要跳跃，链表的效率就很低了，每次都必须从第一个开始查找")])]),t._v(" "),a("li",[a("p",[t._v("链表增加元素：只需要修改它前面的那个元素指向的地址就可以了")])]),t._v(" "),a("li",[a("p",[t._v("链表删除元素：只需要将前一个元素指向的地址更改即可")])])]),t._v(" "),a("p",[t._v("链表分类：\n链表有"),a("strong",[t._v("单链表")]),t._v("、"),a("strong",[t._v("双链表")]),t._v("（后一个元素也可以指向前一个元素）、"),a("strong",[t._v("循环双端链表")]),t._v("（首尾连接起来）")]),t._v(" "),a("h3",{attrs:{id:"_1-7-线性表的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-线性表的存储结构"}},[t._v("#")]),t._v(" 1.7. 线性表的存储结构")]),t._v(" "),a("p",[t._v("可分为顺序存储结构和链式存储结构。")]),t._v(" "),a("ol",[a("li",[t._v("顺序存储定义：把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构。")]),t._v(" "),a("li",[t._v("链式存储结构: 其结点在存储器中的位置是随意的，即逻辑上相邻的数据元素在物理上不一定相邻。通过指针来实现")])]),t._v(" "),a("p",[t._v("区别：")]),t._v(" "),a("ol",[a("li",[t._v("顺序存储时，逻辑上相邻的数据元素，其物理存放地址也相邻。顺序存储的优点是存储密度大，存储空间利用率高；缺点是插入或删除元素时不方便。")]),t._v(" "),a("li",[t._v("链式存储时，相邻数据元素可随意存放，但所占存储空间分两部分，一部分存放结点值，另一部分存放表示"),a("strong",[t._v("结点间关系的指针")]),t._v("。链式存储的优点是插入或删除元素时很方便，使用灵活。缺点是"),a("strong",[t._v("存储密度小，存储空间利用率低")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"_1-8-树的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-树的分类"}},[t._v("#")]),t._v(" 1.8. 树的分类")]),t._v(" "),a("p",[t._v("斜二叉树、完全二叉树、满二叉树")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/tree_types.png",alt:"树的分类"}})]),t._v(" "),a("h3",{attrs:{id:"_1-9-二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-二叉搜索树"}},[t._v("#")]),t._v(" 1.9. 二叉搜索树")]),t._v(" "),a("p",[t._v("二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：")]),t._v(" "),a("ol",[a("li",[t._v("若其左子树存在，则其左子树中每个节点的值都不大于该节点值；")]),t._v(" "),a("li",[t._v("若其右子树存在，则其右子树中每个节点的值都不小于该节点值。")])]),t._v(" "),a("p",[t._v("特点")]),t._v(" "),a("ol",[a("li",[t._v("二分搜索树不一定是完全二叉树")]),t._v(" "),a("li",[t._v("二分搜索树的最大元素节点，一定没有右儿子，不一定是叶子节点。")]),t._v(" "),a("li",[t._v("二分搜索树的最小值，是从根节点一直找左孩子，直到再没有左孩子，就是最小值。其最大值，就是从根节点一直找右孩子，直到再没有右孩子，就是最大值。")]),t._v(" "),a("li",[t._v("若二分搜索树是完全二叉树，则其最小值一定是叶节点，最大值却不一定是叶节点。")])]),t._v(" "),a("h4",{attrs:{id:"_1-9-1-二分搜索树删除元素过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-1-二分搜索树删除元素过程"}},[t._v("#")]),t._v(" 1.9.1. 二分搜索树删除元素过程")]),t._v(" "),a("ol",[a("li",[t._v("删除最小值时，如果它有右孩子，就把它的右孩子代替它的位置。")]),t._v(" "),a("li",[t._v("删除最大值时，如果它有左孩子，就把它的左孩子代替它的位置。")]),t._v(" "),a("li",[t._v("如果它左右孩子都有，就找到删除节点的后继节点，即它的右子树上的最小值，代替它。（"),a("code",[t._v("harborddeletion")]),t._v("）")])]),t._v(" "),a("p",[t._v("如果插入的时候是有序的，那就像快排一样，退化，成了链表。\n一个解决方法是提前打乱，但是元素是动态加入的，不能事先知道全部的数组。\n另一个解决方法是平衡二叉树。")]),t._v(" "),a("h3",{attrs:{id:"_1-10-平衡二叉树定义-avl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-平衡二叉树定义-avl"}},[t._v("#")]),t._v(" 1.10. 平衡二叉树定义("),a("code",[t._v("AVL")]),t._v(")：")]),t._v(" "),a("p",[t._v("它或者是一颗空树，或者具有以下性质的二叉排序树：\n它的左子树和右子树的深度之差（"),a("strong",[t._v("平衡因子")]),t._v("）的绝对值不超过1，且它的左子树和右子树都是一颗平衡二叉树。")]),t._v(" "),a("p",[t._v("一棵AVL树有如下必要条件：")]),t._v(" "),a("ol",[a("li",[t._v("它必须是二叉查找树。")]),t._v(" "),a("li",[t._v("每个节点的左子树和右子树的高度差至多为1。")])]),t._v(" "),a("h3",{attrs:{id:"_1-11-trie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-trie"}},[t._v("#")]),t._v(" 1.11. Trie")]),t._v(" "),a("p",[t._v("Trie 是一种字典，查找效率比二分搜索树的"),a("code",[t._v("logN")]),t._v("还快，因为它只与被查找元素出现的个数有关。比如单词，一个个串起来。")]),t._v(" "),a("p",[a("code",[t._v("Trie")]),t._v("，又称前缀树或"),a("strong",[t._v("字典树")]),t._v("，是一种有序树，用于保存关联数组，其中的键通常是字符串。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ol",[a("li",[t._v("与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。")]),t._v(" "),a("li",[t._v("一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。")]),t._v(" "),a("li",[t._v("一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。")])]),t._v(" "),a("p",[t._v("应用：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Trie")]),t._v(" 的典型应用是用于"),a("strong",[t._v("统计、排序和保存大量的字符串")]),t._v("（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。")]),t._v(" "),a("li",[t._v("它的优点是："),a("strong",[t._v("利用字符串的公共前缀来减少查询时间")]),t._v("，最大限度地减少无谓的字符串比较，查询效率比哈希树高。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/trie_structure.png",alt:"trie"}})]),t._v(" "),a("h3",{attrs:{id:"_1-12-前序、中序、后序遍历的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-前序、中序、后序遍历的特性"}},[t._v("#")]),t._v(" 1.12. 前序、中序、后序遍历的特性")]),t._v(" "),a("p",[t._v("前序遍历：")]),t._v(" "),a("ol",[a("li",[t._v("访问根节点")]),t._v(" "),a("li",[t._v("前序遍历左子树")]),t._v(" "),a("li",[t._v("前序遍历右子树")])]),t._v(" "),a("p",[t._v("中序遍历：")]),t._v(" "),a("ol",[a("li",[t._v("中序遍历左子树")]),t._v(" "),a("li",[t._v("访问根节点")]),t._v(" "),a("li",[t._v("中序遍历右子树")])]),t._v(" "),a("p",[t._v("后序遍历：")]),t._v(" "),a("ol",[a("li",[t._v("后序遍历左子树")]),t._v(" "),a("li",[t._v("后序遍历右子树")]),t._v(" "),a("li",[t._v("访问根节点")])]),t._v(" "),a("h3",{attrs:{id:"_1-13-已知前序、中序遍历-求后序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-已知前序、中序遍历-求后序遍历"}},[t._v("#")]),t._v(" 1.13. 已知前序、中序遍历，求后序遍历")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("前序遍历: GDAFEMHZ\n中序遍历: ADEFGHMZ\n")])])]),a("p",[t._v("画树求法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("第一步，根据前序遍历的特点，我们知道根结点为"),a("code",[t._v("G")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("第二步，观察中序遍历"),a("code",[t._v("ADEFGHMZ")]),t._v("。其中"),a("code",[t._v("root")]),t._v("节点"),a("code",[t._v("G")]),t._v("左侧的"),a("code",[t._v("ADEF")]),t._v("必然是"),a("code",[t._v("root")]),t._v("的左子树，"),a("code",[t._v("G")]),t._v("右侧的"),a("code",[t._v("HMZ")]),t._v("必然是"),a("code",[t._v("root")]),t._v("的右子树。")])]),t._v(" "),a("li",[a("p",[t._v("第三步，观察左子树"),a("code",[t._v("ADEF")]),t._v("，左子树的中的根节点必然是大树的"),a("code",[t._v("root")]),t._v("的"),a("code",[t._v("leftchild")]),t._v("。在前序遍历中，大树的"),a("code",[t._v("root")]),t._v("的"),a("code",[t._v("leftchild")]),t._v("位于"),a("code",[t._v("root")]),t._v("之后，所以左子树的根节点为"),a("code",[t._v("D")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("第四步，同样的道理，"),a("code",[t._v("root")]),t._v("的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把"),a("code",[t._v("root")]),t._v("和"),a("code",[t._v("root")]),t._v("的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。")])]),t._v(" "),a("li",[a("p",[t._v("第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 确定根,确定左子树，确定右子树。\n2. 在左子树中递归。\n3. 在右子树中递归。\n4. 打印当前根。\n")])])]),a("p",[t._v("那么，我们可以画出这个二叉树的形状：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/binary_tree_order_question.png",alt:"二叉树"}})]),t._v(" "),a("p",[t._v("那么，根据后序的遍历规则，我们可以知道，后序遍历顺序为："),a("code",[t._v("AEFDHZMG")])]),t._v(" "),a("h3",{attrs:{id:"_1-14-已知中序和后序遍历-求前序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-已知中序和后序遍历-求前序遍历"}},[t._v("#")]),t._v(" 1.14. 已知中序和后序遍历，求前序遍历")]),t._v(" "),a("p",[t._v("依然是上面的题，这次我们只给出中序和后序遍历：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("中序遍历: ADEFGHMZ\n后序遍历: AEFDHZMG\n")])])]),a("p",[t._v("画树求法：")]),t._v(" "),a("ol",[a("li",[t._v("第一步，根据后序遍历的特点，我们知道后序遍历最后一个结点即为根结点，即根结点为"),a("code",[t._v("G")]),t._v("。")]),t._v(" "),a("li",[t._v("第二步，观察中序遍历"),a("code",[t._v("ADEFGHMZ")]),t._v("。其中"),a("code",[t._v("root")]),t._v("节点"),a("code",[t._v("G")]),t._v("左侧的"),a("code",[t._v("ADEF")]),t._v("必然是"),a("code",[t._v("root")]),t._v("的左子树，"),a("code",[t._v("G")]),t._v("右侧的"),a("code",[t._v("HMZ")]),t._v("必然是"),a("code",[t._v("root")]),t._v("的右子树。")]),t._v(" "),a("li",[t._v("第三步，观察左子树"),a("code",[t._v("ADEF")]),t._v("，后序遍历中，左子树"),a("code",[t._v("AEFD")]),t._v("的最后一个为左子树的"),a("code",[t._v("root")]),t._v("，也就是"),a("code",[t._v("D")]),t._v("为左子树的中的根节点。由中序遍历得，"),a("code",[t._v("A")]),t._v("为"),a("code",[t._v("D")]),t._v("的左子树，"),a("code",[t._v("EF")]),t._v("为"),a("code",[t._v("D")]),t._v("的右子树。观察后序遍历，"),a("code",[t._v("EF")]),t._v("中最后的一个"),a("code",[t._v("F")]),t._v("为其"),a("code",[t._v("root")]),t._v("。可以知道，"),a("code",[t._v("E")]),t._v("为"),a("code",[t._v("F")]),t._v("的左子树。")]),t._v(" "),a("li",[t._v("第四步，同样的道理，"),a("code",[t._v("root")]),t._v("的右子树节点"),a("code",[t._v("HMZ")]),t._v("中的根节点也可以通过后序遍历求得。在后序遍历中，"),a("code",[t._v("HZM")]),t._v("最后一个"),a("code",[t._v("M")]),t._v("一定是右子树的根节点。")]),t._v(" "),a("li",[t._v("第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。")])]),t._v(" "),a("p",[t._v("该步递归的过程可以简洁表达如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 确定根,确定左子树，确定右子树。\n2. 在左子树中递归。\n3. 在右子树中递归。\n4. 打印当前根。\n")])])]),a("p",[t._v("这样，我们就可以画出二叉树的形状，如上图所示，这里就不再赘述。\n那么，前序遍历: "),a("code",[t._v("GDAFEMHZ")])]),t._v(" "),a("h3",{attrs:{id:"_1-15-如果一个二叉树-其中序遍历结果与前序遍历结果一样-那么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-如果一个二叉树-其中序遍历结果与前序遍历结果一样-那么"}},[t._v("#")]),t._v(" 1.15. 如果一个二叉树，其中序遍历结果与前序遍历结果一样，那么")]),t._v(" "),a("p",[t._v("所有的结点都没有左儿子。")]),t._v(" "),a("h3",{attrs:{id:"_1-16-什么是后继节点和前驱节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-什么是后继节点和前驱节点"}},[t._v("#")]),t._v(" 1.16. 什么是后继节点和前驱节点")]),t._v(" "),a("ol",[a("li",[t._v("后继节点：一个节点在"),a("strong",[t._v("中序")]),t._v("遍历中的下一个节点")]),t._v(" "),a("li",[t._v("前驱节点：一个节点在中序遍历中的上一个节点")])]),t._v(" "),a("h3",{attrs:{id:"_1-17-二叉树的重要性质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-二叉树的重要性质"}},[t._v("#")]),t._v(" 1.17. 二叉树的重要性质")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("n个节点的二叉树一共有"),a("code",[t._v("((2n)!)/(n!*(n+1)!)")]),t._v("种")])]),t._v(" "),a("li",[a("p",[t._v("一个二叉树第"),a("code",[t._v("i")]),t._v("层的最大节点数为"),a("code",[t._v("2^(i-1)")]),t._v("个")])]),t._v(" "),a("li",[a("p",[t._v("二叉树节点计算公式"),a("code",[t._v("N=n0+n1+n2")]),t._v("，度为"),a("code",[t._v("0")]),t._v("的叶子节点比度为"),a("code",[t._v("2")]),t._v("的节点数多一个，即"),a("code",[t._v("N=1*n1+2*n2+1")])])]),t._v(" "),a("li",[a("p",[t._v("对任何一棵二叉树T，如果其终端节点数为"),a("code",[t._v("n0")]),t._v("，度为"),a("code",[t._v("2")]),t._v("的节点数为"),a("code",[t._v("n2")]),t._v("，则"),a("code",[t._v("n0=n2＋1")])])]),t._v(" "),a("li",[a("p",[t._v("高度为"),a("code",[t._v("K")]),t._v("的二叉树中，最多有"),a("code",[t._v("2^k-1")]),t._v("个结点。")])]),t._v(" "),a("li",[a("p",[t._v("具有"),a("code",[t._v("n")]),t._v("个节点的完全二叉树的深度为"),a("code",[t._v("[log2n]+1")]),t._v("，向下取整")])]),t._v(" "),a("li",[a("p",[t._v("如果有一颗有"),a("code",[t._v("n")]),t._v("个节点的完全二叉树的节点按层次序编号，对任一层的节点"),a("code",[t._v("i")]),t._v("\n(1) 如果"),a("code",[t._v("i=1")]),t._v("，则节点是二叉树的根，无双亲，如果"),a("code",[t._v("i>1")]),t._v("，则其双亲节点为"),a("code",[t._v("[i/2]")]),t._v("，向下取整\n(2) 如果"),a("code",[t._v("2i>n")]),t._v("那么节点i没有左孩子，否则其左孩子为"),a("code",[t._v("2i")]),t._v("\n(3) 如果"),a("code",[t._v("2i+1>n")]),t._v("那么节点没有右孩子，否则右孩子为"),a("code",[t._v("2i+1")])])]),t._v(" "),a("li",[a("p",[t._v("设一棵完全二叉树共有699个节点，则在该二叉树中的叶节点数是什么？")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("n=n0 + n1 + n2\nn0=n2 + 1\nn=699，奇数，说明 n1 为 0；\nn=n0 + n0 - 1\nn0 = 350，所以叶节点数为350\n")])])]),a("h3",{attrs:{id:"_1-18-图论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-图论"}},[t._v("#")]),t._v(" 1.18. 图论")]),t._v(" "),a("p",[t._v("并查集可以解决是否连接，图论才可以解决路径问题")]),t._v(" "),a("h4",{attrs:{id:"_1-18-1-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-1-分类"}},[t._v("#")]),t._v(" 1.18.1. 分类")]),t._v(" "),a("ul",[a("li",[t._v("有向图（微博的关注）、无向图（qq好友）；\n"),a("ul",[a("li",[t._v("无向图是一种特殊的有向图")])])]),t._v(" "),a("li",[t._v("无权图（人与人是否认识）、有权图（交通运输图）")])]),t._v(" "),a("p",[t._v("无向图（"),a("code",[t._v("undirected graph")]),t._v("）没有箭头，直接相连的节点互为邻居。例如，下面两个图是等价的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/undirected_graph.png",alt:"无向图"}})]),t._v(" "),a("h3",{attrs:{id:"_1-19-广度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-19-广度优先搜索"}},[t._v("#")]),t._v(" 1.19. 广度优先搜索")]),t._v(" "),a("ul",[a("li",[t._v("如果你在你的整个人际关系网中搜索芒果销售商，就意味着你将沿每条边前行（记住，边是从一个人到另一个人的箭头或连接），因此运行时间至少为"),a("code",[t._v("O(边数)")]),t._v("。")]),t._v(" "),a("li",[t._v("你还使用了一个队列，其中包含要检查的每个人。将一个人添加到队列需要的时间是固定的，即为"),a("code",[t._v("O(1)")]),t._v("，因此对每个人都这样做需要的总时间为"),a("code",[t._v("O(人数)")]),t._v("。")]),t._v(" "),a("li",[t._v("所以，广度优先搜索的运行时间为"),a("code",[t._v("O(人数+边数)")]),t._v("，这通常写作"),a("code",[t._v("O(V+E)")]),t._v("，其中"),a("code",[t._v("V")]),t._v("为顶点（"),a("code",[t._v("vertice")]),t._v("）数，"),a("code",[t._v("E")]),t._v("为边数。")])]),t._v(" "),a("h3",{attrs:{id:"_1-20-图的连通性-连通分量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-20-图的连通性-连通分量"}},[t._v("#")]),t._v(" 1.20. 图的连通性，连通分量")]),t._v(" "),a("ul",[a("li",[t._v("一张图中可能并非所有节点都互相连接，其中每一部分就是一个连通分量。")]),t._v(" "),a("li",[t._v("就像上等社会、中产阶段、底层社会")])]),t._v(" "),a("h3",{attrs:{id:"_1-21-连通图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-21-连通图"}},[t._v("#")]),t._v(" 1.21. 连通图")]),t._v(" "),a("ul",[a("li",[t._v("如果图中任意两点都是连通的，那么图被称作连通图。")]),t._v(" "),a("li",[t._v("如果此图是有向图，则称为"),a("strong",[t._v("强连通图")]),t._v("（注意：需要双向都有路径）")])]),t._v(" "),a("h3",{attrs:{id:"_1-22-生成树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-22-生成树"}},[t._v("#")]),t._v(" 1.22. 生成树")]),t._v(" "),a("p",[t._v("对连通图进行遍历，过程中所经过的边和顶点的组合可看做是一棵普通树，通常称为生成树。")]),t._v(" "),a("p",[t._v("连通图中，由于任意两顶点之间可能含有多条通路，遍历连通图的方式有多种，往往一张连通图可能有多种不同的生成树与之对应。")]),t._v(" "),a("p",[t._v("连通图中的生成树必须满足以下2个条件：")]),t._v(" "),a("ol",[a("li",[t._v("包含连通图中所有的顶点；")]),t._v(" "),a("li",[t._v("任意两顶点之间有且仅有一条通路；")])]),t._v(" "),a("h4",{attrs:{id:"_1-22-1-生成森林"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-22-1-生成森林"}},[t._v("#")]),t._v(" 1.22.1. 生成森林")]),t._v(" "),a("p",[t._v("多个连通分量对应的多棵生成树就构成了整个非连通图的生成森林")]),t._v(" "),a("h3",{attrs:{id:"_1-23-邻接点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-23-邻接点"}},[t._v("#")]),t._v(" 1.23. 邻接点")]),t._v(" "),a("p",[t._v("假若顶点"),a("code",[t._v("v")]),t._v("和顶点"),a("code",[t._v("w")]),t._v("之间存在一条边，则称顶点"),a("code",[t._v("v")]),t._v("和"),a("code",[t._v("w")]),t._v("互为邻接点。")]),t._v(" "),a("h3",{attrs:{id:"_1-24-简单图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-24-简单图"}},[t._v("#")]),t._v(" 1.24. 简单图")]),t._v(" "),a("p",[t._v("没有自环边（指向自己）或者平行边（A到B有多个边）")]),t._v(" "),a("h3",{attrs:{id:"_1-25-图的表示方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-25-图的表示方法"}},[t._v("#")]),t._v(" 1.25. 图的表示方法")]),t._v(" "),a("p",[t._v("有邻接矩阵和邻接表：")]),t._v(" "),a("ul",[a("li",[t._v("邻接表是表示相连的两个顶点，适合表示稀疏图")]),t._v(" "),a("li",[t._v("邻接矩阵适合表示稠密图")])]),t._v(" "),a("h3",{attrs:{id:"_1-26-完全图-典型的稠密图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-26-完全图-典型的稠密图"}},[t._v("#")]),t._v(" 1.26. 完全图（典型的稠密图）")]),t._v(" "),a("p",[t._v("图的每个点都和其他所有点都相连，如相似电影推荐")]),t._v(" "),a("h3",{attrs:{id:"_1-27-邻接表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-27-邻接表"}},[t._v("#")]),t._v(" 1.27. 邻接表")]),t._v(" "),a("p",[t._v("邻接表的缺点是增加边的时候，在判断原来是否已经存在这条边的时候，需要遍历数组，也就是"),a("code",[t._v("O(n)")]),t._v("，而邻接矩阵只需要返回"),a("code",[t._v("g[v][w]")]),t._v("，它是"),a("code",[t._v("O(1)")]),t._v("的。")]),t._v(" "),a("p",[t._v("邻接表的性质，存在多少个结点，就有多少个头结点的数组，每个头结点的数组都指向该结点在图中直接相连的结点。\n邻接表的形式：\n"),a("img",{attrs:{src:"/imgs/adjacency_list.png",alt:"邻接表"}})]),t._v(" "),a("h3",{attrs:{id:"_1-28-邻接矩阵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-28-邻接矩阵"}},[t._v("#")]),t._v(" 1.28. 邻接矩阵")]),t._v(" "),a("p",[t._v("邻接矩阵存储结构就每个顶点用一个一维数组存储边的信息，这样所有点合起来就是用矩阵表示图中各顶点之间的邻接关系。所谓矩阵其实就是二维数组。")]),t._v(" "),a("p",[t._v("对于有 n个顶点的图 "),a("code",[t._v("G=(V,E)")]),t._v(" 来说，我们可以用一个 "),a("code",[t._v("n×n")]),t._v(" 的矩阵 A来表示 G 中各顶点的相邻关系，如果 "),a("code",[t._v("vi")]),t._v("和 "),a("code",[t._v("vj​")]),t._v(" 之间存在边（或弧），则 "),a("code",[t._v("A[i][j]=1")]),t._v("，否则 "),a("code",[t._v("A[i][j]=0")]),t._v("。下图为有向图 G 对应的邻接矩阵：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/adjacency_matrix.png",alt:"邻接矩阵"}}),t._v(" "),a("img",{attrs:{src:"/imgs/adjacency_matrix2.png",alt:"邻接矩阵"}})]),t._v(" "),a("p",[t._v("遍历邻边-图算法中最常见的操作")]),t._v(" "),a("ul",[a("li",[t._v("邻接矩阵"),a("code",[t._v("O(n)")])]),t._v(" "),a("li",[t._v("邻接表不需要遍历"),a("code",[t._v("O(E)")])])]),t._v(" "),a("p",[t._v("图的深度优先遍历-复杂度")]),t._v(" "),a("ul",[a("li",[t._v("稀疏图（邻接表）："),a("code",[t._v("O(V+E)")]),t._v("（"),a("code",[t._v("E")]),t._v("比"),a("code",[t._v("V")]),t._v("大，所以也是"),a("code",[t._v("O(E)")]),t._v("）")]),t._v(" "),a("li",[t._v("稠密图（邻接矩阵）："),a("code",[t._v("O(V^2)")])])]),t._v(" "),a("h3",{attrs:{id:"_1-29-最小生成树minimum-span-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-29-最小生成树minimum-span-tree"}},[t._v("#")]),t._v(" 1.29. 最小生成树"),a("code",[t._v("Minimum Span Tree")])]),t._v(" "),a("ol",[a("li",[t._v("找"),a("code",[t._v("V-1")]),t._v("条边，连接"),a("code",[t._v("V")]),t._v("和顶点，使总权值最小")]),t._v(" "),a("li",[t._v("用途比如电缆布线、网络连接、电路设计")]),t._v(" "),a("li",[t._v("针对带权无向图")]),t._v(" "),a("li",[t._v("针对连通图")])]),t._v(" "),a("p",[t._v("Prim算法：将顶点归并，与边数无关，适于稠密网")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/tree_prime.png",alt:"Prim算法"}})]),t._v(" "),a("p",[t._v("Kruskal算法：将边合并，适合稀疏网")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/tree_kruskal.png",alt:"Kruskal算法"}})]),t._v(" "),a("ul",[a("li",[t._v("Prim 当前正在考虑的所有的横切边中最短的那个")]),t._v(" "),a("li",[t._v("Kruskal 每次取所有边中的最短边，但是不能构成环")])]),t._v(" "),a("p",[t._v("时间复杂度")]),t._v(" "),a("ul",[a("li",[t._v("LazyPrim："),a("code",[t._v("O(ElogE)")]),t._v("不把已经遍历过的边拿出去")]),t._v(" "),a("li",[t._v("Prim："),a("code",[t._v("O(ElogV)")])]),t._v(" "),a("li",[t._v("Kruska："),a("code",[t._v("O(ElogE)")])])]),t._v(" "),a("h3",{attrs:{id:"_1-30-切分定理cut-property"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-30-切分定理cut-property"}},[t._v("#")]),t._v(" 1.30. 切分定理Cut Property")]),t._v(" "),a("ol",[a("li",[t._v("把图中的结点分为两部分，成为一个切分（"),a("code",[t._v("Cut")]),t._v("）。")]),t._v(" "),a("li",[t._v("如果一个边的两个端点，属于切分（"),a("code",[t._v("Cut")]),t._v("）不同的两边，这个边称为横切边（"),a("code",[t._v("CrossingEdge")]),t._v("）。")]),t._v(" "),a("li",[t._v("切分定理：给定任意切分，横切边中权值最小的边必然属于最小生成树。")])]),t._v(" "),a("p",[t._v("绿色的边是横切边：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/cut_property.png",alt:"切分定理"}})]),t._v(" "),a("h3",{attrs:{id:"_1-31-最短路径问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-31-最短路径问题"}},[t._v("#")]),t._v(" 1.31. 最短路径问题")]),t._v(" "),a("p",[t._v("图的广度优先遍历，就是找到了最短路径树，也是单源最短路径（同一个起始点）")]),t._v(" "),a("h3",{attrs:{id:"_1-32-狄克斯特拉算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-32-狄克斯特拉算法"}},[t._v("#")]),t._v(" 1.32. 狄克斯特拉算法")]),t._v(" "),a("p",[t._v("找出加权图中前往X的最短路径")]),t._v(" "),a("ul",[a("li",[t._v("前提：图中不能有负权边")]),t._v(" "),a("li",[t._v("只适用于有向无环图（"),a("code",[t._v("directed acyclic graph")]),t._v("，DAG）")]),t._v(" "),a("li",[t._v("在无向图中，"),a("strong",[t._v("每条边都可以看作一个环")]),t._v("。")]),t._v(" "),a("li",[t._v("复杂度"),a("code",[t._v("O(ElogV)")])])]),t._v(" "),a("p",[t._v("松弛操作：通过一个新点，看看经过它到达所有点的最短路径")]),t._v(" "),a("p",[t._v("不能有负权边，举例：从 0 到 2 再到 1 再到 2，比 0 直接到 2 等短。")]),t._v(" "),a("ul",[a("li",[t._v("有负权环的话，就不存在最短路径了，因为可以一直转下去，直到负无穷。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/dijkstra_minus_border.png",alt:"狄克斯特拉算法"}})]),t._v(" "),a("p",[t._v("狄克斯特拉算法包含4个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("找出"),a("strong",[t._v("最便宜的节点")]),t._v("，即可在最短时间内前往的节点。")]),t._v(" "),a("li",[t._v("对于"),a("strong",[t._v("该节点的邻居，检查是否有前往它们的更短路径")]),t._v("，如果有，就更新其开销。")]),t._v(" "),a("li",[t._v("重复这个过程，直到对图中的每个节点都这样做。")]),t._v(" "),a("li",[t._v("计算最终路径。")])]),t._v(" "),a("p",[a("code",[t._v("dijkstra")]),t._v("算法中"),a("code",[t._v("dist")]),t._v("应该如何初始化？\n正无穷（不能为负无穷或-1，因为"),a("code",[t._v("dijkstra")]),t._v("算法不能用于负权边）")]),t._v(" "),a("ul",[a("li",[t._v("要计算非加权图中的最短路径，可使用广度优先搜索。")]),t._v(" "),a("li",[t._v("要计算加权图中的最短路径，可使用狄克斯特拉算法。")])]),t._v(" "),a("h3",{attrs:{id:"_1-33-bellman-ford算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-33-bellman-ford算法"}},[t._v("#")]),t._v(" 1.33. "),a("code",[t._v("Bellman-Ford")]),t._v("算法")]),t._v(" "),a("ul",[a("li",[t._v("前提：图中不能有负权环")]),t._v(" "),a("li",[a("code",[t._v("Bellman-Ford")]),t._v("可以判断图中是否有负权环")]),t._v(" "),a("li",[t._v("复杂度"),a("code",[t._v("O(EV)")])])]),t._v(" "),a("p",[t._v("如果一个图中没有负权环，从一点到另外一点的最短路径，最多经过所有的"),a("code",[t._v("V")]),t._v("个顶点，有"),a("code",[t._v("V-1")]),t._v("条边，否则，存在顶点经过了两次，即存在负权环。")]),t._v(" "),a("p",[t._v("过程：")]),t._v(" "),a("ol",[a("li",[t._v("对一个点的一次松弛操作，就是找到经过这个点的另外一条路径，多一条边，权值更小。")]),t._v(" "),a("li",[t._v("如果一个图中没有负权环，从一点到另外一点的最短路径，最多经过所有的"),a("code",[t._v("V")]),t._v("个顶点，有"),a("code",[t._v("V-1")]),t._v("条边")]),t._v(" "),a("li",[t._v("对所有的点进行"),a("code",[t._v("V-1")]),t._v("次松弛操作，理论上就找到了从源点到其他所有点的最短路径。")]),t._v(" "),a("li",[t._v("如果还可以继续松弛，说明原图中有负权环。")])]),t._v(" "),a("p",[t._v("有负权边的一般是有向的，否则从"),a("code",[t._v("A")]),t._v("到"),a("code",[t._v("B")]),t._v("再从"),a("code",[t._v("B")]),t._v("到"),a("code",[t._v("A")]),t._v("就形成负权环了")]),t._v(" "),a("p",[t._v("单源最短路径算法对比：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("算法")]),t._v(" "),a("th",[t._v("有无环")]),t._v(" "),a("th",[t._v("有无向")]),t._v(" "),a("th",[t._v("时间复杂度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("dijkstra")])]),t._v(" "),a("td",[t._v("无负权环")]),t._v(" "),a("td",[t._v("有向无向图均可")]),t._v(" "),a("td",[a("code",[t._v("O(ElogV)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Bellman-Ford")])]),t._v(" "),a("td",[t._v("无负权环")]),t._v(" "),a("td",[t._v("有向图")]),t._v(" "),a("td",[a("code",[t._v("O(VE)")])])]),t._v(" "),a("tr",[a("td",[t._v("拓扑排序")]),t._v(" "),a("td",[t._v("有向无环图，"),a("code",[t._v("DAG")])]),t._v(" "),a("td",[t._v("有向图")]),t._v(" "),a("td",[a("code",[t._v("O(V + E)")])])])])]),t._v(" "),a("p",[a("code",[t._v("Floyed")]),t._v("算法")]),t._v(" "),a("ol",[a("li",[t._v("处理无负权环的图")]),t._v(" "),a("li",[t._v("时间复杂度："),a("code",[t._v("O(V^3)")])])]),t._v(" "),a("h3",{attrs:{id:"_1-34-拓扑排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-34-拓扑排序"}},[t._v("#")]),t._v(" 1.34. 拓扑排序")]),t._v(" "),a("p",[t._v("在一个有向图中，对所有的节点进行排序，要求没有一个节点指向它前面的节点。")]),t._v(" "),a("ol",[a("li",[t._v("先统计所有节点的入度，对于入度为0的节点就可以分离出来，然后把这个节点指向的节点的入度减一。")]),t._v(" "),a("li",[t._v("一直做改操作，直到所有的节点都被分离出来。")]),t._v(" "),a("li",[t._v("如果最后不存在入度为0的节点，那就说明有环，不存在拓扑排序，也就是很多题目的无解的情况。")])]),t._v(" "),a("p",[t._v("下面是算法的演示过程：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/topological_sorting.png",alt:"拓扑排序"}})]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("拓扑排序就是为了判断有向图是不是有环的。")]),t._v(" "),a("li",[t._v("有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说。")])]),t._v(" "),a("p",[t._v("拓扑排序（"),a("code",[t._v("Topological Sorting")]),t._v("）是一个有向无环图（DAG, "),a("code",[t._v("Directed Acyclic Graph")]),t._v("）的所有顶点的线性序列。且该序列必须满足下面两个条件：")]),t._v(" "),a("ol",[a("li",[t._v("每个顶点出现且只出现一次。")]),t._v(" "),a("li",[t._v("若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面（没有一个节点指向它前面的节点）。")])]),t._v(" "),a("h4",{attrs:{id:"_1-34-1-判断是否有环方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-34-1-判断是否有环方法"}},[t._v("#")]),t._v(" 1.34.1. 判断是否有环方法：")]),t._v(" "),a("ol",[a("li",[t._v("拓扑排序")]),t._v(" "),a("li",[t._v("深度优先遍历")]),t._v(" "),a("li",[t._v("广度优先遍历")])]),t._v(" "),a("h3",{attrs:{id:"_1-35-树和图的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-35-树和图的关系"}},[t._v("#")]),t._v(" 1.35. 树和图的关系")]),t._v(" "),a("p",[t._v("树是一种特殊的图，其中没有往后指的边。")]),t._v(" "),a("h3",{attrs:{id:"_1-36-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-36-堆"}},[t._v("#")]),t._v(" 1.36. 堆")]),t._v(" "),a("p",[t._v("堆分为两种：最大堆和最小堆，两者的差别在于节点的排序方式。")]),t._v(" "),a("ol",[a("li",[t._v("在最大堆中，父节点的值比每一个子节点的值都要大。")]),t._v(" "),a("li",[t._v("在最小堆中，父节点的值比每一个子节点的值都要小。")])]),t._v(" "),a("p",[t._v("这就是所谓的“堆属性”，并且这个属性对堆中的每一个节点都成立。")]),t._v(" "),a("h3",{attrs:{id:"_1-37-堆和搜索二叉树的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-37-堆和搜索二叉树的区别"}},[t._v("#")]),t._v(" 1.37. 堆和搜索二叉树的区别")]),t._v(" "),a("ul",[a("li",[t._v("堆必须是完全二叉树")]),t._v(" "),a("li",[t._v("堆中任一结点的值是其子树所有结点的最大值或最小值（最大堆、最小堆）")]),t._v(" "),a("li",[t._v("搜索二叉树：每棵子树头结点比左子树上所有节点大，比右子树上所有节点小")])]),t._v(" "),a("h3",{attrs:{id:"_1-38-散列表-hashtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-38-散列表-hashtable"}},[t._v("#")]),t._v(" 1.38. 散列表（"),a("code",[t._v("hashtable")]),t._v("）")]),t._v(" "),a("p",[t._v("散列函数很重要。前面的散列函数将所有的键都映射到一个位置，而最理想的情况是，散列函数将键均匀地映射到散列表的不同位置。\n如果散列表存储的链表很长，散列表的速度将急剧下降。然而，如果使用的散列函数很好，这些链表就不会很长！")]),t._v(" "),a("p",[t._v("散列表的性能：")]),t._v(" "),a("ol",[a("li",[t._v("平均情况：查找"),a("code",[t._v("O(1)")]),t._v("、插入"),a("code",[t._v("O(1)")]),t._v("、删除"),a("code",[t._v("O(1)")])]),t._v(" "),a("li",[t._v("最差情况：查找"),a("code",[t._v("O(n)")]),t._v("、插入"),a("code",[t._v("O(n)")]),t._v("、删除"),a("code",[t._v("O(n)")])])]),t._v(" "),a("p",[a("code",[t._v("O(1)")]),t._v("被称为常量时间。它并不意味着马上，而是说不管散列表多大，所需的时间都相同。")]),t._v(" "),a("ul",[a("li",[t._v("链表：查找O(n)、插入O(1)、删除O(1)")]),t._v(" "),a("li",[t._v("数组：查找O(1)、插入O(n)、删除O(n)")]),t._v(" "),a("li",[t._v("散列表（最差情况）：查找O(n)、插入O(n)、删除O(n)")]),t._v(" "),a("li",[t._v("散列表（平均情况）：查找O(1)、插入O(1)、删除O(1)")])]),t._v(" "),a("p",[t._v("在平均情况下，散列表的查找（获取给定索引处的值）速度与数组一样快，而插入和删除速度与链表一样快，因此它兼具两者的优点！\n但在最糟情况下，散列表的各种操作的速度都很慢。\n因此，在使用散列表时，避开最糟情况至关重要。")]),t._v(" "),a("p",[t._v("为此，需要避免冲突。而要避免冲突，需要有：")]),t._v(" "),a("ol",[a("li",[t._v("较低的填装因子；")]),t._v(" "),a("li",[t._v("良好的散列函数。")])]),t._v(" "),a("p",[t._v("散列表的装填因子 = 散列表的元素数 / 位置总数")]),t._v(" "),a("p",[t._v("一旦填装因子开始增大，你就需要在散列表中添加位置，这被称为调整长度（"),a("code",[t._v("resizing")]),t._v("）。")]),t._v(" "),a("p",[t._v("填装因子越低，发生冲突的可能性越小，散列表的性能越高。一个不错的经验规则是：一旦填装因子大于"),a("code",[t._v("0.7")]),t._v("，就调整散列表的长度。")]),t._v(" "),a("h2",{attrs:{id:"_2-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-排序"}},[t._v("#")]),t._v(" 2. 排序")]),t._v(" "),a("h3",{attrs:{id:"_2-1-工程上的排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-工程上的排序"}},[t._v("#")]),t._v(" 2.1. 工程上的排序")]),t._v(" "),a("ol",[a("li",[t._v("工程上的排序是综合排序")]),t._v(" "),a("li",[t._v("数组较小时，插入排序")]),t._v(" "),a("li",[t._v("数组较大时，快速排序或者其他"),a("code",[t._v("O(N*logN)")]),t._v("的排序")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-经典排序的空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-经典排序的空间复杂度"}},[t._v("#")]),t._v(" 2.2. 经典排序的空间复杂度")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("O(1)")]),t._v("：插入排序、选择排序、冒泡排序、堆排序、希尔排序")]),t._v(" "),a("li",[a("code",[t._v("O(logN)~O(n)")]),t._v("：快速排序")]),t._v(" "),a("li",[a("code",[t._v("O(N)")]),t._v("：归并排序")]),t._v(" "),a("li",[a("code",[t._v("O(M)")]),t._v("：计数排序、基数排序")])]),t._v(" "),a("p",[t._v("堆排序如果用递归的方式时间复杂度是"),a("code",[t._v("O(log(N)")]),t._v("，因为用到了函数栈。")]),t._v(" "),a("p",[t._v("数组分布区间范围小的话，计数排序比较有优势，比如身高。")]),t._v(" "),a("p",[t._v("基本有序的情况下：快排最慢，堆排最快。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/sorting_complexity_table.png",alt:"排序时间复杂度"}})]),t._v(" "),a("h3",{attrs:{id:"_2-3-不稳定排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-不稳定排序"}},[t._v("#")]),t._v(" 2.3. 不稳定排序")]),t._v(" "),a("p",[t._v("不稳定排序有选择排序、快排、堆排、希尔")]),t._v(" "),a("ol",[a("li",[t._v("选择排序举例："),a("code",[t._v("2221")]),t._v("=>第一次选择最小值"),a("code",[t._v("1")]),t._v("的时候会和第一个2交换")]),t._v(" "),a("li",[t._v("堆排序举例："),a("code",[t._v("555")]),t._v("=>建立大根堆后，堆顶元素会换到最后位置上去，第一个"),a("code",[t._v("5")]),t._v("就会跑到最后去")]),t._v(" "),a("li",[t._v("快排举例："),a("code",[t._v("43335")]),t._v("=>如果随机选中中间的"),a("code",[t._v("3")]),t._v("作为基准的话，左右两边的"),a("code",[t._v("3")]),t._v("要么都被分到右边，要么都被分到左边")]),t._v(" "),a("li",[t._v("希尔排序举例："),a("code",[t._v("5115")]),t._v("=>步长为"),a("code",[t._v("2")]),t._v("的时候，第一个"),a("code",[t._v("5")]),t._v("和第二个"),a("code",[t._v("1")]),t._v("交换，改变了两个"),a("code",[t._v("1")]),t._v("的相对位置")])]),t._v(" "),a("h3",{attrs:{id:"_2-4-排序初始状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-排序初始状态"}},[t._v("#")]),t._v(" 2.4. 排序初始状态")]),t._v(" "),a("p",[t._v("以下四种排序方法的算法复杂度与数组的初始状态无关：\n一堆（堆排序）乌龟（归并排序）选（选择排序）基（基数排序）友")]),t._v(" "),a("ol",[a("li",[t._v("算法复杂度与初始状态无关的有：选择排序、堆排序、归并排序、基数排序。")]),t._v(" "),a("li",[t._v("元素总比较次数与初始状态无关的有：选择排序、基数排序。")]),t._v(" "),a("li",[t._v("元素总移动次数与初始状态无关的有：归并排序、基数排序。")])]),t._v(" "),a("h3",{attrs:{id:"_2-5-从1000个数字中找出最大的10个字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-从1000个数字中找出最大的10个字"}},[t._v("#")]),t._v(" 2.5. 从1000个数字中找出最大的10个字？")]),t._v(" "),a("p",[t._v("这个有多种方法")]),t._v(" "),a("ol",[a("li",[t._v("堆排序算法。选前10个数调整成最小堆，从第11个数开始逐一与堆顶比较，较小则直接抛弃，较大则替换堆顶，然后调整维持10个元素的最小堆。")]),t._v(" "),a("li",[t._v("快速排序。将输入元素进行一趟快速排序划分为较小的A集合，pivot，和较大的B集合，若B集合元素个数加一个 pivot 超过所需个数，则将B集合作为输入重复进行，否则在A集合找剩余所需元素，直到刚好找到所需个数结束。")]),t._v(" "),a("li",[t._v("分治算法。将1000个元素分100组，分别找到最大元素，在100个最大元素这找较大的10个，选出这10个元素在原来100组中所代表的10组，其余组舍去。然后在这100个元素中找最大的10个")])]),t._v(" "),a("h3",{attrs:{id:"_2-6-数据表a中每个元素距其最终位置不远-为节省时间排序-应采用什么方法排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-数据表a中每个元素距其最终位置不远-为节省时间排序-应采用什么方法排序"}},[t._v("#")]),t._v(" 2.6. 数据表A中每个元素距其最终位置不远，为节省时间排序，应采用什么方法排序？")]),t._v(" "),a("p",[t._v("插入不是堆排")]),t._v(" "),a("ul",[a("li",[t._v("“每个元素距其最终位置不远”，可以理解成序列相对有序")]),t._v(" "),a("li",[t._v("那么原题就转换成在序列相对有序的情况下，哪种排序算法的时间复杂度更小?")]),t._v(" "),a("li",[t._v("直接插入排序是数据越有序越快，最快时间复杂度可达到O(n).")]),t._v(" "),a("li",[t._v("选择排序无论何时都是O（n^2）")]),t._v(" "),a("li",[t._v("快速排序越有序越慢，它要从后到前遍历找比基准小的，时间复杂度达到O(n^2)")])]),t._v(" "),a("h3",{attrs:{id:"_2-7-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-查找"}},[t._v("#")]),t._v(" 2.7. 查找")]),t._v(" "),a("ol",[a("li",[t._v("折半查找最坏的情况下查找"),a("code",[t._v("log(n)+1")]),t._v("次")]),t._v(" "),a("li",[t._v("二叉查找树最坏的情况是查找"),a("code",[t._v("n")]),t._v("次。")])]),t._v(" "),a("h3",{attrs:{id:"_2-8-有序数组合并的最小比较次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-有序数组合并的最小比较次数"}},[t._v("#")]),t._v(" 2.8. 有序数组合并的最小比较次数")]),t._v(" "),a("p",[t._v("有两个从小到大排好序的数组，长度分别为"),a("code",[t._v("N")]),t._v("和"),a("code",[t._v("M")]),t._v("，将这两个数组合并成一个有序数组的最小比较次数是？")]),t._v(" "),a("ol",[a("li",[t._v("当数组为"),a("code",[t._v("1,2,3,4,5")]),t._v("和"),a("code",[t._v("6,7,8,9,10,11")]),t._v("这种时，比较次数最少，为"),a("code",[t._v("min(5,6)=5")]),t._v("；")]),t._v(" "),a("li",[t._v("当数组为"),a("code",[t._v("1,3,5,7,9,11")]),t._v("和"),a("code",[t._v("2,4,6,8,10")]),t._v("这种的数组时，比较次数最多，为"),a("code",[t._v("M+N-1")])])]),t._v(" "),a("h3",{attrs:{id:"_2-9-二分查找、顺序查找、分块查找对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-二分查找、顺序查找、分块查找对比"}},[t._v("#")]),t._v(" 2.9. 二分查找、顺序查找、分块查找对比")]),t._v(" "),a("ol",[a("li",[t._v("分块查找的数据组织形式为，块间有序，块内可以无序（有序也可以），并且在索引表中用索引项来快速查找")]),t._v(" "),a("li",[t._v("三种静态查找算法：顺序、二分/折半、索引/分块查找")]),t._v(" "),a("li",[t._v("无论使用什么确定块，速度一定是二分>分块>顺序")])]),t._v(" "),a("h3",{attrs:{id:"_2-10-几种常见的数据结构的操作性能对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-几种常见的数据结构的操作性能对比"}},[t._v("#")]),t._v(" 2.10. 几种常见的数据结构的操作性能对比")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/data_structure_compare_table.png",alt:"几种常见的数据结构的操作性能对比"}})]),t._v(" "),a("p",[t._v("由上图可见：")]),t._v(" "),a("ol",[a("li",[t._v("平衡二叉树的查找，插入和删除性能都是"),a("code",[t._v("O(logN)")]),t._v("，其中查找和删除性能较好；")]),t._v(" "),a("li",[t._v("哈希表的查找、插入和删除性能都是"),a("code",[t._v("O(1)")]),t._v("，都是最好的。")])]),t._v(" "),a("h3",{attrs:{id:"_2-11-bloomfilter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-bloomfilter"}},[t._v("#")]),t._v(" 2.11. BloomFilter")]),t._v(" "),a("p",[t._v("用途：判断一个元素是否在一个集合中、检查一个英语单词是否正确拼写；")]),t._v(" "),a("p",[t._v("原理：")]),t._v(" "),a("ol",[a("li",[t._v("位数组与"),a("code",[t._v("Hash")]),t._v("函数的联合使用。是一个包含 m 位的位数组，每位初始化为 0，有 k 个不同的 hash 函数，可将集合元素映射到位数组的某一位。")]),t._v(" "),a("li",[t._v("插入元素需根据 k 个 hash 函数得到 k 个位，置为1。")]),t._v(" "),a("li",[t._v("查询时判断这 k 个位（有0则该元素肯定不在集合中，都为1则该元素有可能在集合中）")])]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ol",[a("li",[t._v("优点：有良好的空间效率和时间效率，插入、查询O(n)，安全性高（不保存元素本身）")]),t._v(" "),a("li",[t._v("缺点：正确率低，有可能不在集合中的元素在位数组查询的位得到都为1。")])]),t._v(" "),a("h3",{attrs:{id:"_2-12-水库算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-12-水库算法"}},[t._v("#")]),t._v(" 2.12. 水库算法")]),t._v(" "),a("ol",[a("li",[t._v("我们有 n 个数据，要选取 m 个数据。前 m 个数据直接选择；")]),t._v(" "),a("li",[t._v("然后从 m+1 个数据开始决定该数据是否留下也就是从第 m+1 个数据开始以"),a("code",[t._v("m/m+1")]),t._v("的概率决定是否留下。")]),t._v(" "),a("li",[t._v("留下是根据先前已经留下的m个数据随机选取一个做交换。")])]),t._v(" "),a("h3",{attrs:{id:"_2-13-set和map的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-13-set和map的时间复杂度"}},[t._v("#")]),t._v(" 2.13. Set和Map的时间复杂度")]),t._v(" "),a("p",[t._v("Set和Map，对于不同的实现，有不同的时间复杂度")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("普通数组实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("顺序数组实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("二分搜索树（平衡）")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("哈希表")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("插入")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(log(n))")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")])]),t._v(" "),a("tr",[a("td",[t._v("查找")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(logn)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(log(n))")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")])]),t._v(" "),a("tr",[a("td",[t._v("删除")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(log(n))")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("O(1)")])])])]),t._v(" "),a("p",[t._v("C++的set和map底层都是用平衡二叉树实现的，"),a("code",[t._v("unordered_map")]),t._v("和"),a("code",[t._v("unordered_set")]),t._v("的底层实现为哈希表。")]),t._v(" "),a("p",[t._v("哈希表的一个缺点是，失去了数据的顺序性")]),t._v(" "),a("h5",{attrs:{id:"_2-13-0-1-什么是数据的顺序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-13-0-1-什么是数据的顺序性"}},[t._v("#")]),t._v(" 2.13.0.1. 什么是数据的顺序性？")]),t._v(" "),a("ol",[a("li",[t._v("数据集中的最大值和最小值")]),t._v(" "),a("li",[t._v("某个元素的前驱和后继")]),t._v(" "),a("li",[t._v("某个元素的 "),a("code",[t._v("floor")]),t._v(" 和 "),a("code",[t._v("cell")])]),t._v(" "),a("li",[t._v("某个元素的排位 "),a("code",[t._v("rank")])]),t._v(" "),a("li",[t._v("选择某个排位的元素 "),a("code",[t._v("select")])])]),t._v(" "),a("h3",{attrs:{id:"_2-14-n皇后问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-14-n皇后问题"}},[t._v("#")]),t._v(" 2.14. N皇后问题")]),t._v(" "),a("p",[t._v("对角线1：相加为常数，其和为i+j\n对角线2：相减为常数")]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/n_queen_rule.png",alt:"N皇后"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/n_queen_cross_line.png",alt:"N皇后"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/n_queen_cross_line2.png",alt:"N皇后"}}),t._v("\n解法：\n回溯函数 backtrack(row = 0).")]),t._v(" "),a("ul",[a("li",[t._v("从第一个 row = 0 开始.")]),t._v(" "),a("li",[t._v("循环列并且试图在每个 column 中放置皇后.\n"),a("ul",[a("li",[a("p",[t._v("如果方格 (row, column) 不在攻击范围内")]),t._v(" "),a("ul",[a("li",[t._v("在 (row, column) 方格上放置皇后。")]),t._v(" "),a("li",[t._v("排除对应行，列和两个对角线的位置。")]),t._v(" "),a("li",[t._v("If 所有的行被考虑过，row == N\n"),a("ul",[a("li",[t._v("意味着我们找到了一个解")])])]),t._v(" "),a("li",[t._v("Else\n"),a("ul",[a("li",[t._v("继续考虑接下来的皇后放置 backtrack(row + 1).")])])]),t._v(" "),a("li",[t._v("回溯：将在 (row, column) 方格的皇后移除.")])])])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cols "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dia1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dia2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dia1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    dia2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  queens "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("couldPlace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dia1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dia2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("placeQueen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    queens"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("row"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("col"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    cols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    dia1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    dia2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeQueen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    queens"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("row"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("col"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    cols"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    dia1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    dia2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSolution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" solution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queens"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    _list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" _list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Q'")]),t._v("\n      solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("solution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" col "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" col "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("couldPlace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("placeQueen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addSolution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeQueen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" col"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("复杂度分析")]),t._v(" "),a("ol",[a("li",[t._v("时间复杂度："),a("code",[t._v("O(N!)")]),t._v(". 放置第 1 个皇后有 "),a("code",[t._v("N")]),t._v(" 种可能的方法，放置两个皇后的方法不超过 "),a("code",[t._v("N (N - 2)")]),t._v(" ，放置 3 个皇后的方法不超过 "),a("code",[t._v("N(N - 2)(N - 4)")]),t._v(" ，以此类推。总体上，时间复杂度为 "),a("code",[t._v("O(N!)")]),t._v(" .")]),t._v(" "),a("li",[t._v("空间复杂度："),a("code",[t._v("O(N)")]),t._v(" . 需要保存对角线和行的信息。")])]),t._v(" "),a("p",[t._v("参考资料："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/solution/nhuang-hou-by-leetcode/",target:"_blank",rel:"noopener noreferrer"}},[t._v("N皇后, LeetCode"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"_2-15-动态规划和记忆化搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-15-动态规划和记忆化搜索"}},[t._v("#")]),t._v(" 2.15. 动态规划和记忆化搜索")]),t._v(" "),a("p",[t._v("斐波那契数列原始解法：直接"),a("code",[t._v("return fib(n-1) + fib(n-2)")]),t._v("，问题是存在大量重复计算，所以有如下的优化方法。\n记忆化搜索-自顶向下的解决问题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" memo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("动态规划-自底向上的解决问题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" memo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fib")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" memo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                                记忆化搜索\n                            自顶向下的解决问题\n                           /\n                重叠子问题 \n递归问题  ---\x3e   最优子结构\n                           \\\n                                动态规划\n                             自底向上的解决问题\n")])])]),a("h3",{attrs:{id:"_2-16-哈夫曼树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-16-哈夫曼树"}},[t._v("#")]),t._v(" 2.16. 哈夫曼树")]),t._v(" "),a("ol",[a("li",[t._v("从根节点到每个叶子节点的长度为"),a("code",[t._v("Ik")]),t._v("，每个叶节点带有权值"),a("code",[t._v("Wk")]),t._v("，则每个叶节点的带权路径长度（WPL）之和为"),a("code",[t._v("Wk*Ik")]),t._v("的累加和。")]),t._v(" "),a("li",[t._v("给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度（WPL）达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树("),a("code",[t._v("Huffman Tree")]),t._v(")。权值较大的结点离根较近。")]),t._v(" "),a("li",[a("strong",[t._v("出现机率高的字母使用较短的编码")]),t._v("，反之出现机率低的则使用较长的编码，这便使编码之后的字符串的平均长度、期望值降低。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/imgs/wpl_example.png",alt:"WPL"}})]),t._v(" "),a("h4",{attrs:{id:"_2-16-1-哈夫曼树的构造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-16-1-哈夫曼树的构造"}},[t._v("#")]),t._v(" 2.16.1. 哈夫曼树的构造")]),t._v(" "),a("p",[t._v("每次把权值最小的两棵树合并")]),t._v(" "),a("p",[t._v("例1：\n"),a("img",{attrs:{src:"/imgs/huffman_tree_construction.png",alt:"哈夫曼树的构造"}})]),t._v(" "),a("p",[t._v("例2：\n"),a("img",{attrs:{src:"/imgs/huffman_tree_construction_example.png",alt:"哈夫曼树的构造"}})]),t._v(" "),a("h4",{attrs:{id:"_2-16-2-哈夫曼树的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-16-2-哈夫曼树的特点"}},[t._v("#")]),t._v(" 2.16.2. 哈夫曼树的特点")]),t._v(" "),a("ol",[a("li",[t._v("没有度为1的结点")]),t._v(" "),a("li",[t._v("n 个叶子节点的哈夫曼树共有 "),a("code",[t._v("2*n-1")]),t._v(" 个节点")]),t._v(" "),a("li",[t._v("哈夫曼树的任意非叶节点的左右子树交换后仍是哈夫曼树")]),t._v(" "),a("li",[t._v("对同一组权值，可能存在不同构的两棵哈夫曼树")])]),t._v(" "),a("h3",{attrs:{id:"_2-17-哈希表如何解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-17-哈希表如何解决冲突"}},[t._v("#")]),t._v(" 2.17. 哈希表如何解决冲突？")]),t._v(" "),a("ul",[a("li",[t._v("链接法和开发寻址法（探查法）")]),t._v(" "),a("li",[t._v("元素"),a("code",[t._v("key")]),t._v("冲突之后使用一个链表填充相同"),a("code",[t._v("key")]),t._v("的元素")]),t._v(" "),a("li",[t._v("开发寻址法是冲突之后根据一种方式（如二次探查）寻址下一个可用的槽")])]),t._v(" "),a("h3",{attrs:{id:"_2-18-堆是完全二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-18-堆是完全二叉树"}},[t._v("#")]),t._v(" 2.18. 堆是完全二叉树")]),t._v(" "),a("ol",[a("li",[t._v("最大堆：对于每个非叶节点"),a("code",[t._v("v")]),t._v("，"),a("code",[t._v("v")]),t._v("的值都比它的两个孩子大")]),t._v(" "),a("li",[t._v("最小堆：对于每个非叶节点"),a("code",[t._v("v")]),t._v("，"),a("code",[t._v("v")]),t._v("的值都比它的两个孩子小")]),t._v(" "),a("li",[t._v("常见问题：用堆来完成"),a("code",[t._v("topk")]),t._v("问题，从海量数字中寻找最大的k个")])]),t._v(" "),a("h4",{attrs:{id:"_2-18-1-求最大的k个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-18-1-求最大的k个数"}},[t._v("#")]),t._v(" 2.18.1. 求最大的k个数")]),t._v(" "),a("ol",[a("li",[t._v("先放入元素前k个，建立一个最小堆")]),t._v(" "),a("li",[t._v("迭代剩余元素：")]),t._v(" "),a("li",[t._v("如果当前元素小于堆顶元素，跳过该元素（肯定不是前k大），否则替换堆顶元素为当前元素，并重新调整堆")])]),t._v(" "),a("h3",{attrs:{id:"_2-19-js内部的settimeout是用什么数据结构维护的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-19-js内部的settimeout是用什么数据结构维护的"}},[t._v("#")]),t._v(" 2.19. JS内部的"),a("code",[t._v("setTimeout")]),t._v("是用什么数据结构维护的？")]),t._v(" "),a("p",[t._v("优先队列，堆？")])])}),[],!1,null,null,null);a.default=v.exports}}]);