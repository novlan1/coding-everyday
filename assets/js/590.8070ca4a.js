(window.webpackJsonp=window.webpackJsonp||[]).push([[590],{862:function(a,t,v){"use strict";v.r(t);var _=v(14),e=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"#1-%E8%B5%B7%E6%BA%90"}},[a._v("1. 起源")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#2-java%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8C%BA%E5%88%AB"}},[a._v("2. JAVA中”单引号”，“双引号”区别：")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#3-%E4%B8%89%E7%A7%8D%E6%B3%A8%E9%87%8A%E5%BD%A2%E5%BC%8F"}},[a._v("3. 三种注释形式")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#4-stringbuilder"}},[a._v("4. "),t("code",[a._v("StringBuilder")])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#5-stringjoiner"}},[a._v("5. "),t("code",[a._v("StringJoiner")])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#6-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B"}},[a._v("6. 包装类型")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#7-javabean"}},[a._v("7. JavaBean")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#8-%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B"}},[a._v("8. 枚举类型")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#9-%E8%AE%B0%E5%BD%95%E7%B1%BB"}},[a._v("9. 记录类")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#10-%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%88%86%E7%B1%BB"}},[a._v("10. 二维码分类")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#101-%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C"}},[a._v("10.1. 二维码扫描结果")])])])]),a._v(" "),t("li",[t("a",{attrs:{href:"#11-intellij-idea-%E4%BD%BF%E7%94%A8trycatch-%E5%BF%AB%E6%8D%B7%E6%8F%90%E7%A4%BA"}},[a._v("11. intelliJ idea 使用try/catch 快捷提示")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#12-string%E6%98%AF%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%90%97"}},[a._v("12. String是最基本的数据类型吗？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#13-float-f34%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE"}},[a._v("13. "),t("code",[a._v("float f=3.4;")]),a._v("是否正确？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#14-short-s1--1-s1--s1--1%E6%9C%89%E9%94%99%E5%90%97-short-s1--1-s1--1-%E6%9C%89%E9%94%99%E5%90%97"}},[a._v("14. "),t("code",[a._v("short s1 = 1; s1 = s1 + 1;")]),a._v("有错吗? "),t("code",[a._v("short s1 = 1; s1 += 1;")]),a._v(" 有错吗？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#15--%E5%92%8C--%E7%9A%84%E5%8C%BA%E5%88%AB"}},[a._v("15. & 和 && 的区别？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#16-mathround115-%E7%AD%89%E4%BA%8E%E5%A4%9A%E5%B0%91mathround-115-%E7%AD%89%E4%BA%8E%E5%A4%9A%E5%B0%91"}},[a._v("16. "),t("code",[a._v("Math.round(11.5)")]),a._v(" 等于多少？"),t("code",[a._v("Math.round(-11.5)")]),a._v(" 等于多少？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#17-switch%E6%98%AF%E5%90%A6%E8%83%BD%E4%BD%9C%E7%94%A8%E5%9C%A8-byte-%E4%B8%8A%E6%98%AF%E5%90%A6%E8%83%BD%E4%BD%9C%E7%94%A8%E5%9C%A8-long-%E4%B8%8A%E6%98%AF%E5%90%A6%E8%83%BD%E4%BD%9C%E7%94%A8%E5%9C%A8-string-%E4%B8%8A"}},[a._v("17. switch是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#18-%E7%94%A8%E6%9C%80%E6%9C%89%E6%95%88%E7%8E%87%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%A1%E7%AE%97-2-%E4%B9%98%E4%BB%A5-8-"}},[a._v("18. 用最有效率的方法计算 2 乘以 8 ？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#19-%E6%95%B0%E7%BB%84%E6%9C%89%E6%B2%A1%E6%9C%89-length-%E6%96%B9%E6%B3%95-string-%E6%9C%89%E6%B2%A1%E6%9C%89-length-%E6%96%B9%E6%B3%95"}},[a._v("19. 数组有没有 "),t("code",[a._v("length()")]),a._v(" 方法？ "),t("code",[a._v("String")]),a._v(" 有没有 "),t("code",[a._v("length()")]),a._v(" 方法？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#20-%E5%9C%A8java%E4%B8%AD%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E5%BD%93%E5%89%8D%E7%9A%84%E5%A4%9A%E9%87%8D%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF"}},[a._v("20. 在Java中，如何跳出当前的多重嵌套循环？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#21-%E6%9E%84%E9%80%A0%E5%99%A8constructor%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A2%AB%E9%87%8D%E5%86%99override"}},[a._v("21. 构造器（constructor）是否可被重写（override）？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#22-%E9%87%8D%E8%BD%BDoverload%E5%92%8C%E9%87%8D%E5%86%99override%E7%9A%84%E5%8C%BA%E5%88%AB%E9%87%8D%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95%E8%83%BD%E5%90%A6%E6%A0%B9%E6%8D%AE%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%8C%BA%E5%88%86"}},[a._v("22. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#23-char-%E5%9E%8B%E5%8F%98%E9%87%8F%E4%B8%AD%E8%83%BD%E4%B8%8D%E8%83%BD%E5%AD%98%E8%B4%AE%E4%B8%80%E4%B8%AA%E4%B8%AD%E6%96%87%E6%B1%89%E5%AD%97%E4%B8%BA%E4%BB%80%E4%B9%88"}},[a._v("23. char 型变量中能不能存贮一个中文汉字，为什么？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#24-%E6%8A%BD%E8%B1%A1%E7%B1%BBabstract-class%E5%92%8C%E6%8E%A5%E5%8F%A3interface%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%90%8C"}},[a._v("24. 抽象类（abstract class）和接口（interface）有什么异同？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#25-%E6%8A%BD%E8%B1%A1%E7%9A%84abstract%E6%96%B9%E6%B3%95%E6%98%AF%E5%90%A6%E5%8F%AF%E5%90%8C%E6%97%B6%E6%98%AF%E9%9D%99%E6%80%81%E7%9A%84static%E6%98%AF%E5%90%A6%E5%8F%AF%E5%90%8C%E6%97%B6%E6%98%AF%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95native%E6%98%AF%E5%90%A6%E5%8F%AF%E5%90%8C%E6%97%B6%E8%A2%AB-synchronized-%E4%BF%AE%E9%A5%B0"}},[a._v("25. 抽象的（abstract）方法是否可同时是静态的（static），是否可同时是本地方法（native），是否可同时被 synchronized 修饰？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#26-%E9%98%90%E8%BF%B0%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB"}},[a._v("26. 阐述静态变量和实例变量的区别")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#27-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86"}},[a._v("27. 如何实现对象克隆？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#28-string-s--new-stringxyz%E5%88%9B%E5%BB%BA%E4%BA%86%E5%87%A0%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1"}},[a._v("28. "),t("code",[a._v('String s = new String("xyz");')]),a._v("创建了几个字符串对象？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#29-%E6%8E%A5%E5%8F%A3%E6%98%AF%E5%90%A6%E5%8F%AF%E7%BB%A7%E6%89%BFextends%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%98%AF%E5%90%A6%E5%8F%AF%E5%AE%9E%E7%8E%B0implements%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%98%AF%E5%90%A6%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%85%B7%E4%BD%93%E7%B1%BBconcrete-class"}},[a._v("29. 接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#30-error%E5%92%8Cexception%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[a._v("30. Error和Exception有什么区别？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#31-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8%E6%9C%89%E4%BD%95%E5%BC%82%E5%90%8C"}},[a._v("31. 运行时异常与受检异常有何异同？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#32-try-%E9%87%8C%E6%9C%89%E4%B8%80%E4%B8%AA-return-%E8%AF%AD%E5%8F%A5%E9%82%A3%E4%B9%88%E7%B4%A7%E8%B7%9F%E5%9C%A8%E8%BF%99%E4%B8%AA-try-%E5%90%8E%E7%9A%84-finally-%E9%87%8C%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%9A%E4%B8%8D%E4%BC%9A%E8%A2%AB%E6%89%A7%E8%A1%8C"}},[a._v("32. "),t("code",[a._v("try{}")]),a._v(" 里有一个 "),t("code",[a._v("return")]),a._v(" 语句，那么紧跟在这个 "),t("code",[a._v("try")]),a._v(" 后的 "),t("code",[a._v("finally{}")]),a._v(" 里的代码会不会被执行？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#33-listsetmap%E6%98%AF%E5%90%A6%E7%BB%A7%E6%89%BF%E8%87%AAcollection%E6%8E%A5%E5%8F%A3"}},[a._v("33. List、Set、Map是否继承自Collection接口？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#34-thread%E7%B1%BB%E7%9A%84-sleep-%E6%96%B9%E6%B3%95%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84-wait-%E6%96%B9%E6%B3%95%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%AE%A9%E7%BA%BF%E7%A8%8B%E6%9A%82%E5%81%9C%E6%89%A7%E8%A1%8C%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[a._v("34. Thread类的 "),t("code",[a._v("sleep()")]),a._v(" 方法和对象的 "),t("code",[a._v("wait()")]),a._v(" 方法都可以让线程暂停执行，它们有什么区别？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#35-%E7%BA%BF%E7%A8%8B%E7%9A%84-sleep-%E6%96%B9%E6%B3%95%E5%92%8C-yield-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB"}},[a._v("35. 线程的 sleep() 方法和 yield() 方法有什么区别？")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#36-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99"}},[a._v("36. 学习资料")])])]),a._v(" "),t("h3",{attrs:{id:"_1-起源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-起源"}},[a._v("#")]),a._v(" 1. 起源")]),a._v(" "),t("p",[a._v("Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由"),t("code",[a._v("James Gosling")]),a._v("和同事们共同研发，并在1995年正式推出。")]),a._v(" "),t("p",[a._v("Java介于编译型语言和解释型语言之间。编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。")]),a._v(" "),t("p",[a._v("随着Java的发展，SUN给Java又分出了三个不同版本：")]),a._v(" "),t("ul",[t("li",[a._v("Java SE：Standard Edition")]),a._v(" "),t("li",[a._v("Java EE：Enterprise Edition")]),a._v(" "),t("li",[a._v("Java ME：Micro Edition")])]),a._v(" "),t("p",[a._v("这三者之间有啥关系呢？")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("┌───────────────────────────┐\n│Java EE                    │\n│    ┌────────────────────┐ │\n│    │Java SE             │ │\n│    │    ┌─────────────┐ │ │\n│    │    │   Java ME   │ │ │\n│    │    └─────────────┘ │ │\n│    └────────────────────┘ │\n└───────────────────────────┘\n")])])]),t("p",[a._v("简单来说，Java SE就是标准版，包含标准的JVM和标准库，而Java EE是企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。")]),a._v(" "),t("p",[a._v("JDK 和 JRE")]),a._v(" "),t("ul",[t("li",[a._v("JDK：Java Development Kit")]),a._v(" "),t("li",[a._v("JRE：Java Runtime Environment")])]),a._v(" "),t("p",[a._v("简单地说，JRE就是运行Java字节码的虚拟机。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。")]),a._v(" "),t("p",[a._v("二者关系如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  ┌─    ┌──────────────────────────────────┐\n  │     │     Compiler, debugger, etc.     │\n  │     └──────────────────────────────────┘\n JDK ┌─ ┌──────────────────────────────────┐\n  │  │  │                                  │\n  │ JRE │      JVM + Runtime Library       │\n  │  │  │                                  │\n  └─ └─ └──────────────────────────────────┘\n        ┌───────┐┌───────┐┌───────┐┌───────┐\n        │Windows││ Linux ││ macOS ││others │\n        └───────┘└───────┘└───────┘└───────┘\n")])])]),t("p",[a._v("那JSR、JCP……又是啥？")]),a._v(" "),t("ul",[t("li",[a._v("JSR规范：Java Specification Request")]),a._v(" "),t("li",[a._v("JCP组织：Java Community Process")])]),a._v(" "),t("p",[a._v("在"),t("code",[a._v("JAVA_HOME")]),a._v("的"),t("code",[a._v("bin")]),a._v("目录下找到很多可执行文件：")]),a._v(" "),t("ul",[t("li",[a._v("java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；")]),a._v(" "),t("li",[a._v("javac：这是Java的编译器，它用于把Java源码文件（以"),t("code",[a._v(".java")]),a._v("后缀结尾）编译为Java字节码文件（以"),t("code",[a._v(".class")]),a._v("后缀结尾）；")]),a._v(" "),t("li",[a._v("jar：用于把一组"),t("code",[a._v(".class")]),a._v("文件打包成一个"),t("code",[a._v(".jar")]),a._v("文件，便于发布；")]),a._v(" "),t("li",[a._v("javadoc：用于从Java源码中自动提取注释并生成文档；")]),a._v(" "),t("li",[a._v("jdb：Java调试器，用于开发阶段的运行调试。")])]),a._v(" "),t("h3",{attrs:{id:"_2-java中-单引号-双引号-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java中-单引号-双引号-区别"}},[a._v("#")]),a._v(" 2. "),t("a",{attrs:{href:"https://www.cnblogs.com/lidar/p/7798933.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("JAVA中”单引号”，“双引号”区别："),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('单引号引的数据 是char类型的——》单引号只能引一个字符（表示单个字符）\n双引号引的数据 是String类型的——》而双引号可以引0个及其以上（引用字符串）\n\n\nchar类型的值用单引号引起来的单个字符\n如: char a = \'b\'\n\n而java中的双引号 表示字符串 一个或多个字符\n如 String c = "abc"\nString d="a"\n和char d=‘a’\n')])])]),t("p",[a._v("Java源码本质上是一个文本文件，我们需要先用"),t("code",[a._v("javac")]),a._v("把"),t("code",[a._v("Hello.java")]),a._v("编译成字节码文件"),t("code",[a._v("Hello.class")]),a._v("，然后，用"),t("code",[a._v("java")]),a._v("命令执行这个字节码文件：Java源码本质上是一个文本文件，我们需要先用"),t("code",[a._v("javac")]),a._v("把"),t("code",[a._v("Hello.java")]),a._v("编译成字节码文件"),t("code",[a._v("Hello.class")]),a._v("，然后，用"),t("code",[a._v("java")]),a._v("命令执行这个字节码文件：")]),a._v(" "),t("div",{staticClass:"language-ascii extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("┌──────────────────┐\n│    Hello.java    │<─── source code\n└──────────────────┘\n          │ compile\n          ▼\n┌──────────────────┐\n│   Hello.class    │<─── byte code\n└──────────────────┘\n          │ execute\n          ▼\n┌──────────────────┐\n│    Run on JVM    │\n└──────────────────┘\n")])])]),t("h3",{attrs:{id:"_3-三种注释形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-三种注释形式"}},[a._v("#")]),a._v(" 3. 三种注释形式")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 可以用来自动创建文档的注释\n */")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Hello")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 向屏幕输出文本:")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello, world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/* 多行注释开始\n        注释内容\n        注释结束 */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// class定义结束")]),a._v("\n")])])]),t("h3",{attrs:{id:"_4-stringbuilder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-stringbuilder"}},[a._v("#")]),a._v(" 4. "),t("code",[a._v("StringBuilder")])]),a._v(" "),t("p",[t("code",[a._v("StringBuilder")]),a._v("是可变对象，用来高效拼接字符串；")]),a._v(" "),t("p",[t("code",[a._v("StringBuilder")]),a._v("可以支持链式操作，实现链式操作的关键是返回实例本身；")]),a._v(" "),t("p",[t("code",[a._v("StringBuffer")]),a._v("是"),t("code",[a._v("StringBuilder")]),a._v("的线程安全版本，现在很少使用。")]),a._v(" "),t("h3",{attrs:{id:"_5-stringjoiner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-stringjoiner"}},[a._v("#")]),a._v(" 5. "),t("code",[a._v("StringJoiner")])]),a._v(" "),t("p",[a._v("用指定分隔符拼接字符串数组时，使用"),t("code",[a._v("StringJoiner")]),a._v("或者"),t("code",[a._v("String.join()")]),a._v("更方便；")]),a._v(" "),t("p",[a._v("用"),t("code",[a._v("StringJoiner")]),a._v("拼接字符串时，还可以额外附加一个“开头”和“结尾”。")]),a._v(" "),t("h3",{attrs:{id:"_6-包装类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-包装类型"}},[a._v("#")]),a._v(" 6. 包装类型")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 编译器自动使用Integer.valueOf(int)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 编译器自动使用Integer.intValue()")]),a._v("\n")])])]),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("intValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("p",[a._v("把"),t("code",[a._v("int")]),a._v("变为"),t("code",[a._v("Integer")]),a._v("的赋值写法，称为自动装箱（Auto Boxing），反过来，把"),t("code",[a._v("Integer")]),a._v("变为"),t("code",[a._v("int")]),a._v("的赋值写法，称为自动拆箱（Auto Unboxing）。")]),a._v(" "),t("ol",[t("li",[a._v("Java核心库提供的包装类型可以把基本类型包装为"),t("code",[a._v("class")]),a._v("；")]),a._v(" "),t("li",[a._v("自动装箱和自动拆箱都是在编译期完成的（JDK>=1.5）；")]),a._v(" "),t("li",[a._v("装箱和拆箱会影响执行效率，且拆箱时可能发生"),t("code",[a._v("NullPointerException")]),a._v("；")]),a._v(" "),t("li",[a._v("包装类型的比较必须使用"),t("code",[a._v("equals()")]),a._v("；")]),a._v(" "),t("li",[a._v("整数和浮点数的包装类型都继承自"),t("code",[a._v("Number")]),a._v("；")]),a._v(" "),t("li",[a._v("包装类型提供了大量实用方法。")])]),a._v(" "),t("h3",{attrs:{id:"_7-javabean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-javabean"}},[a._v("#")]),a._v(" 7. JavaBean")]),a._v(" "),t("ol",[t("li",[a._v("JavaBean是一种符合命名规范的"),t("code",[a._v("class")]),a._v("，它通过"),t("code",[a._v("getter")]),a._v("和"),t("code",[a._v("setter")]),a._v("来定义属性；")]),a._v(" "),t("li",[a._v("属性是一种通用的叫法，并非Java语法规定；")]),a._v(" "),t("li",[a._v("可以利用IDE快速生成"),t("code",[a._v("getter")]),a._v("和"),t("code",[a._v("setter")]),a._v("；")]),a._v(" "),t("li",[a._v("使用"),t("code",[a._v("Introspector.getBeanInfo()")]),a._v("可以获取属性列表。")])]),a._v(" "),t("h3",{attrs:{id:"_8-枚举类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-枚举类型"}},[a._v("#")]),a._v(" 8. 枚举类型")]),a._v(" "),t("ol",[t("li",[a._v("Java使用"),t("code",[a._v("enum")]),a._v("定义枚举类型，它被编译器编译为"),t("code",[a._v("final class Xxx extends Enum { … }")]),a._v("；")]),a._v(" "),t("li",[a._v("通过"),t("code",[a._v("name()")]),a._v("获取常量定义的字符串，注意不要使用"),t("code",[a._v("toString()")]),a._v("；")]),a._v(" "),t("li",[a._v("通过"),t("code",[a._v("ordinal()")]),a._v("返回常量定义的顺序（无实质意义）；")]),a._v(" "),t("li",[a._v("可以为"),t("code",[a._v("enum")]),a._v("编写构造方法、字段和方法")]),a._v(" "),t("li",[t("code",[a._v("enum")]),a._v("的构造方法要声明为"),t("code",[a._v("private")]),a._v("，字段强烈建议声明为"),t("code",[a._v("final")]),a._v("；")]),a._v(" "),t("li",[t("code",[a._v("enum")]),a._v("适合用在"),t("code",[a._v("switch")]),a._v("语句中。")])]),a._v(" "),t("h3",{attrs:{id:"_9-记录类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-记录类"}},[a._v("#")]),a._v(" 9. 记录类")]),a._v(" "),t("p",[a._v("从Java 14开始，提供新的"),t("code",[a._v("record")]),a._v("关键字，可以非常方便地定义Data Class：")]),a._v(" "),t("ul",[t("li",[a._v("使用"),t("code",[a._v("record")]),a._v("定义的是不变类；")]),a._v(" "),t("li",[a._v("可以编写Compact Constructor对参数进行验证；")]),a._v(" "),t("li",[a._v("可以定义静态方法。")])]),a._v(" "),t("h3",{attrs:{id:"_10-二维码分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-二维码分类"}},[a._v("#")]),a._v(" 10. 二维码分类")]),a._v(" "),t("p",[a._v("二维码依据码制的编码原理，通常分为三种：线性堆叠式二维码、矩阵式二维码、邮政码。")]),a._v(" "),t("p",[a._v("线性堆叠式二维码：建立在一维条码基础上，按需要堆积成两行或多行。与一维码很类似。")]),a._v(" "),t("p",[a._v("矩阵式二维码：（最常用）在一个矩阵空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其它形状）的出现表示二进制“1”，点的不出现表示二进制的“0”。QR CODE")]),a._v(" "),t("p",[a._v("邮政码：通过不同长度的条进行编码，主要用于邮件编码。")]),a._v(" "),t("h4",{attrs:{id:"_10-1-二维码扫描结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-二维码扫描结果"}},[a._v("#")]),a._v(" 10.1. 二维码扫描结果")]),a._v(" "),t("ol",[t("li",[a._v("让扫出来的二维码，由文本变为可以跳转的链接，只需要在前面加个"),t("code",[a._v("http://")]),a._v("或者"),t("code",[a._v("https://")]),a._v("，不加的话识别的以为是文本。")]),a._v(" "),t("li",[a._v("扫描出来的是名片，VCARD 规范")])]),a._v(" "),t("h3",{attrs:{id:"_11-intellij-idea-使用try-catch-快捷提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-intellij-idea-使用try-catch-快捷提示"}},[a._v("#")]),a._v(" 11. intelliJ idea 使用try/catch 快捷提示")]),a._v(" "),t("p",[a._v("选中代码行，然后按住"),t("code",[a._v("ctrl + alt + t")])]),a._v(" "),t("h3",{attrs:{id:"_12-string是最基本的数据类型吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-string是最基本的数据类型吗"}},[a._v("#")]),a._v(" 12. String是最基本的数据类型吗？")]),a._v(" "),t("p",[a._v("不是，Java中的基本数据类型只有8个："),t("code",[a._v("byte")]),a._v("、"),t("code",[a._v("short")]),a._v("、"),t("code",[a._v("int")]),a._v("、"),t("code",[a._v("long")]),a._v("、"),t("code",[a._v("float")]),a._v("、"),t("code",[a._v("double")]),a._v("、"),t("code",[a._v("char")]),a._v("、"),t("code",[a._v("boolean")]),a._v("；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5以后引入的枚举类型也算是一种比较特殊的引用类型。")]),a._v(" "),t("h3",{attrs:{id:"_13-float-f-3-4-是否正确"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-float-f-3-4-是否正确"}},[a._v("#")]),a._v(" 13. "),t("code",[a._v("float f=3.4;")]),a._v("是否正确？")]),a._v(" "),t("p",[a._v("不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型会造成精度损失，因此需要强制类型转换 "),t("code",[a._v("float f =(float)3.4;")]),a._v(" 或者写成 "),t("code",[a._v("float f =3.4F;")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"_14-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗"}},[a._v("#")]),a._v(" 14. "),t("code",[a._v("short s1 = 1; s1 = s1 + 1;")]),a._v("有错吗? "),t("code",[a._v("short s1 = 1; s1 += 1;")]),a._v(" 有错吗？")]),a._v(" "),t("p",[a._v("对于 "),t("code",[a._v("short s1 = 1; s1 = s1 + 1;")]),a._v(" 由于 1 是 int 类型，因此 "),t("code",[a._v("s1+1")]),a._v(" 运算结果也是int 型，需要强制转换类型才能赋值给 short 型，编译不通过。")]),a._v(" "),t("p",[a._v("而 "),t("code",[a._v("short s1 = 1; s1 += 1;")]),a._v(" 可以正确编译，因为 "),t("code",[a._v("s1+= 1;")]),a._v(" 相当于 "),t("code",[a._v("s1 = (short)(s1 + 1);")]),a._v(" 其中有隐含的强制类型转换。")]),a._v(" "),t("h3",{attrs:{id:"_15-和-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-和-的区别"}},[a._v("#")]),a._v(" 15. & 和 && 的区别？")]),a._v(" "),t("p",[t("code",[a._v("&")]),a._v(" 运算符有两种用法：按位与；逻辑与。"),t("code",[a._v("&&")]),a._v(" 运算符是短路与运算。")]),a._v(" "),t("p",[a._v("逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 "),t("code",[a._v("true")]),a._v(" 整个表达式的值才是 "),t("code",[a._v("true")]),a._v(" 。 "),t("code",[a._v("&&")]),a._v(" 之所以称为短路运算是因为，如果 "),t("code",[a._v("&&")]),a._v(" 左边的表达式的值是 "),t("code",[a._v("false")]),a._v(" ，右边的表达式会被直接短路掉，不会进行运算。")]),a._v(" "),t("blockquote",[t("p",[a._v("逻辑或运算符 "),t("code",[a._v("|")]),a._v(" 和短路或运算符 "),t("code",[a._v("||")]),a._v(" 的差别也是如此。")])]),a._v(" "),t("h3",{attrs:{id:"_16-math-round-11-5-等于多少-math-round-11-5-等于多少"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-math-round-11-5-等于多少-math-round-11-5-等于多少"}},[a._v("#")]),a._v(" 16. "),t("code",[a._v("Math.round(11.5)")]),a._v(" 等于多少？"),t("code",[a._v("Math.round(-11.5)")]),a._v(" 等于多少？")]),a._v(" "),t("p",[t("code",[a._v("Math.round(11.5)")]),a._v(" 的返回值是 "),t("code",[a._v("12")]),a._v(" ，"),t("code",[a._v("Math.round(-11.5)")]),a._v(" 的返回值是 "),t("code",[a._v("-11")]),a._v("。四舍五入的原理是在参数上加 "),t("code",[a._v("0.5")]),a._v(" 然后进行下取整。")]),a._v(" "),t("h3",{attrs:{id:"_17-switch是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-switch是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上"}},[a._v("#")]),a._v(" 17. switch是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上？")]),a._v(" "),t("p",[a._v("在 Java 5 以前， "),t("code",[a._v("switch(expr)")]),a._v(" 中， "),t("code",[a._v("expr")]),a._v(" 只能是 "),t("code",[a._v("byte")]),a._v(" 、"),t("code",[a._v("short")]),a._v("、"),t("code",[a._v("char")]),a._v("、"),t("code",[a._v("int")]),a._v("；从 Java 5 开始，Java 中引入了枚举类型，"),t("code",[a._v("expr")]),a._v(" 也可以是 enum 类型；从 Java 7 开始， "),t("code",[a._v("expr")]),a._v(" 还可以是字符串 "),t("code",[a._v("String")]),a._v(" ，但是长整型 "),t("code",[a._v("long")]),a._v(" 在目前所有的版本中都是不可以的。")]),a._v(" "),t("h3",{attrs:{id:"_18-用最有效率的方法计算-2-乘以-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-用最有效率的方法计算-2-乘以-8"}},[a._v("#")]),a._v(" 18. 用最有效率的方法计算 2 乘以 8 ？")]),a._v(" "),t("p",[t("code",[a._v("2 << 3")]),a._v("（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。")]),a._v(" "),t("h3",{attrs:{id:"_19-数组有没有-length-方法-string-有没有-length-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-数组有没有-length-方法-string-有没有-length-方法"}},[a._v("#")]),a._v(" 19. 数组有没有 "),t("code",[a._v("length()")]),a._v(" 方法？ "),t("code",[a._v("String")]),a._v(" 有没有 "),t("code",[a._v("length()")]),a._v(" 方法？")]),a._v(" "),t("p",[a._v("数组没有 "),t("code",[a._v("length()")]),a._v(" 方法，有length的属性。String有 "),t("code",[a._v("length()")]),a._v(" 方法。")]),a._v(" "),t("h3",{attrs:{id:"_20-在java中-如何跳出当前的多重嵌套循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-在java中-如何跳出当前的多重嵌套循环"}},[a._v("#")]),a._v(" 20. 在Java中，如何跳出当前的多重嵌套循环？")]),a._v(" "),t("p",[a._v("在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。")]),a._v(" "),t("h3",{attrs:{id:"_21-构造器-constructor-是否可被重写-override"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-构造器-constructor-是否可被重写-override"}},[a._v("#")]),a._v(" 21. 构造器（constructor）是否可被重写（override）？")]),a._v(" "),t("p",[a._v("构造器不能被继承，因此不能被重写，但可以被重载。")]),a._v(" "),t("h3",{attrs:{id:"_22-重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-重载-overload-和重写-override-的区别。重载的方法能否根据返回类型进行区分"}},[a._v("#")]),a._v(" 22. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？")]),a._v(" "),t("p",[a._v("方法的重载和重写都是实现多态的方式，区别在于 "),t("strong",[a._v("重载是编译时的多态性")]),a._v("，而 "),t("strong",[a._v("重写是运行时的多态性")]),a._v("。")]),a._v(" "),t("p",[a._v("重载发生在一个类中，"),t("strong",[a._v("同名的方法如果有不同的参数列表")]),a._v("（参数类型不同、参数个数不同或者二者都不同）则视为重载。")]),a._v(" "),t("p",[a._v("重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型（或子类型），不能比父类被重写方法声明更多的异常（里氏代换原则）。")]),a._v(" "),t("h3",{attrs:{id:"_23-char-型变量中能不能存贮一个中文汉字-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-char-型变量中能不能存贮一个中文汉字-为什么"}},[a._v("#")]),a._v(" 23. char 型变量中能不能存贮一个中文汉字，为什么？")]),a._v(" "),t("p",[a._v("char 类型可以存储一个中文汉字，因为 Java 中使用的编码是 Unicode （不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法），"),t("strong",[a._v("一个 char 类型占2个字节")]),a._v("，所以放一个中文是没问题的。")]),a._v(" "),t("h3",{attrs:{id:"_24-抽象类-abstract-class-和接口-interface-有什么异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-抽象类-abstract-class-和接口-interface-有什么异同"}},[a._v("#")]),a._v(" 24. 抽象类（abstract class）和接口（interface）有什么异同？")]),a._v(" "),t("ul",[t("li",[a._v("抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。")]),a._v(" "),t("li",[a._v("一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。")]),a._v(" "),t("li",[a._v("接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。")]),a._v(" "),t("li",[a._v("抽象类中的成员可以是 "),t("code",[a._v("private")]),a._v("、默认、 protected 、public的，而接口中的成员全都是public的")]),a._v(" "),t("li",[a._v("抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量")]),a._v(" "),t("li",[a._v("有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法")])]),a._v(" "),t("h3",{attrs:{id:"_25-抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-抽象的-abstract-方法是否可同时是静态的-static-是否可同时是本地方法-native-是否可同时被-synchronized-修饰"}},[a._v("#")]),a._v(" 25. 抽象的（abstract）方法是否可同时是静态的（static），是否可同时是本地方法（native），是否可同时被 synchronized 修饰？")]),a._v(" "),t("p",[a._v("都不能。抽象方法需要子类重写，而静态的方法是无法被重写的，因此二者是矛盾的。")]),a._v(" "),t("p",[a._v("本地方法是由本地代码（如C代码）实现的方法，而抽象方法是没有实现的，也是矛盾的。")]),a._v(" "),t("p",[a._v("synchronized 和方法的实现细节有关，抽象方法不涉及实现细节，因此也是相互矛盾的。")]),a._v(" "),t("h3",{attrs:{id:"_26-阐述静态变量和实例变量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-阐述静态变量和实例变量的区别"}},[a._v("#")]),a._v(" 26. 阐述静态变量和实例变量的区别")]),a._v(" "),t("p",[a._v("静态变量是被static修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝；实例变量必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。")]),a._v(" "),t("h3",{attrs:{id:"_27-如何实现对象克隆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-如何实现对象克隆"}},[a._v("#")]),a._v(" 27. 如何实现对象克隆？")]),a._v(" "),t("p",[a._v("有两种方式：")]),a._v(" "),t("ol",[t("li",[a._v("实现 "),t("code",[a._v("Cloneable")]),a._v(" 接口并重写 Object 类中的 "),t("code",[a._v("clone()")]),a._v(" 方法；")]),a._v(" "),t("li",[a._v("实现 "),t("code",[a._v("Serializable")]),a._v(" 接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。")])]),a._v(" "),t("h3",{attrs:{id:"_28-string-s-new-string-xyz-创建了几个字符串对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-string-s-new-string-xyz-创建了几个字符串对象"}},[a._v("#")]),a._v(" 28. "),t("code",[a._v('String s = new String("xyz");')]),a._v("创建了几个字符串对象？")]),a._v(" "),t("p",[a._v("两个对象，一个是常量池的 "),t("code",[a._v('"xyz"')]),a._v(" ，一个是用 "),t("code",[a._v("new")]),a._v(" 创建在堆上的对象。")]),a._v(" "),t("h3",{attrs:{id:"_29-接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class"}},[a._v("#")]),a._v(" 29. 接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？")]),a._v(" "),t("p",[a._v("接口可以继承接口，而且支持多重继承。抽象类可以实现(implements)接口，抽象类可继承具体类也可以继承抽象类。")]),a._v(" "),t("h3",{attrs:{id:"_30-error和exception有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-error和exception有什么区别"}},[a._v("#")]),a._v(" 30. Error和Exception有什么区别？")]),a._v(" "),t("p",[a._v("Error表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。")]),a._v(" "),t("h3",{attrs:{id:"_31-运行时异常与受检异常有何异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-运行时异常与受检异常有何异同"}},[a._v("#")]),a._v(" 31. 运行时异常与受检异常有何异同？")]),a._v(" "),t("p",[a._v("运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。")]),a._v(" "),t("p",[a._v("受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。")]),a._v(" "),t("h3",{attrs:{id:"_32-try-里有一个-return-语句-那么紧跟在这个-try-后的-finally-里的代码会不会被执行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-try-里有一个-return-语句-那么紧跟在这个-try-后的-finally-里的代码会不会被执行"}},[a._v("#")]),a._v(" 32. "),t("code",[a._v("try{}")]),a._v(" 里有一个 "),t("code",[a._v("return")]),a._v(" 语句，那么紧跟在这个 "),t("code",[a._v("try")]),a._v(" 后的 "),t("code",[a._v("finally{}")]),a._v(" 里的代码会不会被执行？")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("finally` 会执行，在方法返回调用者前执行。\n")])])]),t("h3",{attrs:{id:"_33-list、set、map是否继承自collection接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-list、set、map是否继承自collection接口"}},[a._v("#")]),a._v(" 33. List、Set、Map是否继承自Collection接口？")]),a._v(" "),t("p",[a._v("List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别")]),a._v(" "),t("h3",{attrs:{id:"_34-thread类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-thread类的-sleep-方法和对象的-wait-方法都可以让线程暂停执行-它们有什么区别"}},[a._v("#")]),a._v(" 34. Thread类的 "),t("code",[a._v("sleep()")]),a._v(" 方法和对象的 "),t("code",[a._v("wait()")]),a._v(" 方法都可以让线程暂停执行，它们有什么区别？")]),a._v(" "),t("p",[t("code",[a._v("sleep()")]),a._v("方法是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复。")]),a._v(" "),t("p",[t("code",[a._v("wait()")]),a._v("是Object类的方法，调用对象的 "),t("code",[a._v("wait()")]),a._v(" 方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的 "),t("code",[a._v("notify()")]),a._v(" 方法（或 "),t("code",[a._v("notifyAll()")]),a._v(" 方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。")]),a._v(" "),t("h3",{attrs:{id:"_35-线程的-sleep-方法和-yield-方法有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-线程的-sleep-方法和-yield-方法有什么区别"}},[a._v("#")]),a._v(" 35. 线程的 sleep() 方法和 yield() 方法有什么区别？")]),a._v(" "),t("ol",[t("li",[t("code",[a._v("sleep()")]),a._v("方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；"),t("code",[a._v("yield()")]),a._v("方法只会给相同优先级或更高优先级的线程以运行的机会；")]),a._v(" "),t("li",[a._v("线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；")]),a._v(" "),t("li",[t("code",[a._v("sleep()")]),a._v("方法声明抛出InterruptedException，而yield()方法没有声明任何异常；")]),a._v(" "),t("li",[t("code",[a._v("sleep()")]),a._v("方法比 yield() 方法（跟操作系统CPU调度相关）具有更好的可移植性。")])]),a._v(" "),t("h3",{attrs:{id:"_36-学习资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-学习资料"}},[a._v("#")]),a._v(" 36. 学习资料")]),a._v(" "),t("ol",[t("li",[a._v("https://hadyang.github.io/interview/")]),a._v(" "),t("li",[a._v("https://snailclimb.gitee.io/javaguide/#/")]),a._v(" "),t("li",[a._v("https://github.com/xbox1994/Java-Interview")]),a._v(" "),t("li",[a._v("https://github.com/AobingJava/JavaFamily")])])])}),[],!1,null,null,null);t.default=e.exports}}]);