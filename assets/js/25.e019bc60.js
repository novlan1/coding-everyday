(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{531:function(_,v,t){_.exports=t.p+"assets/img/b_tree.4ef054a4.png"},532:function(_,v,t){_.exports=t.p+"assets/img/b_plus_tree.416a1b17.png"},533:function(_,v,t){_.exports=t.p+"assets/img/b_multiply_tree.25e6b284.png"},667:function(_,v,t){"use strict";t.r(v);var e=t(42),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("ul",[e("li",[e("a",{attrs:{href:"#b-bb%E6%A0%91"}},[_._v("B-，B+，B*树")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#b%E6%A0%91"}},[_._v("B树")])]),_._v(" "),e("li",[e("a",{attrs:{href:"#b%E6%A0%91-1"}},[_._v("B+树")])]),_._v(" "),e("li",[e("a",{attrs:{href:"#b%E6%A0%91-2"}},[e("code",[_._v("B*")]),_._v("树")]),_._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#b%E6%A0%91%E5%AE%9A%E4%B9%89%E4%BA%86%E9%9D%9E%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%AA%E6%95%B0%E8%87%B3%E5%B0%91%E4%B8%BA23m%E5%8D%B3%E5%9D%97%E7%9A%84%E6%9C%80%E4%BD%8E%E4%BD%BF%E7%94%A8%E7%8E%87%E4%B8%BA23%E4%BB%A3%E6%9B%BFb%E6%A0%91%E7%9A%8412"}},[e("code",[_._v("B*")]),_._v("树定义了非叶子结点关键字个数至少为"),e("code",[_._v("(2/3)*M")]),_._v("，即块的最低使用率为2/3（代替B+树的1/2）；")])])])]),_._v(" "),e("li",[e("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[_._v("总结")])])])])]),_._v(" "),e("h2",{attrs:{id:"b-b-b-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-b-b-树"}},[_._v("#")]),_._v(" B-，B+，B*树")]),_._v(" "),e("h3",{attrs:{id:"b树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b树"}},[_._v("#")]),_._v(" B树")]),_._v(" "),e("p",[_._v('首先注意：B树就是B-树，"-"是个连字符号，不是减号。\nB-树是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance)')]),_._v(" "),e("p",[_._v("一棵m阶B树("),e("code",[_._v("balanced tree of order m")]),_._v(")是一棵平衡的m路搜索树。它或者是空树，或者是满足下列性质的树：")]),_._v(" "),e("ol",[e("li",[_._v("根结点至少有两个子女。")]),_._v(" "),e("li",[_._v("每个中间节点都包含"),e("code",[_._v("k-1")]),_._v("个元素和"),e("code",[_._v("k")]),_._v("个孩子，其中 "),e("code",[_._v("m/2 <= k <= m")])]),_._v(" "),e("li",[_._v("每一个叶子节点都包含"),e("code",[_._v("k-1")]),_._v("个元素，其中 "),e("code",[_._v("m/2 <= k <= m")])]),_._v(" "),e("li",[_._v("所有的叶子结点都位于同一层。")]),_._v(" "),e("li",[_._v("每个节点中的元素从小到大排列，节点当中"),e("code",[_._v("k-1")]),_._v("个元素正好是"),e("code",[_._v("k")]),_._v("个孩子包含的元素的值域分界线。")])]),_._v(" "),e("p",[_._v("如：（M=3）\n"),e("img",{attrs:{src:t(531),alt:"B tree"}})]),_._v(" "),e("p",[_._v("B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；")]),_._v(" "),e("p",[_._v("B-树的特性：")]),_._v(" "),e("ol",[e("li",[_._v("关键字集合分布在整颗树中；")]),_._v(" "),e("li",[_._v("任何一个关键字出现且只出现在一个结点中；")]),_._v(" "),e("li",[_._v("搜索有可能在非叶子结点结束；")]),_._v(" "),e("li",[_._v("其搜索性能等价于在"),e("strong",[_._v("关键字全集内做一次二分查找")]),_._v("；")]),_._v(" "),e("li",[_._v("自动层次控制；")])]),_._v(" "),e("h3",{attrs:{id:"b-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[_._v("#")]),_._v(" B+树")]),_._v(" "),e("p",[_._v("B+树是应文件系统所需而出的一种B-树的变型树。一棵m阶的B+树和m阶的B-树的差异在于：")]),_._v(" "),e("ol",[e("li",[_._v("有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，"),e("strong",[_._v("所有数据都保存在叶子节点")]),_._v("。")]),_._v(" "),e("li",[_._v("所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。")]),_._v(" "),e("li",[_._v("所有的非终端结点可以看成是索引部分，结点中仅含其子树（根结点）中的最大（或最小）关键字。")])]),_._v(" "),e("p",[_._v("通常在B+树上有两个头指针，一个指向根结点，一个指向关键字最小的叶子结点。")]),_._v(" "),e("p",[e("img",{attrs:{src:t(532),alt:"B+树"}})]),_._v(" "),e("p",[_._v("B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其"),e("strong",[_._v("性能也等价于在关键字全集做一次二分查找")]),_._v("；")]),_._v(" "),e("h3",{attrs:{id:"b-树-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树-2"}},[_._v("#")]),_._v(" "),e("code",[_._v("B*")]),_._v("树")]),_._v(" "),e("p",[_._v("是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；")]),_._v(" "),e("p",[e("img",{attrs:{src:t(533),alt:"B*树"}})]),_._v(" "),e("h4",{attrs:{id:"b-树定义了非叶子结点关键字个数至少为-2-3-m-即块的最低使用率为2-3-代替b-树的1-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树定义了非叶子结点关键字个数至少为-2-3-m-即块的最低使用率为2-3-代替b-树的1-2"}},[_._v("#")]),_._v(" "),e("code",[_._v("B*")]),_._v("树定义了非叶子结点关键字个数至少为"),e("code",[_._v("(2/3)*M")]),_._v("，即块的最低使用率为2/3（代替B+树的1/2）；")]),_._v(" "),e("p",[_._v("B+树的分裂：")]),_._v(" "),e("ol",[e("li",[_._v("当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；")]),_._v(" "),e("li",[_._v("B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；")])]),_._v(" "),e("p",[_._v("B*树的分裂：")]),_._v(" "),e("ol",[e("li",[_._v("当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；")]),_._v(" "),e("li",[_._v("如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；")])]),_._v(" "),e("p",[_._v("所以，B*树分配新结点的概率比B+树要低，空间使用率更高；")]),_._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),e("p",[_._v("B-树（或B树）是一种平衡的多路查找（又称排序）树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance)")]),_._v(" "),e("ol",[e("li",[e("code",[_._v("B+")]),_._v(" 树的叶子节点链表结构相比于 B- 树，"),e("strong",[_._v("便于扫库和范围检索")]),_._v("。")]),_._v(" "),e("li",[e("code",[_._v("B+")]),_._v("树支持"),e("code",[_._v("range-query")]),e("strong",[_._v("（区间查询）非常方便")]),_._v("，而B树不支持。这是数据库选用"),e("code",[_._v("B+")]),_._v("树的最主要原因。")]),_._v(" "),e("li",[e("code",[_._v("B*")]),_._v("树 是B+树的变体，"),e("strong",[e("code",[_._v("B*")]),_._v("树分配新结点的概率比"),e("code",[_._v("B+")]),_._v("树要低，空间使用率更高")]),_._v("；")])]),_._v(" "),e("p",[_._v("参考资料：")]),_._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://blog.csdn.net/aqzwss/article/details/53074186",target:"_blank",rel:"noopener noreferrer"}},[_._v("B-树，B+树，B*树详解"),e("OutboundLink")],1)]),_._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/bigtree_3721/article/details/73632405",target:"_blank",rel:"noopener noreferrer"}},[_._v("B-树，B+树与B*树的优缺点比较"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);