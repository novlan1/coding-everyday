(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{400:function(_,s,t){"use strict";t.r(s);var v=t(14),a=Object(v.a)({},(function(){var _=this,s=_._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("ul",[s("li",[s("a",{attrs:{href:"#1-sql-%E6%B3%A8%E5%85%A5"}},[_._v("1. SQL 注入")]),_._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#11-%E9%98%B2%E5%BE%A1"}},[_._v("1.1. 防御")])])])]),_._v(" "),s("li",[s("a",{attrs:{href:"#2-xss%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBcross-site-scripting"}},[_._v("2. XSS：跨站脚本攻击（"),s("code",[_._v("Cross-site scripting")]),_._v("）")]),_._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#21-xss%E9%98%B2%E8%8C%83"}},[_._v("2.1. XSS防范")])])])]),_._v(" "),s("li",[s("a",{attrs:{href:"#3-csrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0cross-site-request-forgery"}},[_._v("3. CSRF：跨站请求伪造（"),s("code",[_._v("Cross-site request forgery")]),_._v("）")]),_._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#301-cookie-%E4%B8%8D%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA-domain-%E4%B8%8B%E6%89%8D%E4%BC%9A%E6%90%BA%E5%B8%A6%E5%90%97%E4%B8%BA%E5%95%A5%E7%BD%91%E7%AB%99b-%E5%8F%AF%E4%BB%A5%E5%B8%A6%E7%9D%80%E7%BD%91%E7%AB%99a%E7%9A%84-cookie-%E8%AF%B7%E6%B1%82-a-%E5%91%A2"}},[_._v("3.0.1. cookie 不是同一个 domain 下才会携带吗？为啥网站B 可以带着网站A的 cookie 请求 A 呢？")])]),_._v(" "),s("li",[s("a",{attrs:{href:"#302-b-%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0a%E7%BD%91%E7%AB%99%E5%88%B0cookie%E5%90%97"}},[_._v("3.0.2. B 网站可以获取到A网站到cookie吗？")])]),_._v(" "),s("li",[s("a",{attrs:{href:"#303-%E4%BB%8E-b-%E8%BF%99%E4%B8%AA%E7%AB%99%E7%82%B9%E8%AE%BF%E9%97%AE-a-%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%B7%B2%E7%BB%8F%E8%B7%A8%E5%9F%9F%E4%BA%86%E6%80%8E%E4%B9%88%E8%83%BD%E8%AE%BF%E9%97%AE%E9%80%9A%E5%91%A2"}},[_._v("3.0.3. 从 B 这个站点访问 A 这个接口，已经跨域了，怎么能访问通呢？")])]),_._v(" "),s("li",[s("a",{attrs:{href:"#31-csrf%E7%9A%84%E9%98%B2%E5%BE%A1"}},[_._v("3.1. CSRF的防御")])])])]),_._v(" "),s("li",[s("a",{attrs:{href:"#4-%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81"}},[_._v("4. 点击劫持")]),_._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#41-x-frame-options"}},[_._v("4.1. X-FRAME-OPTIONS")])]),_._v(" "),s("li",[s("a",{attrs:{href:"#42-js-%E9%98%B2%E5%BE%A1"}},[_._v("4.2. JS 防御")])])])]),_._v(" "),s("li",[s("a",{attrs:{href:"#5-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB"}},[_._v("5. 中间人攻击")])])]),_._v(" "),s("h2",{attrs:{id:"_1-sql-注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-sql-注入"}},[_._v("#")]),_._v(" 1. SQL 注入")]),_._v(" "),s("p",[_._v("所谓 SQL 注入，就是通过把 "),s("strong",[_._v("SQL 命令")]),_._v("插入到 Web "),s("strong",[_._v("表单")]),_._v("提交或输入"),s("strong",[_._v("域名")]),_._v("或"),s("strong",[_._v("页面请求的查询字符串")]),_._v("，后台执行 SQL 语句时"),s("strong",[_._v("直接把前端传入的字段拿来做 SQL 查询")]),_._v("。")]),_._v(" "),s("h3",{attrs:{id:"_1-1-防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-防御"}},[_._v("#")]),_._v(" 1.1. 防御")]),_._v(" "),s("ul",[s("li",[_._v("永远不要信任用户的输入。")]),_._v(" "),s("li",[s("strong",[_._v("永远不要使用动态拼装 sql，使用ORM可以大大降低sql注入风险")])]),_._v(" "),s("li",[_._v("不要把机密信息直接存放")])]),_._v(" "),s("h2",{attrs:{id:"_2-xss-跨站脚本攻击-cross-site-scripting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-xss-跨站脚本攻击-cross-site-scripting"}},[_._v("#")]),_._v(" 2. XSS：跨站脚本攻击（"),s("code",[_._v("Cross-site scripting")]),_._v("）")]),_._v(" "),s("ol",[s("li",[_._v("比如在新浪博客中写一篇文章，同时偷偷插入一段"),s("code",[_._v("<script>")])]),_._v(" "),s("li",[_._v("攻击代码中，获取cookie，发送到服务器")]),_._v(" "),s("li",[_._v("发布博客，有人查看博客内容")]),_._v(" "),s("li",[_._v("会把查看者的cookie发送到攻击者的服务器")])]),_._v(" "),s("h3",{attrs:{id:"_2-1-xss防范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-xss防范"}},[_._v("#")]),_._v(" 2.1. XSS防范")]),_._v(" "),s("ul",[s("li",[_._v("将"),s("code",[_._v("<")]),_._v("和"),s("code",[_._v(">")]),_._v("替换")])]),_._v(" "),s("h2",{attrs:{id:"_3-csrf-跨站请求伪造-cross-site-request-forgery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-csrf-跨站请求伪造-cross-site-request-forgery"}},[_._v("#")]),_._v(" 3. CSRF：跨站请求伪造（"),s("code",[_._v("Cross-site request forgery")]),_._v("）")]),_._v(" "),s("p",[_._v("CSRF攻击：攻击者盗用了你的身份，以你的名义向第三方网站发送恶意请求。 CRSF能做的事情包括利用你的身份发邮件、发短信、进行交易转账等，甚至盗取你的账号。")]),_._v(" "),s("ol",[s("li",[_._v("首先用户C浏览并登录了受信任站点A；")]),_._v(" "),s("li",[_._v("登录信息验证通过以后，站点A会在返回给浏览器的信息中带上已登录的cookie，cookie信息会在浏览器端保存一定时间（根据服务端设置而定）；")]),_._v(" "),s("li",[_._v("完成这一步以后，用户在没有登出（清除站点A的cookie）站点A的情况下，访问恶意站点B；")]),_._v(" "),s("li",[_._v("这时恶意站点 B的某个页面向站点A发起请求，而这个请求会带上浏览器端所保存的站点A的cookie；")]),_._v(" "),s("li",[_._v("站点A根据请求所带的cookie，判断此请求为用户C所发送的。")])]),_._v(" "),s("p",[_._v("受害者只需要做下面两件事情，攻击者就能够完成CSRF攻击：")]),_._v(" "),s("ol",[s("li",[_._v("登录受信任站点 A，并在本地"),s("strong",[_._v("生成cookie")]),_._v("；")]),_._v(" "),s("li",[_._v("在"),s("strong",[_._v("不登出站点A（清除站点A的cookie）"),s("strong",[_._v("的情况下，访问")]),_._v("恶意站点B")]),_._v("。")])]),_._v(" "),s("h4",{attrs:{id:"_3-0-1-cookie-不是同一个-domain-下才会携带吗-为啥网站b-可以带着网站a的-cookie-请求-a-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-1-cookie-不是同一个-domain-下才会携带吗-为啥网站b-可以带着网站a的-cookie-请求-a-呢"}},[_._v("#")]),_._v(" 3.0.1. cookie 不是同一个 domain 下才会携带吗？为啥网站B 可以带着网站A的 cookie 请求 A 呢？")]),_._v(" "),s("p",[_._v("因为B里面嵌入了A的地址，所以向B发起请求后，会自动向A发起请求，相当于浏览器做了两次请求。")]),_._v(" "),s("h4",{attrs:{id:"_3-0-2-b-网站可以获取到a网站到cookie吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-2-b-网站可以获取到a网站到cookie吗"}},[_._v("#")]),_._v(" 3.0.2. B 网站可以获取到A网站到cookie吗？")]),_._v(" "),s("p",[_._v("不能，也不需要")]),_._v(" "),s("h4",{attrs:{id:"_3-0-3-从-b-这个站点访问-a-这个接口-已经跨域了-怎么能访问通呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-3-从-b-这个站点访问-a-这个接口-已经跨域了-怎么能访问通呢"}},[_._v("#")]),_._v(" 3.0.3. 从 B 这个站点访问 A 这个接口，已经跨域了，怎么能访问通呢？")]),_._v(" "),s("p",[_._v("通过 img 标签的 src 属性发起的请求是不遵循同源策略的，这也是跨域的另一个解决方法Jsonp 的实现原理")]),_._v(" "),s("h3",{attrs:{id:"_3-1-csrf的防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-csrf的防御"}},[_._v("#")]),_._v(" 3.1. CSRF的防御")]),_._v(" "),s("ol",[s("li",[_._v("尽量使用"),s("code",[_._v("POST")]),_._v("，限制"),s("code",[_._v("GET")])]),_._v(" "),s("li",[_._v("将"),s("code",[_._v("cookie")]),_._v("设置为"),s("code",[_._v("HttpOnly")])]),_._v(" "),s("li",[_._v("增加"),s("code",[_._v("token")]),_._v(" (在请求中放入攻击者所不能伪造的信息，并且该信息不存在于cookie之中)")]),_._v(" "),s("li",[_._v("通过"),s("code",[_._v("Referer")]),_._v("识别")]),_._v(" "),s("li",[_._v("在 HTTP 头中自定义属性并验证")])]),_._v(" "),s("h2",{attrs:{id:"_4-点击劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-点击劫持"}},[_._v("#")]),_._v(" 4. 点击劫持")]),_._v(" "),s("p",[_._v("点击劫持（"),s("code",[_._v("Click Jacking")]),_._v("）是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 "),s("code",[_._v("iframe")]),_._v(" 设置为透明，在页面中透出一个按钮诱导用户点击。")]),_._v(" "),s("p",[_._v("对于这种攻击方式，推荐防御的方法有两种。")]),_._v(" "),s("ul",[s("li",[s("code",[_._v("X-FRAME-OPTIONS")])]),_._v(" "),s("li",[_._v("JS 防御")])]),_._v(" "),s("h3",{attrs:{id:"_4-1-x-frame-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-x-frame-options"}},[_._v("#")]),_._v(" 4.1. X-FRAME-OPTIONS")]),_._v(" "),s("p",[s("code",[_._v("X-FRAME-OPTIONS")]),_._v(" 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。")]),_._v(" "),s("p",[_._v("该响应头有三个值可选，分别是")]),_._v(" "),s("ul",[s("li",[s("code",[_._v("DENY")]),_._v("，表示页面不允许通过"),s("code",[_._v("iframe")]),_._v("的方式展示")]),_._v(" "),s("li",[s("code",[_._v("SAMEORIGIN")]),_._v("，表示页面可以在相同域名下通过"),s("code",[_._v("iframe")]),_._v("的方式展示")]),_._v(" "),s("li",[s("code",[_._v("ALLOW-FROM")]),_._v("，表示页面可以在指定来源的"),s("code",[_._v("iframe")]),_._v("中展示")])]),_._v(" "),s("h3",{attrs:{id:"_4-2-js-防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-js-防御"}},[_._v("#")]),_._v(" 4.2. JS 防御")]),_._v(" "),s("p",[_._v("因为普通页面的top对象为window，而iframe的top对象不等于window对象，可以在JS代码中：")]),_._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("if")]),_._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[_._v("!==")]),_._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("location "),s("span",{pre:!0,attrs:{class:"token operator"}},[_._v("==")]),_._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("location\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])]),s("p",[_._v("这样如果存在嵌套的iframe，页面就会进行跳转，避免的点击劫持。\n但是这种防御方式并不完善，如果攻击者设置ifame的属性"),s("code",[_._v('sandbox="allow-forms"')]),_._v(" 时防御就失效")]),_._v(" "),s("h2",{attrs:{id:"_5-中间人攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-中间人攻击"}},[_._v("#")]),_._v(" 5. 中间人攻击")]),_._v(" "),s("p",[_._v("中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。")]),_._v(" "),s("p",[_._v("通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。")]),_._v(" "),s("p",[_._v("当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。")])])}),[],!1,null,null,null);s.default=a.exports}}]);