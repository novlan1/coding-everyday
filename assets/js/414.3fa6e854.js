(window.webpackJsonp=window.webpackJsonp||[]).push([[414],{718:function(e,n,t){"use strict";t.r(n);var i=t(25),r=Object(i.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("问题背景\n表单参数中有单个字段（需要校验是否存在、是否合法），也有数组对象字段（数组中每个对象需要验证里面的属性是否存在，同时还有时间格式、数值区间格式、字符串格式的校验以及各种大小限制），需要在发 POST 请求前对所有参数做校验。")]),e._v(" "),n("p",[e._v("本文结尾有表单参数结构以及重构前大量的 if-else ，可以感受下，已经算很复杂的了。")]),e._v(" "),n("p",[e._v("调研阶段\n从宏观方面来讲其实是简化 if-else 的复杂度，抽离出公共逻辑，对不同情况进行合理封装，提高代码可读性。所以我从多个渠道收集到对于 if-else 嵌套的解决方案，总结出如下：")]),e._v(" "),n("p",[e._v("lookup（查找表）\n分离数据配置与业务逻辑，简单来说就是调用两者间的映射关系来实现需求，以银行信用的示例来说明：")]),e._v(" "),n("p",[e._v("function showGrace(grace,level,levelForGrace) {\nfor(let i=0;i<level.length;i++){\nif(grace>=level[i]){\nreturn levelForGrace[i];\n}\n}\n//如果不存在，那么就是分数很低，返回最后一个\nreturn levelForGrace[levelForGrace.length-1];\n}\nlet graceForLevel=[700,650,600,550];\nlet levelText=['信用极好','信用优秀','信用良好','信用中等','信用较差'];\nshowGrace(696,graceForLevel,levelText) // \"信用优秀\"\n优点：")]),e._v(" "),n("p",[e._v("摆脱了编写重复 if-else 的困境\n相比较于 switch 更加灵活，可动态添加映射关系\n缺点：")]),e._v(" "),n("p",[e._v("只适用于简单条件判断，无法解决嵌套的情况\n策略模式\n针对一组算法（策略），将每个算法（策略）分别封装在具有共同接口的独立类中，根据实际情况选择不同的策略完成任务。")]),e._v(" "),n("p",[e._v("以绩效等级和薪资计算奖金为说明：")]),e._v(" "),n("p",[e._v("let calculateBouns = (level,salary)=>{\nif(level=='A'){\nreturn salary * 1.4;\n}else if(level=='B'){\nreturn salary * 1.3;\n}else if(level=='C'){\nreturn salary * 1.2;\n}else{\nreturn salary;\n}\n}\nconsole.log(calculateBouns('A', 8000)); //11200\nconsole.log(calculateBouns('C', 8000)); //9600")]),e._v(" "),n("p",[e._v("/*\n*********** 重构后 ***********\n*/\n//策略对象\nclass ruleA{\ncalculate(salary){\nreturn salary * 1.4;\n}\n}\nclass ruleB{\ncalculate(salary){\nreturn salary * 1.3;\n}\n}\nclass ruleC{\ncalculate(salary){\nreturn salary * 1.2;\n}\n}")]),e._v(" "),n("p",[e._v("//奖金类\nclass Bouns{\nconstructor(){\nthis.salary = null;\nthis.level = null;\n}\nsetLevel(level){\nthis.level = level;\n}\nsetSalary(salary){\nthis.salary = salary;\n}\ngetBouns(){\nreturn this.level.calculate(this.salary);\n}\n}")]),e._v(" "),n("p",[e._v("let tom = new Bouns(),jerry = new Bouns();\n//设置薪资\ntom.setSalary(8000);\njerry.setSalary(10000);\n//设置策略对象\ntom.setLevel(new ruleA());\njerry.setLevel(new ruleA());\nconsole.log(tom.getBouns()); //11200\nconsole.log(jerry.getBouns()); //14000")]),e._v(" "),n("p",[e._v("jerry.setLevel(new ruleB());\nconsole.log(jerry.getBouns()); //13000\n当然还有一些组件库，如 Ant Design 的表单校验也是应用的这种模式，这里不细说了。")]),e._v(" "),n("p",[e._v("优点：")]),e._v(" "),n("p",[e._v("策略模式利用组合、委托等技术和思想，可以避免很多if条件语句\n策略模式提供了开放-封闭原则，使代码更容易理解和拓展\n缺点：")]),e._v(" "),n("p",[e._v("客户端必须知道所有的策略类，并自行决定使用哪一个策略类。\n策略模式将产生很多策略类，导致对象数量增加。\n应用场景：")]),e._v(" "),n("p",[e._v("如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。\n一个系统需要动态地在几种算法中选择一种。\n不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。\n状态机模式\n一个状态对应一个行为，封装在一个类里，状态与状态间、行为与行为间彼此独立互不干扰，通过改变状态来改变不同的行为。")]),e._v(" "),n("p",[e._v("红绿灯示例：")]),e._v(" "),n("p",[e._v("var trafficLight = (function () {\nvar currentLight = null;\nreturn {\nchange: function (light) {\ncurrentLight = light;\ncurrentLight.go();\n}\n}\n})();")]),e._v(" "),n("p",[e._v('function RedLight() { }\nRedLight.prototype.go = function () {\nconsole.log("this is red light");\n}')]),e._v(" "),n("p",[e._v('function GreenLight() { }\nGreenLight.prototype.go = function () {\nconsole.log("this is green light");\n}')]),e._v(" "),n("p",[e._v('function YellowLight() { }\nYellowLight.prototype.go = function () {\nconsole.log("this is yellow light");\n}')]),e._v(" "),n("p",[e._v("trafficLight.change(new RedLight());\ntrafficLight.change(new YellowLight());\n优点：")]),e._v(" "),n("p",[e._v("一个状态对应一种行为，封装在一个类里，更直观清晰，增改方便")]),e._v(" "),n("ol",[n("li",[e._v("状态与状态间，行为与行为间彼此独立互不干扰")]),e._v(" "),n("li",[e._v("避免因事物对象本身不断膨胀而导致条件判断语句过多")])]),e._v(" "),n("p",[e._v("缺点：")]),e._v(" "),n("ol",[n("li",[e._v("需要将事物的不同状态以及对应的行为拆分出来，如果没有拆分标准，有时候会导致拆分得很细，造成过度设计，没有抽象概念，缺少公共行为的复用。")]),e._v(" "),n("li",[e._v("必然会增加事物类和动作类的个数，有时候动作类再根据单一原则，按照功能拆成几个类，会反而使得代码混乱，可读性降低。")])]),e._v(" "),n("p",[e._v("应用场景：")]),e._v(" "),n("ol",[n("li",[e._v("一个由一个或多个动态变化的属性导致发生不同行为的对象，在与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化，那么这个对象，就是有状态的对象")]),e._v(" "),n("li",[e._v("代码中包含大量与对象状态有关的条件语句，像是if else 或switch case 语句，且这些条件执行与否依赖于该对象的状态。")])]),e._v(" "),n("p",[e._v("职责链模式")]),e._v(" "),n("p",[e._v("将能够处理同一类请求的对象连成一条链，对链上的对象进行逐一判断是否有能力处理该请求，如果能则就处理，如果不能，则传给链上的下一个对象，直到有一个对象处理它为止。")]),e._v(" "),n("p",[e._v("const rules = [\n{\nmatch: function (a, b, c) { /* ... "),n("em",[e._v("/ },\naction: function (a, b, c) { /")]),e._v(" ... "),n("em",[e._v("/ }\n},\n{\nmatch: function (a, b, c) { /")]),e._v(" ... "),n("em",[e._v("/ },\naction: function (a, b, c) { /")]),e._v(" ... "),n("em",[e._v("/ }\n},\n{\nmatch: function (a, b, c) { /")]),e._v(" ... "),n("em",[e._v("/ },\naction: function (a, b, c) { /")]),e._v(" ... */ }\n}\n// ...\n]")]),e._v(" "),n("p",[e._v("function demo (a, b, c) {\nfor (let i = 0; i < rules.length; i++) {\nif (rules[i].match(a, b, c)) {\nreturn rules[i].action(a, b, c)\n}\n}\n}\n应用场景：")]),e._v(" "),n("p",[e._v("每个 else-if 分支都包含了复杂的条件判断，且其对执行的先后顺序有所要求，最后仅进入其中一个\n解决思路\n对当前问题场景进行分析\n参数结构无规律性（有单个对象，也有数组对象里面又嵌套了数组对象）\n有 if 嵌套，根据条件字段进入不同的 if 语句（数值区间、相对时间、绝对时间）\n对参数校验有先后顺序\n验证一旦不通过则不进行下一步的校验\n初步方案：职责链模式 + Promise\n使用职责链对象把满足条件的校验方法动态存储在数组中，调用 execute 方法对数组进行遍历执行，一旦校验不通过则中断遍历，返回错误信息。")]),e._v(" "),n("p",[e._v("// 校验职责链对象\nclass ValidateChain {\nconstructor() {\nthis.chain = []\nthis.condition = true\n}\n// if条件分支\nmatch(condition = true) {\nthis.condition = condition\nreturn this\n}\n// 动态添加校验方法\naddValidator(validator) {\nif (!this.condition) return this\nthis.chain.push(validator)\nreturn this\n}\n// 执行所有校验方法\nexecute() {\nreturn new Promise((resolve, reject) => {\nfor (let validator of this.chain) {\nconst errMsg = validator()\nif (errMsg) {\nreject(errMsg)\n}\n}\nresolve()\n})\n}\n}")]),e._v(" "),n("p",[e._v("validateChain // 校验行为满足时间\n.match(behaviorTime.time_type === 'opp')\n.addValidator(() => isEmpty(behaviorTime.time_opp_cnt) && '请填写完行为满足时间！')\n.addValidator(() => !validateNoNegativeInt(behaviorTime.time_opp_cnt) && '行为满足时间只能为非负整数！')")]),e._v(" "),n("p",[e._v("...")]),e._v(" "),n("p",[e._v("for(let bes of behaviorEventSelects) {\nvalidateChain\n.match()\n.addValidator(() => !dataResourceSelects.find(el => el.data_resource_id == bes.data_resource_id) && '请确认行为满足中的事件所属数据源都被选中！')\n.addValidator(() => isSomeEmpty([bes.event_code, bes.op, bes.times]) && '请填写完行为满足事件！')\n.addValidator(() => !validateNoNegativeInt(bes.times) && '行为满足事件次数只能为非负整数！')")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("const fieldSelects = bes.fieldSelects\nif (Array.isArray(fieldSelects)) {\n    for (let el of fieldSelects) {\n        validateChain\n            .match()\n            .addValidator(() => isSomeEmpty([el.field_key, el.op]) && '请填写行为满足字段！')\n            .match(el.field_type === 'string') // 字段类型为string类型\n            .addValidator(() => isEmpty(el.op_value) && !['-null', '-nnll'].includes(el.op) && '请填写完行为满足字段！')\n            .match(el.field_type === 'number') // 字段类型为number类型\n            ...\n    }\n}\n")])])]),n("p",[e._v("}\nvalidateChain\n.execute()\n.then(() => {\n// 校验通过\n})\n.catch(errMsg => {\n// 校验失败\n})\n})\n这个方案虽然让校验顺序更清晰，但是耦合度还是太强，不利于扩展。")]),e._v(" "),n("p",[e._v("解决方案：策略模式 + 职责链模式 + Promise\n为什么不用状态机模式而用策略模式？")]),e._v(" "),n("p",[e._v("状态机模式旨在根据不同的状态触发不用的行为，而策略模式是由客户端自己决定调用哪些策略，从功能上说策略模式在目前场景下更适用。")]),e._v(" "),n("p",[e._v("策略模式扮演角色：\n将表单区域分为多个策略对象，每个策略对象继承共同的祖先对象，祖先对象有公共的校验方法，每个策略对象将原先的 if 条件判断划分为多个校验方法，用 init 方法调用职责链对象，按顺序添加策略方法。\n职责链模式扮演角色：\n采用增量式链式调用，动态添加来自策略对象的策略方法。")]),e._v(" "),n("p",[e._v("// 公共策略对象\nclass BaseRule {\n// 校验空\nvalidateEmpty = (val, msg) => () => {\nreturn isEmpty(val) && msg\n}\n// 校验一定数量字段是否为空\nvalidateSomeEmpty = (val, msg) => () => {\nreturn isSomeEmpty(val) && msg\n}\n// 校验非负数\nvalidateNoNegative = (val, msg) => () => {\nreturn !isNoNegative(val) && msg\n}\n// 校验数值范围是否超出\nvalidateNumRange = (min, max, range, msg) => () => {\nreturn (parseFloat(min) <= range[0] || parseFloat(max) > range[1]) && msg\n}\n// 校验最小值是否小于最大值\nvalidateSize = (min, max, msg) => () => {\nreturn +min >= +max && msg\n}\n// 校验绝对时间大小\nvalidateStartTimeAndEndTime = (start, end, msg) => () => {\nreturn !moment(+start).isBefore(moment(+end)) && msg\n}\n}\n// 行为满足策略对象\nclass BehaviorEventRule extends BaseRule {\nconstructor({\nselects, dataResourceSelects, time\n}, chain) {\nsuper()\nthis.selects = selects\nthis.dataResourceSelects = dataResourceSelects\nthis.time = time\nthis.chain = chain\nthis.hasTimeMsg = '请填写完行为满足时间！'\nthis.isStartTimeAndEndTimeMsg = '行为满足开始时间要小于结束时间！'\nthis.isOppTimeNoNegativeMsg = '行为满足时间只能为非负整数！'\nthis.hasDataResourceSelectedMsg = '请确认行为满足中的事件所属数据源都被选中！'\nthis.isEventFilledMsg = '请填写完行为满足事件！'\nthis.isEventTimeNoNegativeMsg = '行为满足事件次数只能为非负整数！'\nthis.isFieldFilledMsg = '请填写完行为满足字段！'\nthis.isOverNumRangeMsg = '行为满足字段超出数值范围！'\nthis.isValidBetweenTimeMsg = '行为满足字段绝对时间非法！'\nthis.isMinLessThanMaxMsg = '行为满足字段最小值应小于最大值！'\nthis.isFieldStartTimeAndEndTimeMsg = '行为满足字段中开始时间要小于结束时间！'\n}")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("// 校验事件所属事件源都被选中\nhasDataResourceSelects = event => () => {\n        return !this.dataResourceSelects.find(el => el.data_resource_id == event.data_resource_id) && this.hasDataResourceSelectedMsg\n    }\n    // 校验string类型字段是否填写\nhasStringFieldFilled = field => () => {\n        return isEmpty(field.op_value) && !['-null', '-nnll'].includes(field.op) && this.isFieldFilledMsg\n    }\n    // 校验绝对时间字段格式YYYY-MM-DD\nisValidBetweenTime = (startTime, endTime) => () => {\n        return !(invalidDateTime('YYYY-MM-DD', startTime) && invalidDateTime('YYYY-MM-DD', endTime)) && this.isValidBetweenTimeMsg\n    }\n    // 规则初始化\ninit() {\n    // 校验相对时间和绝对时间\n    this.chain\n        .match(this.time.time_type === 'opp')\n        .addValidator(this.validateEmpty(this.time.time_opp_cnt, this.hasTimeMsg))\n        .addValidator(this.validateNoNegative(this.time.time_opp_cnt, this.isOppTimeNoNegativeMsg))\n        .match(this.time.time_type === 'between')\n        .addValidator(this.validateStartTimeAndEndTime(this.time.time_between_from, this.time.time_between_to, this.isStartTimeAndEndTimeMsg))\n\n    for (let event of this.selects) {\n        // 校验事件\n        this.chain\n            .match()\n            .addValidator(this.hasDataResourceSelects(event))\n            .addValidator(this.validateSomeEmpty([event.event_code, event.op, event.times], this.isEventFilledMsg))\n            .addValidator(this.validateNoNegative(event.times, this.isEventTimeNoNegativeMsg))\n\n        const fieldSelects = event.fieldSelects\n        if (Array.isArray(fieldSelects)) {\n            for (let field of fieldSelects) {\n                this.chain\n                    .match()\n                    .addValidator(this.validateSomeEmpty([field.field_key, field.op], this.isFieldFilledMsg))\n                    .match(field.field_type === 'string')\n                    .addValidator(this.hasStringFieldFilled(field))\n                    ...\n            }\n        }\n    }\n}\n")])])]),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("// 客户端调用\nconst validatorChain = new ValidateChain()\nconst behaviorEventRule = new BehaviorEventRule({\nselects: behaviorEventSelects,\ndataResourceSelects,\ntime: behaviorTime\n}, validatorChain)\nbehaviorEventRule.init()")]),e._v(" "),n("p",[e._v("validatorChain\n.execute()\n.then(() => {\n// 校验成功\t\t\t\t\t\n})\n.catch(() => {\n// 校验失败\t\t\t\t\n})\nBaseRule 为公共策略对象，含公共校验方法，BehaviorEventRule为某个策略对象，含自身校验方法。")]),e._v(" "),n("p",[e._v("每个策略对象相对独立，互不影响，方便后面迭代维护、扩展，需求来了不再头痛！这就是重构的意义！")]),e._v(" "),n("p",[e._v("回顾下重构前的噩梦\n需要校验参数结构：")]),e._v(" "),n("p",[e._v('{\n...\n"data_resources": [\n{\n"data_resource_id": 259,\n"data_biz_type": "user_event",\n"data_resource_name": "音兔iOS"\n},\n{\n"data_resource_id": 213,\n"data_biz_type": "user_attribute",\n"data_resource_name": "集群导入用户属性类型"\n}\n],\n...\n"behavior_filter": {\n"time_type": "opp",\n"time_opp_cnt": 3,\n"time_opp_unit": "month",\n"ops": [],\n"behaviors": [\n{\n"event_code": "status_login_success",\n"event_name": "登录成功",\n"op": "-gt",\n"times": 3,\n"event_filter": [\n{\n"field_key": "event_time",\n"field_type": "datetime",\n"storage_field_type": "STRING",\n"field_name": "时间",\n"op": "between",\n"op_value": "2018-12-20,2019-02-01",\n"time_type": "between",\n"time_opp_unit": "day",\n"time_format": "yyyy-MM-dd HH🇲🇲ss"\n},\n{\n"field_key": "package_size",\n"field_type": "number",\n"storage_field_type": "STRING",\n"field_name": "包大小",\n"op": "-btn",\n"op_value": "10,50"\n},\n{\n"field_key": "province",\n"field_type": "string",\n"storage_field_type": "STRING",\n"field_name": "省份",\n"op": "-is",\n"op_value": "广东"\n}\n],\n"data_resource_id": 259\n}\n]\n},\n...\n"user_attribute_filter": {\n"ops": [\n"and"\n],\n"atts": [\n{\n"field_key": "first_date",\n"field_type": null,\n"storage_field_type": "STRING",\n"field_name": "first_date",\n"op": null,\n"op_value": "2",\n"time_type": "opp",\n"time_between_from": null,\n"time_between_to": null,\n"time_opp_cnt": 2,\n"time_opp_unit": "day",\n"time_format": "yyyyMMddHHmmss",\n"data_resource_id": 213\n},\n],\n"dmp_crowd_filter": []\n},\n"crowd_id": 1487\n}\n重构前的部分代码：')]),e._v(" "),n("p",[e._v("if (dataResourceSelects.length > uniqEventSelects.length) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '存在未选择事件或字段的事件源！',\n})\nreturn\n}\n// 校验dataResourceSelects\nfor (let s of dataResourceSelects) {\nif (!s.data_resource_id) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完数据源！',\n})\nreturn\n}\n}")]),e._v(" "),n("p",[e._v("// 校验behavior_filter\nif (behaviorTime.time_type === 'opp') {\nif (behaviorTime.time_opp_cnt === '') {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足时间！',\n})\nreturn\n} else if (!validateNoNegativeInt(behaviorTime.time_opp_cnt)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足时间只能为非负整数！',\n})\nreturn\n}\n}\nif (behaviorEventSelects.length === 0) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足必填！',\n})\nreturn\n}\nfor (let bes of behaviorEventSelects) {\nif (!dataResourceSelects.find(el => el.data_resource_id == bes.data_resource_id)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请确认行为满足中的事件所属数据源都被选中！',\n})\nreturn\n}\nif (!bes.event_code || !bes.op || bes.times === '') {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足事件！',\n})\nreturn\n}\nif (!validateNoNegativeInt(bes.times)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足事件次数只能为非负整数！',\n})\nreturn\n}\nconst fieldSelects = bes.fieldSelects\nif (Array.isArray(fieldSelects)) {\nfor (let el of fieldSelects) {\nif (!el.field_key || !el.op) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足字段！',\n})\nreturn\n}\nif (el.field_type === 'string' && !['-null', '-nnll'].includes(el.op) && el.op_value === '') {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足字段！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op == '-btn' &&\n(el.op_value.split(',')[0] === '' || el.op_value.split(',')[1] === '')) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足字段！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op !== '-btn' && el.op_value == '') {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '请填写完行为满足字段！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op !== '-btn' && !validateRealNum(el.op_value)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段数值只能为实数！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op == '-btn' &&\n(!validateRealNum(el.op_value.split(',')[0]) || !validateRealNum(el.op_value.split(',')[1]))) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段数值只能为实数！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op == '-btn' &&\n(parseInt(el.op_value.split(',')[0]) > parseInt(el.op_value.split(',')[1]))) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段最小值应小于等于最大值！',\n})\nreturn\n} else if (el.field_type === 'number' && el.op == '-btn' &&\n(parseInt(el.op_value.split(',')[0]) <= 0 || parseInt(el.op_value.split(',')[1]) > 100)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段超出数值范围！',\n})\nreturn\n} else if (el.field_type === 'datetime' && el.time_type === 'between' && !(\nvalidateDateTime('YYYY-MM-DD', el.time_between_from) &&\nvalidateDateTime('YYYY-MM-DD', el.time_between_to))) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段绝对时间非法！',\n})\nreturn\n} else if (el.field_type === 'datetime' && el.time_type === 'between' && !moment(el.time_between_from).isBefore(el.time_between_to)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段中开始时间要小于结束时间',\n})\nreturn\n} else if (el.field_type === 'datetime' && el.time_type === 'opp' && !el.time_opp_cnt) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段相对时间不能为空！',\n})\nreturn\n} else if (el.field_type === 'datetime' && el.time_type === 'opp' && !validateNoNegativeInt(el.time_opp_cnt)) {\nthis.setState({\nerrorModalVisible: true,\nerrorTitle: actionType == MODE.MODIFY ? '保存失败' : '创建失败',\nerrorMsg: '行为满足字段相对时间只能为非负整数！',\n})\nreturn\n}\n}\n}\n}")])])}),[],!1,null,null,null);n.default=r.exports}}]);