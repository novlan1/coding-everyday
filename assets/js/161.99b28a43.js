(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{432:function(t,e,s){"use strict";s.r(e);var r=s(14),a=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),e("h3",{attrs:{id:"react16架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react16架构"}},[t._v("#")]),t._v(" React16架构")]),t._v(" "),e("p",[t._v("React16架构可以分为三层：")]),t._v(" "),e("ul",[e("li",[t._v("Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入 Reconciler")]),t._v(" "),e("li",[t._v("Reconciler（协调器）—— 负责找出变化的组件")]),t._v(" "),e("li",[t._v("Renderer（渲染器）—— 负责将变化的组件渲染到页面上")])]),t._v(" "),e("h3",{attrs:{id:"scheduler、reconciler、renderer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheduler、reconciler、renderer"}},[t._v("#")]),t._v(" Scheduler、Reconciler、Renderer")]),t._v(" "),e("p",[e("code",[t._v("Reconciler")]),t._v("工作的阶段被称为"),e("code",[t._v("render")]),t._v("阶段。因为在该阶段会调用组件的"),e("code",[t._v("render")]),t._v("方法。")]),t._v(" "),e("p",[e("code",[t._v("Renderer")]),t._v("工作的阶段被称为"),e("code",[t._v("commit")]),t._v("阶段。就像你完成一个需求的编码后执行"),e("code",[t._v("git commit")]),t._v("提交代码。"),e("code",[t._v("commit")]),t._v("阶段会把"),e("code",[t._v("render")]),t._v("阶段提交的信息渲染在页面上。")]),t._v(" "),e("p",[e("code",[t._v("render")]),t._v("与"),e("code",[t._v("commit")]),t._v("阶段统称为"),e("code",[t._v("work")]),t._v("，即React在工作中。相对应的，如果任务正在"),e("code",[t._v("Scheduler")]),t._v("内调度，就不属于"),e("code",[t._v("work")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"代数效应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代数效应"}},[t._v("#")]),t._v(" 代数效应")]),t._v(" "),e("p",[t._v("代数效应是函数式编程中的一个概念，用于将副作用从函数调用中分离。\n假设我们有一个函数"),e("code",[t._v("getTotalPicNum")]),t._v("，传入2个用户名称后，分别查找该用户在平台保存的图片数量，最后将图片数量相加后返回。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalPicNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("user1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" picNum1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" picNum2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("我们虚构一个类似"),e("code",[t._v("try...catch")]),t._v("的语法 —— "),e("code",[t._v("try...handle")]),t._v("与两个操作符"),e("code",[t._v("perform")]),t._v("、"),e("code",[t._v("resume")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" picNum "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" perform name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" picNum"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalPicNum")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kaSong'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoMing'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("who")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("who"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kaSong'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoMing'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("与"),e("code",[t._v("try...catch")]),t._v("最大的不同在于：当"),e("code",[t._v("Error")]),t._v("被"),e("code",[t._v("catch")]),t._v("捕获后，之前的调用栈就销毁了。而"),e("code",[t._v("handle")]),t._v("执行"),e("code",[t._v("resume")]),t._v("后会回到之前"),e("code",[t._v("perform")]),t._v("的调用栈。")]),t._v(" "),e("h3",{attrs:{id:"异步可中断更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步可中断更新"}},[t._v("#")]),t._v(" 异步可中断更新")]),t._v(" "),e("p",[t._v("在React15及以前，Reconciler采用递归的方式创建虚拟DOM，"),e("strong",[t._v("递归过程是不能中断的。如果组件树的层级很深，递归会占用线程很多时间，造成卡顿")]),t._v("。")]),t._v(" "),e("p",[t._v("为了解决这个问题，React16将递归的无法中断的更新重构为异步的可中断更新。")]),t._v(" "),e("p",[t._v("异步可中断更新可以理解为：更新在执行过程中可能会被打断（浏览器时间分片用尽或有更高优任务插队），当可以继续执行时恢复之前执行的中间状态。")]),t._v(" "),e("h3",{attrs:{id:"fiber"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),e("p",[t._v("我们可以将纤程("),e("code",[t._v("Fiber")]),t._v(")、协程("),e("code",[t._v("Generator")]),t._v(")理解为代数效应思想在JS中的体现。")]),t._v(" "),e("p",[e("code",[t._v("React Fiber")]),t._v("可以理解为：")]),t._v(" "),e("p",[t._v("React内部实现的一套状态更新机制。"),e("strong",[t._v("支持任务不同优先级")]),t._v("，"),e("strong",[t._v("可中断与恢复")]),t._v("，"),e("strong",[t._v("并且恢复后可以复用之前的中间状态")]),t._v("。")]),t._v(" "),e("p",[t._v("其中每个任务更新单元为"),e("code",[t._v("React Element")]),t._v("对应的"),e("code",[t._v("Fiber")]),t._v("节点。")]),t._v(" "),e("p",[t._v("Fiber节点可以保存对应的DOM节点。相应的，Fiber节点构成的Fiber树就对应DOM树。")]),t._v(" "),e("h3",{attrs:{id:"双缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双缓存"}},[t._v("#")]),t._v(" 双缓存")]),t._v(" "),e("p",[t._v("当我们用"),e("code",[t._v("canvas")]),t._v("绘制动画，每一帧绘制前都会调用"),e("code",[t._v("ctx.clearRect")]),t._v("清除上一帧的画面。")]),t._v(" "),e("p",[t._v("如果当前帧画面计算量比较大，导致清除上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。")]),t._v(" "),e("p",[t._v("为了解决这个问题，我们可以在内存中绘制当前帧动画，绘制完毕后直接用当前帧替换上一帧画面，由于省去了两帧替换间的计算时间，不会出现从白屏到出现画面的闪烁情况。")]),t._v(" "),e("p",[t._v("这种"),e("strong",[t._v("在内存中构建并直接替换")]),t._v("的技术叫做双缓存 ("),e("code",[t._v("opens new window")]),t._v(")。")]),t._v(" "),e("p",[t._v("React使用“双缓存”来完成Fiber树的构建与替换——对应着DOM树的创建与更新。")]),t._v(" "),e("h3",{attrs:{id:"双缓存fiber树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双缓存fiber树"}},[t._v("#")]),t._v(" 双缓存Fiber树")]),t._v(" "),e("p",[t._v("在React中最多会同时存在两棵Fiber树。当前屏幕上显示内容对应的"),e("code",[t._v("Fiber")]),t._v("树称为"),e("code",[t._v("current Fiber")]),t._v("树，正在内存中构建的"),e("code",[t._v("Fiber")]),t._v("树称为"),e("code",[t._v("workInProgress Fiber")]),t._v("树。")]),t._v(" "),e("p",[e("code",[t._v("current Fiber")]),t._v("树中的Fiber节点被称为"),e("code",[t._v("current fiber")]),t._v("，"),e("code",[t._v("workInProgress Fiber")]),t._v("树中的Fiber节点被称为"),e("code",[t._v("workInProgress fiber")]),t._v("，他们通过"),e("code",[t._v("alternate")]),t._v("属性连接。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" workInProgressFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nworkInProgressFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("React应用的根节点通过"),e("code",[t._v("current")]),t._v("指针在不同"),e("code",[t._v("Fiber")]),t._v("树的"),e("code",[t._v("rootFiber")]),t._v("间切换来实现Fiber树的切换。")]),t._v(" "),e("p",[t._v("当"),e("code",[t._v("workInProgress Fiber")]),t._v("树构建完成交给Renderer渲染在页面上后，应用根节点的current指针指向"),e("code",[t._v("workInProgress Fiber")]),t._v("树，此时"),e("code",[t._v("workInProgress Fiber")]),t._v("树就变为"),e("code",[t._v("current Fiber")]),t._v("树。")]),t._v(" "),e("p",[t._v("每次状态更新都会产生新的"),e("code",[t._v("workInProgress Fiber")]),t._v("树，通过"),e("code",[t._v("current")]),t._v("与"),e("code",[t._v("workInProgress")]),t._v("的替换，完成DOM更新。")])])}),[],!1,null,null,null);e.default=a.exports}}]);