(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{582:function(_,e,v){_.exports=v.p+"assets/img/dom_render_process.33a976e1.png"},583:function(_,e,v){_.exports=v.p+"assets/img/deferAndAsyncDiff.20d14f63.png"},720:function(_,e,v){"use strict";v.r(e);var E=v(42),r=Object(E.a)({},(function(){var _=this,e=_.$createElement,E=_._self._c||e;return E("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[E("ul",[E("li",[E("a",{attrs:{href:"#1-%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E5%BE%97%E5%88%B0html%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%81%9A%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%A4%A7%E8%87%B4%E5%88%86%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%87%A0%E6%AD%A5"}},[_._v("1. 从输入url到得到html的过程中，浏览器做的工作大致分为以下几步：")]),_._v(" "),E("ul",[E("li",[E("a",{attrs:{href:"#11-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%BF%87%E7%A8%8B"}},[_._v("1.1. 浏览器"),E("strong",[_._v("渲染")]),_._v("页面的过程：")]),_._v(" "),E("ul",[E("li",[E("a",{attrs:{href:"#111-dom%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E6%98%AF%E6%96%87%E6%A1%A3%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%BC%80%E5%A7%8B%E7%9A%84"}},[_._v("1.1.1. DOM树的构建是文档加载完成开始的？")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#112-render%E6%A0%91%E6%98%AFdom%E6%A0%91%E5%92%8Ccssom%E6%A0%91%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%AF%95%E6%89%8D%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E7%9A%84%E5%90%97"}},[_._v("1.1.2. Render树是"),E("code",[_._v("DOM")]),_._v("树和"),E("code",[_._v("CSSOM")]),_._v("树构建完毕才开始构建的吗？")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#113-css%E7%9A%84%E8%A7%A3%E6%9E%90%E6%98%AF%E4%BB%8E%E5%8F%B3%E5%BE%80%E5%B7%A6%E9%80%86%E5%90%91%E8%A7%A3%E6%9E%90%E7%9A%84"}},[_._v("1.1.3. CSS的解析是从右往左逆向解析的")])])])]),_._v(" "),E("li",[E("a",{attrs:{href:"#12-%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0-js-%E6%96%87%E4%BB%B6%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[_._v("1.2. 渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#13-async-%E5%92%8C-defer-%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[_._v("1.3. async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#14-%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%87%E6%A1%A3%E7%9A%84%E9%A2%84%E8%A7%A3%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[_._v("1.4. 什么是文档的预解析？（浏览器解析过程）")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#15-css-%E5%A6%82%E4%BD%95%E9%98%BB%E5%A1%9E%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[_._v("1.5. CSS 如何阻塞文档解析？（浏览器解析过程）")])]),_._v(" "),E("li",[E("a",{attrs:{href:"#16-%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E6%97%B6%E5%B8%B8%E8%A7%81%E5%93%AA%E4%BA%9B%E4%B8%8D%E8%89%AF%E7%8E%B0%E8%B1%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B"}},[_._v("1.6. 渲染页面时常见哪些不良现象？（浏览器渲染过程）")])])])]),_._v(" "),E("li",[E("a",{attrs:{href:"#2-defer-%E5%92%8C-async-%E7%9A%84%E5%8C%BA%E5%88%AB"}},[_._v("2. "),E("code",[_._v("defer")]),_._v(" 和 "),E("code",[_._v("async")]),_._v(" 的区别")])])]),_._v(" "),E("h3",{attrs:{id:"_1-从输入url到得到html的过程中-浏览器做的工作大致分为以下几步"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-从输入url到得到html的过程中-浏览器做的工作大致分为以下几步"}},[_._v("#")]),_._v(" 1. 从输入url到得到html的过程中，浏览器做的工作大致分为以下几步：")]),_._v(" "),E("ul",[E("li",[_._v("加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。")]),_._v(" "),E("li",[_._v("解析：对加载到的资源（HTML、JS、CSS等）进行语法解析，建议相应的内部数据结构（比如HTML的DOM树，JS的（对象）属性表，CSS的样式规则等等）")]),_._v(" "),E("li",[_._v("渲染：构建渲染树，对各个元素进行位置计算、样式计算等等，然后根据渲染树对页面进行渲染（可以理解为“画”元素）")])]),_._v(" "),E("p",[_._v("这几个过程不是完全孤立的，会有交叉，比如HTML加载后就会进行解析，然后拉取HTML中指定的CSS、JS等。")]),_._v(" "),E("h4",{attrs:{id:"_1-1-浏览器渲染页面的过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-浏览器渲染页面的过程"}},[_._v("#")]),_._v(" 1.1. 浏览器"),E("strong",[_._v("渲染")]),_._v("页面的过程：")]),_._v(" "),E("p",[E("img",{attrs:{src:v(582),alt:"渲染过程"}})]),_._v(" "),E("ul",[E("li",[_._v("第一步，用 HTML 分析器，分析 HTML 元素，构建一颗 DOM 树(标记化和树构建)。")]),_._v(" "),E("li",[_._v("第二步，用 CSS 分析器，分析CSS文件和元素上的inline样式，生成页面的样式表。")]),_._v(" "),E("li",[_._v("第三步，将 DOM 树和样式表，关联起来，构建一颗"),E("code",[_._v("Render")]),_._v("树(这一过程又称为"),E("code",[_._v("Attachment")]),_._v(")。每个 DOM 节点都有"),E("code",[_._v("attach")]),_._v("方法，接受样式信息，返回一个"),E("code",[_._v("render")]),_._v("对象(又名"),E("code",[_._v("renderer")]),_._v(")。这些"),E("code",[_._v("render")]),_._v("对象最终会被构建成一颗"),E("code",[_._v("Render")]),_._v("树。")]),_._v(" "),E("li",[_._v("第四步，有了"),E("code",[_._v("Render")]),_._v("树，浏览器开始布局，为每个"),E("code",[_._v("Render")]),_._v("树上的节点确定一个在显示屏上出现的精确坐标。")]),_._v(" "),E("li",[_._v("第五步，"),E("code",[_._v("Render")]),_._v("树和节点显示坐标都有了，就调用每个节点"),E("code",[_._v("paint")]),_._v("方法，把它们绘制出来。")])]),_._v(" "),E("h5",{attrs:{id:"_1-1-1-dom树的构建是文档加载完成开始的"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-dom树的构建是文档加载完成开始的"}},[_._v("#")]),_._v(" 1.1.1. DOM树的构建是文档加载完成开始的？")]),_._v(" "),E("p",[_._v("构建DOM数是一个渐进过程，为达到更好用户体验，渲染引擎会尽快将内容显示在屏幕上。它不必等到整个HTML文档解析完毕之后才开始构建render数和布局。")]),_._v(" "),E("h5",{attrs:{id:"_1-1-2-render树是dom树和cssom树构建完毕才开始构建的吗"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-render树是dom树和cssom树构建完毕才开始构建的吗"}},[_._v("#")]),_._v(" 1.1.2. Render树是"),E("code",[_._v("DOM")]),_._v("树和"),E("code",[_._v("CSSOM")]),_._v("树构建完毕才开始构建的吗？")]),_._v(" "),E("p",[_._v("这三个过程在实际进行的时候又不是完全独立，而是会有交叉。会造成一边加载，一遍解析，一遍渲染的工作现象。")]),_._v(" "),E("h5",{attrs:{id:"_1-1-3-css的解析是从右往左逆向解析的"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-css的解析是从右往左逆向解析的"}},[_._v("#")]),_._v(" 1.1.3. CSS的解析是从右往左逆向解析的")]),_._v(" "),E("p",[_._v("从DOM树的"),E("code",[_._v("下－上")]),_._v("解析比"),E("code",[_._v("上－下")]),_._v("解析效率高)，嵌套标签越多，解析越慢。")]),_._v(" "),E("h4",{attrs:{id:"_1-2-渲染过程中遇到-js-文件怎么处理-浏览器解析过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-渲染过程中遇到-js-文件怎么处理-浏览器解析过程"}},[_._v("#")]),_._v(" 1.2. 渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）")]),_._v(" "),E("p",[E("strong",[_._v("JavaScript 的加载、解析与执行会阻塞文档的解析")]),_._v("，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。")]),_._v(" "),E("p",[_._v("也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 "),E("code",[_._v("defer")]),_._v(" 或者 "),E("code",[_._v("async")]),_._v(" 属性。")]),_._v(" "),E("h4",{attrs:{id:"_1-3-async-和-defer-的作用是什么-有什么区别-浏览器解析过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-async-和-defer-的作用是什么-有什么区别-浏览器解析过程"}},[_._v("#")]),_._v(" 1.3. async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）")]),_._v(" "),E("ol",[E("li",[E("p",[_._v("脚本没有 defer 或 async，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。")])]),_._v(" "),E("li",[E("p",[E("code",[_._v("defer")]),_._v(" 属性表示延迟执行引入的 JavaScript，即这段 JavaScript 加载时 HTML 并未停止解析，这两个过程是并行的。\n当整个 document 解析完毕后再执行脚本文件，在 DOMContentLoaded 事件触发之前完成。多个脚本按顺序执行。")])]),_._v(" "),E("li",[E("p",[E("code",[_._v("async")]),_._v(" 属性表示异步执行引入的 JavaScript，与 "),E("code",[_._v("defer")]),_._v(" 的区别在于，如果已经加载好，就会开始执行，也就是说它的执行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。")])])]),_._v(" "),E("h4",{attrs:{id:"_1-4-什么是文档的预解析-浏览器解析过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-什么是文档的预解析-浏览器解析过程"}},[_._v("#")]),_._v(" 1.4. 什么是文档的预解析？（浏览器解析过程）")]),_._v(" "),E("p",[_._v("Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。")]),_._v(" "),E("p",[_._v("这种方式可以使资源并行加载从而使整体速度更快。")]),_._v(" "),E("p",[_._v("需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。")]),_._v(" "),E("h4",{attrs:{id:"_1-5-css-如何阻塞文档解析-浏览器解析过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-css-如何阻塞文档解析-浏览器解析过程"}},[_._v("#")]),_._v(" 1.5. CSS 如何阻塞文档解析？（浏览器解析过程）")]),_._v(" "),E("ol",[E("li",[_._v("css加载不会阻塞DOM树的解析")]),_._v(" "),E("li",[_._v("css加载会阻塞DOM树的渲染")]),_._v(" "),E("li",[_._v("css加载会阻塞后面"),E("code",[_._v("js")]),_._v("语句的执行")])]),_._v(" "),E("h4",{attrs:{id:"_1-6-渲染页面时常见哪些不良现象-浏览器渲染过程"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-渲染页面时常见哪些不良现象-浏览器渲染过程"}},[_._v("#")]),_._v(" 1.6. 渲染页面时常见哪些不良现象？（浏览器渲染过程）")]),_._v(" "),E("p",[_._v("FOUC：\n主要指的是样式闪烁的问题，由于浏览器渲染机制（比如firefox），在 CSS 加载之前，先呈现了 HTML，就会导致展示出无样式内容，然后样式突然呈现的现象。会出现这个问题的原因主要是 css 加载时间过长，或者 css 被放在了文档底部。")]),_._v(" "),E("p",[_._v("白屏：有些浏览器渲染机制（比如chrome）要先构建 DOM 树和 CSSOM 树，构建完成后再进行渲染，如果 CSS 部分放在 HTML 尾部，由于 CSS 未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把 js 文件放在头部，脚本的加载会阻塞后面文档内容的解析，从而页面迟迟未渲染出来，出现白屏问题。")]),_._v(" "),E("h3",{attrs:{id:"_2-defer-和-async-的区别"}},[E("a",{staticClass:"header-anchor",attrs:{href:"#_2-defer-和-async-的区别"}},[_._v("#")]),_._v(" 2. "),E("code",[_._v("defer")]),_._v(" 和 "),E("code",[_._v("async")]),_._v(" 的区别")]),_._v(" "),E("p",[E("img",{attrs:{src:v(583),alt:"difference between defer and async"}})]),_._v(" "),E("ol",[E("li",[_._v("defer和async在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）")]),_._v(" "),E("li",[_._v("它俩的差别在于"),E("strong",[_._v("脚本下载完之后何时执行")]),_._v("，显然 defer 是最接近我们对于应用脚本加载和执行的要求的")]),_._v(" "),E("li",[_._v("关于defer，此图未尽之处在于它是"),E("strong",[_._v("按照加载顺序执行脚本")]),_._v("的，这一点要善加利用")]),_._v(" "),E("li",[_._v("async 则是一个"),E("strong",[_._v("乱序执行")]),_._v("的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行")]),_._v(" "),E("li",[_._v("仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子："),E("code",[_._v("Google Analytics")])])]),_._v(" "),E("p",[_._v("参考资料：")]),_._v(" "),E("ol",[E("li",[E("a",{attrs:{href:"https://www.cnblogs.com/chenjg/p/7126822.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("css加载会造成阻塞吗？"),E("OutboundLink")],1)]),_._v(" "),E("li",[E("a",{attrs:{href:"https://segmentfault.com/q/1010000000640869",target:"_blank",rel:"noopener noreferrer"}},[_._v("defer 和 async 的区别"),E("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);