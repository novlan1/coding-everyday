(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{501:function(e,s,a){"use strict";a.r(s);var t=a(14),v=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"set命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set命令"}},[e._v("#")]),e._v(" set命令")]),e._v(" "),s("p",[e._v("set命令用来修改 Shell 环境的运行参数，也就是可以定制环境。一共有十几个参数可以定制。")]),e._v(" "),s("p",[e._v("如果命令行下不带任何参数，直接运行set，会显示所有的环境变量和 Shell 函数。")]),e._v(" "),s("h3",{attrs:{id:"基本用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("set -u")]),e._v(", "),s("code",[e._v("set -o nounset")]),e._v(", 遇到未定义的变量会退出")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("set -x")]),e._v(", "),s("code",[e._v("set -o xtrace")]),e._v(", 先输出执行的那一行命令")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("set -e")]),e._v(", "),s("code",[e._v("set -o errexit")]),e._v(", 脚本只要发生错误，就终止执行")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("set +e")]),e._v("，表示关闭"),s("code",[e._v("-e")]),e._v("选项，可用于暂时关闭，让命令失败的时候继续执行")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("set -o pipefail")])]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("set -e")]),e._v("不适用于管道命令, 如"),s("code",[e._v("foo | echo a")]),e._v("，即使"),s("code",[e._v("foo")]),e._v("未声明，"),s("code",[e._v("echo a")]),e._v("也会执行；")])]),e._v(" "),s("li",[s("p",[e._v("Bash 会把最后一个子命令的返回值，作为整个命令的返回值。只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，"),s("code",[e._v("set -e")]),e._v("就失效了")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("set -o pipefail")]),e._v("用来解决这种情况")])])])])]),e._v(" "),s("h3",{attrs:{id:"连在一起使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连在一起使用"}},[e._v("#")]),e._v(" 连在一起使用")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 写法一")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-euxo")]),e._v(" pipefail\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 写法二")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-eux")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" pipefail\n")])])]),s("p",[e._v("另一种办法是在执行 Bash 脚本的时候，从命令行传入这些参数。")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-euxo")]),e._v(" pipefail script.sh\n")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);