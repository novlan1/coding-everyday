(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{417:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[s("a",{attrs:{href:"#1-history-%E6%A8%A1%E5%BC%8F%E5%92%8C-hash-%E6%A8%A1%E5%BC%8F"}},[t._v("1. history 模式和 hash 模式")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#11-hash-%E6%A8%A1%E5%BC%8F"}},[t._v("1.1. hash 模式")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#12-history-%E6%A8%A1%E5%BC%8F"}},[t._v("1.2. history 模式")])])])])]),t._v(" "),s("h2",{attrs:{id:"_1-history-模式和-hash-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-history-模式和-hash-模式"}},[t._v("#")]),t._v(" 1. history 模式和 hash 模式")]),t._v(" "),s("p",[t._v("SPA中，前端路由主要实现了两个功能（使用ajax更新页面状态的情况下）：")]),t._v(" "),s("ol",[s("li",[t._v("记录当前页面的状态（保存或分享当前页的url，再次打开该url时，网页还是保存（分享）时的状态）；")]),t._v(" "),s("li",[t._v("可以使用浏览器的前进后退功能（如点击后退按钮，可以使页面回到使用ajax更新页面之前的状态，url也回到之前的状态）；")])]),t._v(" "),s("p",[t._v("作为开发者，要实现这两个功能，我们需要做到：")]),t._v(" "),s("ul",[s("li",[t._v("改变url且不让浏览器向服务器发出请求；")]),t._v(" "),s("li",[t._v("监测 url 的变化；")]),t._v(" "),s("li",[t._v("截获 url 地址，并解析出需要的信息来匹配路由规则。")])]),t._v(" "),s("p",[t._v("我们路由常用的hash模式和history模式实际上就是实现了上面的功能。")]),t._v(" "),s("h3",{attrs:{id:"_1-1-hash-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-hash-模式"}},[t._v("#")]),t._v(" 1.1. hash 模式")]),t._v(" "),s("p",[t._v("这里的 hash 就是指 url 尾巴后的 # 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。")]),t._v(" "),s("p",[t._v("由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。")]),t._v(" "),s("p",[t._v("使用到的api：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'qq'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 url 的 hash，会在当前url后加上 '#qq'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '#qq'  ")]),t._v("\n\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hashchange'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听hash变化，点击浏览器的前进后退会触发")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_1-2-history-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-history-模式"}},[t._v("#")]),t._v(" 1.2. history 模式")]),t._v(" "),s("p",[t._v("已经有 "),s("code",[t._v("hash")]),t._v(" 模式了，而且 "),s("code",[t._v("hash")]),t._v(" 能兼容到"),s("code",[t._v("IE8")]),t._v("， "),s("code",[t._v("history")]),t._v(" 只能兼容到 "),s("code",[t._v("IE10")]),t._v("，为什么还要搞个 "),s("code",[t._v("history")]),t._v(" 呢？\n首先，"),s("strong",[s("code",[t._v("hash")]),t._v(" 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了")]),t._v("。其次，"),s("code",[t._v("hash")]),t._v(" 的传参是基于 "),s("code",[t._v("url")]),t._v(" 的，如果要传递复杂的数据，会有"),s("strong",[t._v("体积的限制")]),t._v("，而 "),s("code",[t._v("history")]),t._v(" 模式不仅可以在"),s("code",[t._v("url")]),t._v("里放参数，还可以将数据存放在一个特定的对象中。\n最重要的一点：")]),t._v(" "),s("blockquote",[s("p",[t._v("如果不想要很丑的 "),s("code",[t._v("hash")]),t._v("，我们可以用路由的 "),s("code",[t._v("history")]),t._v(" 模式")])]),t._v(" "),s("p",[t._v("相关API：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// title：标题，基本没用，一般传 null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// url：设定新的历史记录的 url。新的 url 与当前 url 的 origin 必须是一樣的，否则会抛出错误。url可以是绝对路径，也可以是相对路径。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如 当前url是 https://www.baidu.com/a/, 执行 history.pushState(null, null, './qq/')，则变成 https://www.baidu.com/a/qq/，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行history.pushState(null, null, '/qq/')，则变成 https://www.baidu.com/qq/")]),t._v("\n\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与 pushState 基本相同，但她是修改当前历史记录，而 pushState 是创建新的历史记录")]),t._v("\n\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"popstate"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听浏览器前进后退事件，pushState 与 replaceState 方法不会触发\t\t\t\t")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后退")]),t._v("\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前进")]),t._v("\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("go")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前进一步，-2为后退两步")]),t._v("\nwindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以查看当前历史堆栈中页面的数量")]),t._v("\n")])])]),s("p",[s("code",[t._v("pushState")]),t._v(" 这个方法，页面不会变化，只是浏览器地址栏会发生更新，且浏览器的回退按钮变成了可点击状态！")]),t._v(" "),s("p",[t._v("history 模式改变 url 的方式会导致浏览器向服务器发送请求，这不是我们想看到的，我们需要在服务器端做处理：如果匹配不到任何静态资源，则应该始终返回同一个 html 页面。")]),t._v(" "),s("p",[s("code",[t._v("vue-router")]),t._v(" 的 "),s("code",[t._v("push")]),t._v(" 方法的页面跳转流程：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("vue-router")]),t._v("调用 "),s("code",[t._v("push")]),t._v(" 方法首先会"),s("strong",[t._v("使用 "),s("code",[t._v("pushstate")]),t._v(" 变换页面 url")]),t._v("（仅仅变化 url，页面不变）")]),t._v(" "),s("li",[t._v("紧接着"),s("strong",[t._v("根据 "),s("code",[t._v("push")]),t._v(" 方法中传入的 "),s("code",[t._v("params")]),t._v(" 找到对应的组件")]),t._v("【页面】")]),t._v(" "),s("li",[s("strong",[t._v("载入对应页面组件")]),t._v("，跳转完毕")])]),t._v(" "),s("p",[t._v("【划重点】"),s("strong",[s("code",[t._v("vue-router")]),t._v("的 "),s("code",[t._v("push")]),t._v(" 跳转或者"),s("code",[t._v("replace")]),t._v("跳转是不需要请求服务器的！")]),t._v(" "),s("strong",[t._v("但是我们如果使用 "),s("code",[t._v("window.location.href")]),t._v(" 来做这个页面跳转，就基本上和 "),s("code",[t._v("web1.0")]),t._v(" 没什么区别，一定会先请求到服务器，再由服务器下发资源，导致页面刷新")]),t._v("~")]),t._v(" "),s("p",[t._v("参考资料：")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History",target:"_blank",rel:"noopener noreferrer"}},[t._v("History, MDN"),s("OutboundLink")],1),t._v("，")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API",target:"_blank",rel:"noopener noreferrer"}},[t._v("History API, MDN"),s("OutboundLink")],1),t._v("，")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/JRliu/p/adff",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端路由的两种模式： hash 模式和 history 模式"),s("OutboundLink")],1),t._v("，")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/557f2ba86892",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-router history模式的实现原理"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=r.exports}}]);