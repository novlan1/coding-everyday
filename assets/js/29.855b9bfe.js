(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{305:function(_,t,v){"use strict";v.r(t);var a=v(14),s=Object(a.a)({},(function(){var _=this,t=_._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("ul",[t("li",[t("a",{attrs:{href:"#%E5%A4%8D%E6%9D%82%E5%BA%A6o"}},[_._v("复杂度O")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%B8%80big-o%E7%9A%84%E5%90%AB%E4%B9%89"}},[_._v("一、big O的含义")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%8C%E4%BE%8B%E9%A2%98"}},[_._v("二、例题：")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#%E4%B8%89%E5%A6%82%E6%9E%9C%E8%A6%81%E6%83%B3%E5%9C%A81s%E4%B9%8B%E5%86%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98"}},[_._v("三、如果要想在1s之内解决问题：")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#%E5%9B%9B%E4%B8%8B%E9%9D%A2%E7%A8%8B%E5%BA%8F%E6%98%AFon2%E7%9A%84%E5%90%97"}},[_._v("四、下面程序是O(n^2)的吗?")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#%E4%BA%94ologn"}},[_._v("五、O(logn)")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#%E5%85%AD%E9%80%92%E5%BD%92"}},[_._v("六、递归")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#1-%E9%80%92%E5%BD%92%E4%B8%AD%E8%BF%9B%E8%A1%8C%E4%B8%80%E6%AC%A1%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90"}},[_._v("1. 递归中进行一次递归调用的复杂度分析：")])]),_._v(" "),t("li",[t("a",{attrs:{href:"#2-%E9%80%92%E5%BD%92%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%E4%BB%A5%E4%B8%A4%E6%AC%A1%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BE%8B"}},[_._v("2. 递归中进行多次调用，以两次调用为例：")])])])])])])]),_._v(" "),t("h2",{attrs:{id:"复杂度o"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复杂度o"}},[_._v("#")]),_._v(" 复杂度O")]),_._v(" "),t("h3",{attrs:{id:"一、big-o的含义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、big-o的含义"}},[_._v("#")]),_._v(" 一、big O的含义")]),_._v(" "),t("p",[t("strong",[_._v("在学术界，严格地讲，O(f(n))表示算法执行的上界")]),_._v("。比如，归并排序算法的时间复杂度是O(nlogn)的，同时也是O(n^2)")]),_._v(" "),t("p",[t("strong",[_._v("在业界，我们就是用O来表示算法执行的最低上界")]),_._v("。所以，我们一般不会说归并排序是O(n^2)的。")]),_._v(" "),t("h3",{attrs:{id:"二、例题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、例题"}},[_._v("#")]),_._v(" 二、例题：")]),_._v(" "),t("p",[_._v("有一个字符串数组，将数组中的每一个字符串按照字母序排序；之后再将整个字符串数组按照字典序排序。整个操作的时间复杂度？")]),_._v(" "),t("p",[_._v("错误答案："),t("code",[_._v("O(n*nlogn + nlogn) = O(n^2logn)")])]),_._v(" "),t("p",[_._v("正确解答：")]),_._v(" "),t("blockquote",[t("p",[_._v("假设最长的字符串长度为s；数组中有n个字符串\n对着每个字符串排序：O(slogs)\n将数组中的每一个字符串按照字母序排序："),t("code",[_._v("O(n*slog(s))")]),_._v("\n将整个字符串数组按照字典序排序："),t("code",[_._v("O(s*nlog(n))")]),_._v("\n所以："),t("code",[_._v("O(n*slog(s)) + O(s*nlog(n)) = O(n*s*logs + s*n*logn) = O(n*s*(logs+logn))")])]),_._v(" "),t("p",[_._v("整数比较是O(1)，字符串的字典序比较是O(s)， 所以整个字符串数组进行字典序排序是"),t("code",[_._v("O(s*nlog(n))")]),_._v("。")])]),_._v(" "),t("h3",{attrs:{id:"三、如果要想在1s之内解决问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、如果要想在1s之内解决问题"}},[_._v("#")]),_._v(" 三、如果要想在1s之内解决问题：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("O(n^2)的算法可以处理大约10^4级别的数据")]),_._v("；")]),_._v(" "),t("li",[t("strong",[_._v("O(n)的算法可以处理大约10^8级别的数据")]),_._v("；")]),_._v(" "),t("li",[t("strong",[_._v("O(nlogn)的算法可以处理大约10^7级别的数据")]),_._v("；")])]),_._v(" "),t("p",[_._v("递归调用有空间代价，一般递归深度有多少，占用的空间就有多少。")]),_._v(" "),t("h3",{attrs:{id:"四、下面程序是o-n-2-的吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、下面程序是o-n-2-的吗"}},[_._v("#")]),_._v(" 四、下面程序是O(n^2)的吗?")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708091253_41b81b1b2e46.png",alt:"img"}})]),_._v(" "),t("p",[t("strong",[_._v("30n次基本操作：O(n)")])]),_._v(" "),t("h3",{attrs:{id:"五、o-logn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、o-logn"}},[_._v("#")]),_._v(" 五、O(logn)")]),_._v(" "),t("p",[_._v("二分查找法的时间复杂度是O(logn)的")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708091358_e3b269624ee7.png",alt:"img"}})]),_._v(" "),t("p",[t("strong",[_._v("不要看到for循环，就认为是一层O(n)")]),_._v("，下面是两个例子")]),_._v(" "),t("p",[_._v("例1：")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708091500_40e1684e41fa.png",alt:"img"}})]),_._v(" "),t("p",[t("strong",[_._v("不是O(n^2)，而应该是O(nlog(n))")]),_._v("。")]),_._v(" "),t("p",[_._v("例2:")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708091546_c2334665b719.png",alt:"img"}})]),_._v(" "),t("p",[_._v("是"),t("strong",[_._v("O(sqrt(n))")]),_._v("。")]),_._v(" "),t("p",[_._v("再来看一下O(logn)的效率：")]),_._v(" "),t("blockquote",[t("p",[_._v("log2*N / logN = (log2 + logN) / logN = 1 + log2/logN")])]),_._v(" "),t("p",[_._v("如果数据规模增加两倍，当数据量很大的时候，后面的一项可以忽略不计，也就是说运行时间几乎没有增长。")]),_._v(" "),t("p",[_._v("从而可以得知：")]),_._v(" "),t("p",[_._v("1."),t("strong",[_._v("如果可以将顺序查找的问题转成二分查找的问题，那么就能大大提升效率")]),_._v("。")]),_._v(" "),t("p",[_._v("2."),t("strong",[_._v("O(n)和O(logn)有本质差别，同理，O(n^2)和O(nlogn)也有本质差别")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"六、递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、递归"}},[_._v("#")]),_._v(" 六、递归")]),_._v(" "),t("h4",{attrs:{id:"_1-递归中进行一次递归调用的复杂度分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-递归中进行一次递归调用的复杂度分析"}},[_._v("#")]),_._v(" 1. 递归中进行一次递归调用的复杂度分析：")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708092223_d3da2faa4ebf.png",alt:"img"}})]),_._v(" "),t("p",[_._v("时间复杂度："),t("strong",[_._v("O(logn)")])]),_._v(" "),t("p",[_._v("如果递归函数中，"),t("strong",[_._v("只进行一次递归调用，递归深度为depth")]),_._v("；"),t("strong",[_._v("在每个递归函数中，时间复杂度为T；则总体的时间复杂度为"),t("code",[_._v("O(T*depth)")])]),_._v("。")]),_._v(" "),t("p",[_._v("例题：")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708092536_4f95500c0461.png",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708092540_4ac5d05aac73.png",alt:"img"}})]),_._v(" "),t("p",[_._v("根据前面O(logn)的性质，可知上面的幂运算比O(n)快很多。")]),_._v(" "),t("h4",{attrs:{id:"_2-递归中进行多次调用-以两次调用为例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-递归中进行多次调用-以两次调用为例"}},[_._v("#")]),_._v(" 2. 递归中进行多次调用，以两次调用为例：")]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708092756_3676794ac41b.png",alt:"img"}})]),_._v(" "),t("p",[t("img",{attrs:{src:"http://img.uwayfly.com/article_mike_20200708092806_97b43efbf759.png",alt:"img"}})]),_._v(" "),t("p",[_._v("上面函数和归并排序不同，归并排序每次递归数据量都有减少，也就是分治算法。")])])}),[],!1,null,null,null);t.default=s.exports}}]);