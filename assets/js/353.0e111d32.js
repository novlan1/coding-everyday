(window.webpackJsonp=window.webpackJsonp||[]).push([[353],{624:function(t,a,s){"use strict";s.r(a);var r=s(14),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、开始"}},[t._v("#")]),t._v(" 一、开始")]),t._v(" "),a("p",[t._v("本文介绍了编译、解释、动静态语言等基本概念，以及 V8 引擎的基本流程。")]),t._v(" "),a("h2",{attrs:{id:"二、编译与解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、编译与解释"}},[t._v("#")]),t._v(" 二、编译与解释")]),t._v(" "),a("p",[t._v("二进制指令就是机器码")]),t._v(" "),a("ul",[a("li",[t._v("编译：将源代码一次性转换成目标代码的过程。执行编译过程的程序叫编译器（Compiler）。")]),t._v(" "),a("li",[t._v("解释：将源代码逐条转换成目标代码，同时逐条运行的过程。执行解释过程的程序叫解释器（Interpreter）。解释器一般来说就是 vm，vm 有两种，一种是基于堆栈，一种是基于寄存器。")])]),t._v(" "),a("p",[t._v("编译过程大致包括词法分析、语法分析、语义分析、性能优化、生成可执行文件等五个步骤，期间涉及到复杂的算法和硬件架构。解释器与此类似。")]),t._v(" "),a("h2",{attrs:{id:"三、静态语言与动态语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、静态语言与动态语言"}},[t._v("#")]),t._v(" 三、静态语言与动态语言")]),t._v(" "),a("p",[t._v("高级语言按照执行方式的不同，可分为静态语言和动态语言。")]),t._v(" "),a("ul",[a("li",[t._v("静态语言：使用编译执行的语言，如 C、C++、Golang 等。使用编译器一次性生成目标代码，“一次编译，无限次运行”，程序运行速度更快。编译型语言一般是不能跨平台的，也就是不能在不同的操作系统之间随意切换。")]),t._v(" "),a("li",[t._v("动态语言：使用解释执行的语言，如 Python、Javascript、PHP 等。执行过程中需要源代码，只要存在解释器，源代码可以在任何操作系统上运行，可移植性好，“一次编写，到处运行”。")])]),t._v(" "),a("img",{attrs:{src:"http://doc.uwayfly.com/computer-base-compiler-interperter.png",width:"380"}}),t._v(" "),a("p",[t._v("解释型语言之所以能够跨平台，是因为有了解释器这个中间层。在不同的平台下，解释器会将相同的源代码转换成不同的机器码，解释器帮助我们屏蔽了不同平台之间的差异。")]),t._v(" "),a("blockquote",[a("p",[t._v("java 和 C# 是一种比较奇葩的存在，它们是半编译半解释型的语言，源代码需要先转换成一种中间文件（字节码文件），然后再将中间文件拿到虚拟机中执行。Java 引领了这种风潮，它的初衷是在跨平台的同时兼顾执行效率；C# 是后来的跟随者，但是 C# 一直止步于 Windows 平台，在其它平台鲜有作为。")])]),t._v(" "),a("p",[t._v("总结一下：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("原理")]),t._v(" "),a("th",[t._v("优点")]),t._v(" "),a("th",[t._v("缺点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("编译型语言")]),t._v(" "),a("td",[t._v("通过专门的编译器，将所有源代码一次性转换成特定平台（Windows、Linux 等）执行的机器码（以可执行文件的形式存在）。")]),t._v(" "),a("td",[t._v("编译一次后，脱离了编译器也可以运行，并且"),a("strong",[t._v("运行效率高")]),t._v("。")]),t._v(" "),a("td",[a("strong",[t._v("可移植性差")]),t._v("，不够灵活。")])]),t._v(" "),a("tr",[a("td",[t._v("解释型语言")]),t._v(" "),a("td",[t._v("由专门的解释器，根据需要将部分源代码临时转换成特定平台的机器码。")]),t._v(" "),a("td",[a("strong",[t._v("跨平台性好")]),t._v("，通过不同的解释器，将相同的源代码解释成不同平台下的机器码。")]),t._v(" "),a("td",[t._v("一边执行一边转换，"),a("strong",[t._v("效率很低")]),t._v("。")])])])]),t._v(" "),a("h2",{attrs:{id:"四、v8引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、v8引擎"}},[t._v("#")]),t._v(" 四、V8引擎")]),t._v(" "),a("p",[t._v("Javascript 是解释型语言，那么 V8 引擎就对应着解释器。但是 V8 引擎为了提高 JS 的运行效率，会提前编译。")]),t._v(" "),a("p",[t._v("也就是 V8 引擎包括两个阶段：编译、执行，编译阶段指 V8 将 JavaScript 转换为字节码或者二进制机器码，执行阶段指解释器解释执行字节码，或者 CPU 直接执行二进制机器码。")]),t._v(" "),a("h3",{attrs:{id:"_1-jit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-jit"}},[t._v("#")]),t._v(" 1. JIT")]),t._v(" "),a("p",[t._v("V8 引擎同时采用了解释执行和编译执行这两种方式，也就是在运行时进行编译，这种方式称为 JIT ("),a("code",[t._v("Just in Time")]),t._v(") 即时编译。")]),t._v(" "),a("p",[t._v("V8 在执行 JavaScript 源码时，会先通过解析器将源码解析成 AST，解释器会将 AST 转化为字节码，一边解释一遍执行。")]),t._v(" "),a("p",[t._v("解释器同时会记录某一代码片段的执行次数，如果执行次数超过了某个阈值，这段代码便会被标记为热代码("),a("code",[t._v("Hot Code")]),t._v(")，同时将运行信息反馈给优化编译器 TurboFan，TurboFan 根据反馈信息，会优化并编译字节码，最后生成优化的机器码。")]),t._v(" "),a("h3",{attrs:{id:"_2-parser-生成抽象语法树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-parser-生成抽象语法树"}},[t._v("#")]),t._v(" 2. Parser 生成抽象语法树")]),t._v(" "),a("p",[t._v("Parser 生成 AST 抽象语法树过程包括语法分析、词法分析，和 Babel 等工具差不多。")]),t._v(" "),a("p",[t._v("生成 AST 中的一个优化是惰性解析(Lazy Parsing)，因为源码在执行前如果全部完全解析的话，不仅执行时间过长，而且会消耗更多的内存。")]),t._v(" "),a("blockquote",[a("p",[t._v("惰性解析就是指如果遇到并不是立即执行的函数，只会对其进行预解析("),a("code",[t._v("Pre-Parser")]),t._v(")，当函数被调用时，才会对其完全解析。\n预解析时，只会验证函数的语法是否有效、解析函数声明以及确定函数作用域，并不会生成 AST，这项工作由 "),a("code",[t._v("Pre-Parser")]),t._v(" 预解析器完成。")])]),t._v(" "),a("h3",{attrs:{id:"_3-ignition-生成字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-ignition-生成字节码"}},[t._v("#")]),t._v(" 3. Ignition 生成字节码")]),t._v(" "),a("p",[t._v("字节码是机器码的抽象，可以看作是小型的构建块。相比机器码，字节码不仅占用内存少，而且生成字节码的时间很快，提升了启动速度。")]),t._v(" "),a("p",[t._v("另外，字节码与特定类型的机器码无关，通过解释器将字节码转换为机器码后才可以执行，这样也使得 V8 更加方便的移植到不同的 CPU 架构。")]),t._v(" "),a("p",[t._v("可以通过如下命令，查看 JavaScript 代码生成的字节码。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("print"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bytecode index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n")])])]),a("p",[t._v("注意，解释器执行字节码前，还是会将字节码转为机器码，因为计算机只识别机器码。")]),t._v(" "),a("h3",{attrs:{id:"_4-turbofan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-turbofan"}},[t._v("#")]),t._v(" 4. TurboFan")]),t._v(" "),a("blockquote",[a("p",[t._v("Ignition 执行上一步生成的字节码，并记录代码运行的次数等信息，如果同一段代码执行了很多次，就会被标记为 “HotSpot”（热点代码），然后把这段代码发送给 编译器TurboFan。\n然后TurboFan把它编译为更高效的机器码储存起来，等到下次再执行到这段代码时，就会用现在的机器码替换原来的字节码进行执行，这样大大提升了代码的执行效率。\n另外，当TurboFan判断一段代码不再为热点代码的时候，会执行去优化的过程，把优化的机器码丢掉，然后执行过程回到 Ignition。")])]),t._v(" "),a("p",[t._v("TurboFan 做的优化包括内联（"),a("code",[t._v("inlining")]),t._v("）和逃逸分析（"),a("code",[t._v("Escape Analysis")]),t._v("）。")]),t._v(" "),a("p",[t._v("内联就是将相关联的函数进行合并，减少运行时间。比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("内联处理后：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fooAddInlined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" addReturnValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" addReturnValue\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 fooAddInlined 中 a 和 b 的值都是确定的，所以可以进一步优化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fooAddInlined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("逃逸分析就是分析对象的生命周期是否仅限于当前函数，如果是的话会对其进行优化。比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("会处理成：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj_x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj_y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj_x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj_y\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-总体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-总体流程"}},[t._v("#")]),t._v(" 5. 总体流程")]),t._v(" "),a("img",{attrs:{src:"http://doc.uwayfly.com/v8-process.png",width:"900"}}),t._v(" "),a("h2",{attrs:{id:"五、相关资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、相关资料"}},[t._v("#")]),t._v(" 五、相关资料")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://github.com/v8/v8",target:"_blank",rel:"noopener noreferrer"}},[t._v("v8"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://c.biancheng.net/view/4136.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译型语言和解释型语言的区别"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/yue_2018/article/details/89143984",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译器与解释器的区别"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/53612496",target:"_blank",rel:"noopener noreferrer"}},[t._v("js引擎能做到多小？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6996825009280778253",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解JS引擎"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/96502646",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8是如何执行JavaScript代码的？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/19672491",target:"_blank",rel:"noopener noreferrer"}},[t._v("JIT 为什么能大幅度提升性能？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/c1481118216/article/details/76592289",target:"_blank",rel:"noopener noreferrer"}},[t._v("JIT（just-in-time） 即时编译"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);