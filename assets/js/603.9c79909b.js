(window.webpackJsonp=window.webpackJsonp||[]).push([[603],{875:function(t,a,s){"use strict";s.r(a);var e=s(14),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-list"}},[t._v("1. List")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-list-%E7%BC%96%E5%86%99-equals-%E6%96%B9%E6%B3%95"}},[t._v("2. List 编写 equals 方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-map-%E7%BC%96%E5%86%99-equals-%E5%92%8C-hashcode-%E6%96%B9%E6%B3%95"}},[t._v("3. Map 编写 equals 和 hashCode 方法")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#301-%E9%97%AE%E9%A2%98%E4%B8%80hashcode%E8%BF%94%E5%9B%9E%E7%9A%84int%E8%8C%83%E5%9B%B4%E9%AB%98%E8%BE%BE21%E4%BA%BF%E5%85%88%E4%B8%8D%E8%80%83%E8%99%91%E8%B4%9F%E6%95%B0hashmap%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E5%BE%97%E6%9C%89%E5%A4%9A%E5%A4%A7"}},[t._v("3.0.1. 问题一：hashCode()返回的"),a("code",[t._v("int")]),t._v("范围高达±21亿，先不考虑负数，"),a("code",[t._v("HashMap")]),t._v("内部使用的数组得有多大？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#302-%E9%97%AE%E9%A2%98%E4%BA%8C%E5%A6%82%E6%9E%9C%E6%B7%BB%E5%8A%A0%E8%B6%85%E8%BF%8716%E4%B8%AAkey-value%E5%88%B0hashmap%E6%95%B0%E7%BB%84%E4%B8%8D%E5%A4%9F%E7%94%A8%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E"}},[t._v("3.0.2. 问题二：如果添加超过16个"),a("code",[t._v("key-value")]),t._v("到"),a("code",[t._v("HashMap")]),t._v("，数组不够用了怎么办？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#303-%E9%97%AE%E9%A2%98%E4%B8%89%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%90%8C%E7%9A%84%E4%B8%A4%E4%B8%AAkey%E4%BE%8B%E5%A6%82a%E5%92%8Cb%E5%AE%83%E4%BB%AC%E7%9A%84hashcode%E6%81%B0%E5%A5%BD%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E6%98%AF%E5%AE%8C%E5%85%A8%E5%8F%AF%E8%83%BD%E7%9A%84%E5%9B%A0%E4%B8%BA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BE%8B%E5%8F%AA%E8%A6%81%E6%B1%82hashcode%E5%B0%BD%E9%87%8F%E4%B8%8D%E7%9B%B8%E7%AD%89%E9%82%A3%E4%B9%88%E5%BD%93%E6%88%91%E4%BB%AC%E6%94%BE%E5%85%A5"}},[t._v("3.0.3. 问题三：如果不同的两个"),a("code",[t._v("key")]),t._v("，例如"),a("code",[t._v('"a"')]),t._v("和"),a("code",[t._v('"b"')]),t._v("，它们的"),a("code",[t._v("hashCode()")]),t._v("恰好是相同的（这种情况是完全可能的，因为不相等的两个实例，只要求"),a("code",[t._v("hashCode()")]),t._v("尽量不相等），那么，当我们放入：")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-queue"}},[t._v("4. Queue")])])]),t._v(" "),a("h3",{attrs:{id:"_1-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-list"}},[t._v("#")]),t._v(" 1. List")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("ArrayList")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("LinkedList")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("获取指定元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("速度很快")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("需要从头开始查找元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("添加元素到末尾")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("速度很快")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("速度很快")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("在指定位置添加/删除")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("需要移动元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不需要移动元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("内存占用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("少")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("较大")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-list-编写-equals-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-list-编写-equals-方法"}},[t._v("#")]),t._v(" 2. List 编写 equals 方法")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("List")]),t._v("中查找元素时，"),a("code",[t._v("List")]),t._v("的实现类通过元素的"),a("code",[t._v("equals()")]),t._v("方法比较两个元素是否相等，因此，放入的元素必须正确覆写"),a("code",[t._v("equals()")]),t._v("方法，Java标准库提供的"),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Integer")]),t._v("等已经覆写了"),a("code",[t._v("equals()")]),t._v("方法。")]),t._v(" "),a("p",[a("code",[t._v("equals()")]),t._v("方法的正确编写方法：")]),t._v(" "),a("ol",[a("li",[t._v("先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；")]),t._v(" "),a("li",[t._v("用"),a("code",[t._v("instanceof")]),t._v("判断传入的待比较的"),a("code",[t._v("Object")]),t._v("是不是当前类型，如果是，继续比较，否则，返回"),a("code",[t._v("false")]),t._v("；")]),t._v(" "),a("li",[t._v("对引用类型用"),a("code",[t._v("Objects.equals()")]),t._v("比较，对基本类型直接用"),a("code",[t._v("==")]),t._v("比较。")])]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("Objects.equals()")]),t._v("比较两个引用类型是否相等的目的是省去了判断"),a("code",[t._v("null")]),t._v("的麻烦。两个引用类型都是"),a("code",[t._v("null")]),t._v("时它们也是相等的。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-map-编写-equals-和-hashcode-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-map-编写-equals-和-hashcode-方法"}},[t._v("#")]),t._v(" 3. Map 编写 equals 和 hashCode 方法")]),t._v(" "),a("p",[t._v("要正确使用"),a("code",[t._v("HashMap")]),t._v("，作为"),a("code",[t._v("key")]),t._v("的类必须正确覆写"),a("code",[t._v("equals()")]),t._v("和"),a("code",[t._v("hashCode()")]),t._v("方法；")]),t._v(" "),a("p",[t._v("一个类如果覆写了"),a("code",[t._v("equals()")]),t._v("，就必须覆写"),a("code",[t._v("hashCode()")]),t._v("，并且覆写规则是：")]),t._v(" "),a("ul",[a("li",[t._v("如果"),a("code",[t._v("equals()")]),t._v("返回"),a("code",[t._v("true")]),t._v("，则"),a("code",[t._v("hashCode()")]),t._v("返回值必须相等，即，如果两个对象相等，则两个对象的"),a("code",[t._v("hashCode()")]),t._v("必须相等；")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("equals()")]),t._v("返回"),a("code",[t._v("false")]),t._v("，则"),a("code",[t._v("hashCode()")]),t._v("返回值尽量不要相等，即，如果两个对象不相等，则两个对象的"),a("code",[t._v("hashCode()")]),t._v("尽量不要相等。")])]),t._v(" "),a("p",[t._v("实现"),a("code",[t._v("hashCode()")]),t._v("方法可以通过"),a("code",[t._v("Objects.hashCode()")]),t._v("辅助方法实现。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意到"),a("code",[t._v("String")]),t._v("类已经正确实现了"),a("code",[t._v("hashCode()")]),t._v("方法，我们在计算"),a("code",[t._v("Person")]),t._v("的"),a("code",[t._v("hashCode()")]),t._v("时，反复使用"),a("code",[t._v("31*h")]),t._v("，这样做的目的是为了尽量把不同的"),a("code",[t._v("Person")]),t._v("实例的"),a("code",[t._v("hashCode()")]),t._v("均匀分布到整个"),a("code",[t._v("int")]),t._v("范围。")]),t._v(" "),a("p",[t._v("和实现"),a("code",[t._v("equals()")]),t._v("方法遇到的问题类似，如果"),a("code",[t._v("firstName")]),t._v("或"),a("code",[t._v("lastName")]),t._v("为"),a("code",[t._v("null")]),t._v("，上述代码工作起来就会抛"),a("code",[t._v("NullPointerException")]),t._v("。为了解决这个问题，我们在计算"),a("code",[t._v("hashCode()")]),t._v("的时候，经常借助"),a("code",[t._v("Objects.hash()")]),t._v("来计算：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h5",{attrs:{id:"_3-0-1-问题一-hashcode-返回的int范围高达±21亿-先不考虑负数-hashmap内部使用的数组得有多大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-1-问题一-hashcode-返回的int范围高达±21亿-先不考虑负数-hashmap内部使用的数组得有多大"}},[t._v("#")]),t._v(" 3.0.1. 问题一：hashCode()返回的"),a("code",[t._v("int")]),t._v("范围高达±21亿，先不考虑负数，"),a("code",[t._v("HashMap")]),t._v("内部使用的数组得有多大？")]),t._v(" "),a("p",[t._v("实际上"),a("code",[t._v("HashMap")]),t._v("初始化时默认的数组大小只有16，任何"),a("code",[t._v("key")]),t._v("，无论它的"),a("code",[t._v("hashCode()")]),t._v("有多大，都可以简单地通过：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0xf = 15")]),t._v("\n")])])]),a("p",[t._v("把索引确定在0～15，即永远不会超出数组范围。")]),t._v(" "),a("h5",{attrs:{id:"_3-0-2-问题二-如果添加超过16个key-value到hashmap-数组不够用了怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-2-问题二-如果添加超过16个key-value到hashmap-数组不够用了怎么办"}},[t._v("#")]),t._v(" 3.0.2. 问题二：如果添加超过16个"),a("code",[t._v("key-value")]),t._v("到"),a("code",[t._v("HashMap")]),t._v("，数组不够用了怎么办？")]),t._v(" "),a("p",[t._v("添加超过一定数量的"),a("code",[t._v("key-value")]),t._v("时，"),a("code",[t._v("HashMap")]),t._v("会在内部自动扩容，每次扩容一倍，即长度为16的数组扩展为长度32，相应地，需要重新确定"),a("code",[t._v("hashCode()")]),t._v("计算的索引位置。例如，对长度为32的数组计算"),a("code",[t._v("hashCode()")]),t._v("对应的索引，计算方式要改为：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0x1f = 31")]),t._v("\n")])])]),a("p",[t._v("由于扩容会导致重新分布已有的"),a("code",[t._v("key-value")]),t._v("，所以，频繁扩容对"),a("code",[t._v("HashMap")]),t._v("的性能影响很大。如果我们确定要使用一个容量为"),a("code",[t._v("10000")]),t._v("个"),a("code",[t._v("key-value")]),t._v("的"),a("code",[t._v("HashMap")]),t._v("，更好的方式是创建"),a("code",[t._v("HashMap")]),t._v("时就指定容量：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("虽然指定容量是"),a("code",[t._v("10000")]),t._v("，但"),a("code",[t._v("HashMap")]),t._v("内部的数组长度总是2n，因此，实际数组长度被初始化为比"),a("code",[t._v("10000")]),t._v("大的"),a("code",[t._v("16384")]),t._v("（2^14）。")]),t._v(" "),a("h5",{attrs:{id:"_3-0-3-问题三-如果不同的两个key-例如-a-和-b-它们的hashcode-恰好是相同的-这种情况是完全可能的-因为不相等的两个实例-只要求hashcode-尽量不相等-那么-当我们放入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-3-问题三-如果不同的两个key-例如-a-和-b-它们的hashcode-恰好是相同的-这种情况是完全可能的-因为不相等的两个实例-只要求hashcode-尽量不相等-那么-当我们放入"}},[t._v("#")]),t._v(" 3.0.3. 问题三：如果不同的两个"),a("code",[t._v("key")]),t._v("，例如"),a("code",[t._v('"a"')]),t._v("和"),a("code",[t._v('"b"')]),t._v("，它们的"),a("code",[t._v("hashCode()")]),t._v("恰好是相同的（这种情况是完全可能的，因为不相等的两个实例，只要求"),a("code",[t._v("hashCode()")]),t._v("尽量不相等），那么，当我们放入：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Xiao Ming"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Xiao Hong"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("时，由于计算出的数组索引相同，后面放入的"),a("code",[t._v('"Xiao Hong"')]),t._v("会不会把"),a("code",[t._v('"Xiao Ming"')]),t._v("覆盖了？")]),t._v(" "),a("p",[t._v("当然不会！使用"),a("code",[t._v("Map")]),t._v("的时候，只要"),a("code",[t._v("key")]),t._v("不相同，它们映射的"),a("code",[t._v("value")]),t._v("就互不干扰。但是，在"),a("code",[t._v("HashMap")]),t._v("内部，确实可能存在不同的"),a("code",[t._v("key")]),t._v("，映射到相同的"),a("code",[t._v("hashCode()")]),t._v("，即相同的数组索引上，肿么办？")]),t._v(" "),a("p",[t._v("我们就假设"),a("code",[t._v('"a"')]),t._v("和"),a("code",[t._v('"b"')]),t._v("这两个"),a("code",[t._v("key")]),t._v("最终计算出的索引都是5，那么，在"),a("code",[t._v("HashMap")]),t._v("的数组中，实际存储的不是一个"),a("code",[t._v("Person")]),t._v("实例，而是一个"),a("code",[t._v("List")]),t._v("，它包含两个"),a("code",[t._v("Entry")]),t._v("，一个是"),a("code",[t._v('"a"')]),t._v("的映射，一个是"),a("code",[t._v('"b"')]),t._v("的映射：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  ┌───┐\n0 │   │\n  ├───┤\n1 │   │\n  ├───┤\n2 │   │\n  ├───┤\n3 │   │\n  ├───┤\n4 │   │\n  ├───┤\n5 │ ●─┼───> List<Entry<String, Person>>\n  ├───┤\n6 │   │\n  ├───┤\n7 │   │\n  └───┘\n")])])]),a("p",[t._v("在查找的时候，例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("HashMap内部通过"),a("code",[t._v('"a"')]),t._v("找到的实际上是"),a("code",[t._v("List<Entry<String, Person>>")]),t._v("，它还需要遍历这个"),a("code",[t._v("List")]),t._v("，并找到一个"),a("code",[t._v("Entry")]),t._v("，它的"),a("code",[t._v("key")]),t._v("字段是"),a("code",[t._v('"a"')]),t._v("，才能返回对应的"),a("code",[t._v("Person")]),t._v("实例。")]),t._v(" "),a("p",[t._v("我们把不同的"),a("code",[t._v("key")]),t._v("具有相同的"),a("code",[t._v("hashCode()")]),t._v("的情况称之为哈希冲突。在冲突的时候，一种最简单的解决办法是用"),a("code",[t._v("List")]),t._v("存储"),a("code",[t._v("hashCode()")]),t._v("相同的"),a("code",[t._v("key-value")]),t._v("。显然，如果冲突的概率越大，这个"),a("code",[t._v("List")]),t._v("就越长，"),a("code",[t._v("Map")]),t._v("的"),a("code",[t._v("get()")]),t._v("方法效率就越低。")]),t._v(" "),a("h3",{attrs:{id:"_4-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-queue"}},[t._v("#")]),t._v(" 4. Queue")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("throw Exception")]),t._v(" "),a("th",[t._v("返回false或null")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("添加元素到队尾")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("add(E e)")]),t._v(" "),a("td",[t._v("boolean offer(E e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("取队首元素并删除")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("E remove()")]),t._v(" "),a("td",[t._v("E poll()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("取队首元素但不删除")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("E element()")]),t._v(" "),a("td",[t._v("E peek()")])])])]),t._v(" "),a("p",[a("code",[t._v("LinkedList")]),t._v("即实现了"),a("code",[t._v("List")]),t._v("接口，又实现了"),a("code",[t._v("Queue")]),t._v("接口，但是，在使用的时候，如果我们把它当作List，就获取List的引用，如果我们把它当作Queue，就获取Queue的引用：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个List:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个Queue:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);