(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{290:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88"}},[t._v("1. 排列组合")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#11-%E8%B5%B0%E6%96%B9%E6%A0%BC"}},[t._v("1.1. 走方格")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#12-%E4%B8%83%E4%BA%BA%E7%AB%99%E9%98%9F%E4%BF%9D%E8%AF%81a%E5%9C%A8b%E7%9A%84%E5%B7%A6%E8%BE%B9"}},[t._v("1.2. 七人站队，保证A在B的左边")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#13-%E7%94%B2%E4%B9%99%E7%94%B2%E4%B8%99%E4%B8%8D%E7%9B%B8%E9%82%BB"}},[t._v("1.3. 甲乙、甲丙不相邻")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#14-%E5%88%8610%E9%A2%97%E7%B3%96%E6%9E%9C%E7%BB%993%E4%B8%AA%E4%BA%BA%E6%AF%8F%E4%BA%BA%E8%87%B3%E5%B0%91%E4%B8%80%E9%A2%97"}},[t._v("1.4. 分10颗糖果给3个人，每人至少一颗")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#15-10%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E7%90%83%E6%94%BE%E5%85%A53%E4%B8%AA%E6%A1%B6%E9%87%8C%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E6%96%B9%E6%B3%95"}},[t._v("1.5. 10个不同的球放入3个桶里有多少种方法")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#16-%E5%8D%81%E9%A2%97%E7%B3%96%E6%AF%8F%E5%A4%A9%E8%87%B3%E5%B0%91%E5%90%83%E4%B8%80%E9%A2%97%E5%90%83%E5%AE%8C%E4%B8%BA%E6%AD%A2%E9%97%AE%E6%9C%89%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E5%90%83%E6%B3%95"}},[t._v("1.6. 十颗糖，每天至少吃一颗，吃完为止，问有多少种不同的吃法？")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#17-%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0"}},[t._v("1.7. 卡特兰数")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#171-%E9%AB%98%E7%9F%AE%E6%8E%92%E4%B8%A4%E6%8E%92"}},[t._v("1.7.1. 高矮排两排")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#18-%E9%94%99%E8%A3%85%E4%BF%A1%E5%B0%81%E9%97%AE%E9%A2%98"}},[t._v("1.8. 错装信封问题")])])])])]),t._v(" "),a("h2",{attrs:{id:"_1-排列组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-排列组合"}},[t._v("#")]),t._v(" 1. 排列组合")]),t._v(" "),a("h3",{attrs:{id:"_1-1-走方格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-走方格"}},[t._v("#")]),t._v(" 1.1. 走方格")]),t._v(" "),a("p",[t._v("题目描述：\n在6 * 9的方格中，以左上角为起点，右下角为终点，每次只能向下走或者向右走，请问一共有多少种不同的走法。")]),t._v(" "),a("p",[t._v("思路：\n一共走13步，其中必然有5步向下，剩下的8步向右。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  5      8\nC 13 + C 13 = 1287\n")])])]),a("h3",{attrs:{id:"_1-2-七人站队-保证a在b的左边"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-七人站队-保证a在b的左边"}},[t._v("#")]),t._v(" 1.2. 七人站队，保证A在B的左边")]),t._v(" "),a("p",[t._v("题目描述：\nABCDEFG七人站队，要求A必须在B的左边，但不要求一定相邻，请问共有多少种排法？\n如果要求A必须在B的左边，且必须相邻，请问一共有多少种排法？")]),t._v(" "),a("p",[t._v("问题一：不要求相邻的排法？")]),t._v(" "),a("p",[t._v("7!，一半的情况是A在B的左边，一半的情况是B在A的左边，所以：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("7! / 2 = 2520 种\n")])])]),a("p",[t._v("问题二：A和B一定相邻，有多少种排法？")]),t._v(" "),a("p",[t._v("将AB看作一个人，那么总共就有6个人，所以：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("6! = 720 种\n")])])]),a("h3",{attrs:{id:"_1-3-甲乙、甲丙不相邻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-甲乙、甲丙不相邻"}},[t._v("#")]),t._v(" 1.3. 甲乙、甲丙不相邻")]),t._v(" "),a("p",[t._v("题目描述：\n六个人排成一排，要求甲乙、甲丙不相邻，请问有多少种排法？")]),t._v(" "),a("p",[t._v("思路：")]),t._v(" "),a("ol",[a("li",[t._v("6个人的全排列总数为6! = 720")]),t._v(" "),a("li",[t._v("甲乙相邻的总数为240种")]),t._v(" "),a("li",[t._v("同理，甲丙相邻的总数为240种")]),t._v(" "),a("li",[t._v("乙甲丙或丙甲乙出现的次数为4! * 2 = 48 种")])]),t._v(" "),a("p",[t._v("所以：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("720 - 240 - 240 + 48 = 288 种\n")])])]),a("h3",{attrs:{id:"_1-4-分10颗糖果给3个人-每人至少一颗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-分10颗糖果给3个人-每人至少一颗"}},[t._v("#")]),t._v(" 1.4. 分10颗糖果给3个人，每人至少一颗")]),t._v(" "),a("p",[t._v("题目描述：\n10颗相同的糖果，分给3个人，每人至少一颗，问有多少种分法？")]),t._v(" "),a("p",[t._v("思路：\n10颗糖果中间的位置有9个，所以目标转换为9个空隙中选两个插入插板，所以：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  2\nC 9 = 36 种 \n")])])]),a("h3",{attrs:{id:"_1-5-10个不同的球放入3个桶里有多少种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-10个不同的球放入3个桶里有多少种方法"}},[t._v("#")]),t._v(" 1.5. 10个不同的球放入3个桶里有多少种方法")]),t._v(" "),a("p",[t._v("每个球都要被放进桶里，每个球都有3种可能")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("3^10 = 59049 种\n")])])]),a("h3",{attrs:{id:"_1-6-十颗糖-每天至少吃一颗-吃完为止-问有多少种不同的吃法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-十颗糖-每天至少吃一颗-吃完为止-问有多少种不同的吃法"}},[t._v("#")]),t._v(" 1.6. 十颗糖，每天至少吃一颗，吃完为止，问有多少种不同的吃法？")]),t._v(" "),a("p",[t._v("思路：")]),t._v(" "),a("ol",[a("li",[t._v("如果一天吃完所有的糖，方法有1种")]),t._v(" "),a("li",[t._v("如果两天吃完所有的糖，方法有"),a("code",[t._v("C(9,1)")]),t._v("种")]),t._v(" "),a("li",[t._v("如果三天吃完所有的糖，方法有"),a("code",[t._v("C(9,2)")]),t._v("种")]),t._v(" "),a("li",[t._v("如果四天吃完所有的糖，方法有"),a("code",[t._v("C(9,3)")]),t._v("种")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("C(N,0) + C(N,1) +…+ C(N,N) = 2的N次方\nC(9,0) + C(9,1) +…+ C(9,9) = 2的9次方 = 512 种\n")])])]),a("h3",{attrs:{id:"_1-7-卡特兰数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-卡特兰数"}},[t._v("#")]),t._v(" 1.7. 卡特兰数")]),t._v(" "),a("p",[t._v("应用场景：")]),t._v(" "),a("ol",[a("li",[t._v("括号化问题。")])]),t._v(" "),a("p",[t._v("矩阵链乘： "),a("code",[t._v("P=a1×a2×a3×……×an")]),t._v("，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？("),a("code",[t._v("h(n)")]),t._v("种)")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("出栈次序问题。")])]),t._v(" "),a("p",[t._v("一个栈(无穷大)的进栈序列为"),a("code",[t._v("1,2,3,..n")]),t._v(",有多少个不同的出栈序列?")]),t._v(" "),a("p",[t._v("类似：\n(1) 有"),a("code",[t._v("2n")]),t._v("个人排成一行进入剧场。入场费5元。其中只有"),a("code",[t._v("n")]),t._v("个人有一张5元钞票，另外"),a("code",[t._v("n")]),t._v("人只有10元钞票，剧院无其它钞票，问有多少中方法使得只要有10元的人买票，售票处就有5元的钞票找零？(将持5元者到达视作将5元入栈，持10元者到达视作使栈中某5元出栈)")]),t._v(" "),a("p",[t._v("(2) 在圆上选择"),a("code",[t._v("2n")]),t._v("个点,将这些点成对连接起来，使得所得到的"),a("code",[t._v("n")]),t._v("条线段不相交的方法数。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("将多边行划分为三角形问题。")])]),t._v(" "),a("p",[t._v("将一个凸多边形区域分成三角形区域的方法数?")]),t._v(" "),a("p",[t._v("类似：一位大城市的律师在她住所以北"),a("code",[t._v("n")]),t._v("个街区和以东"),a("code",[t._v("n")]),t._v("个街区处工作。每天她走"),a("code",[t._v("2n")]),t._v("个街区去上班。如果她从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("给顶节点组成二叉树的问题。")])]),t._v(" "),a("p",[t._v("给定"),a("code",[t._v("N")]),t._v("个节点，能构成多少种形状不同的二叉树？\n先取一个点作为顶点,然后左边依次可以取0至"),a("code",[t._v("N-1")]),t._v("个相对应的,右边是"),a("code",[t._v("N-1")]),t._v("到0个,两两配对相乘，就是"),a("code",[t._v("h(0)*h(n-1) + h(2)*h(n-2) +…+ h(n-1)h(0)=h(n)")]),t._v("（能构成"),a("code",[t._v("h(N)")]),t._v("个）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("f(0) = 1\nf(1) = 1\nf(2) = 2\nf(3) = 5\n...\nf(n) = f(0)*f(n-1)+f(1)*f(n-2)+f(3)*f(n-4)+...+f(n-1)*f(0)\n     = (1 / (n + 1)) * C(2*n, n)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("C(2*n, n) - C(2*n, n+1) = (1 / (n + 1)) * C(2*n, n)\n")])])]),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" getCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取C(m, n)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" i\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" j\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("d\n")])])]),a("h4",{attrs:{id:"_1-7-1-高矮排两排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-1-高矮排两排"}},[t._v("#")]),t._v(" 1.7.1. 高矮排两排")]),t._v(" "),a("p",[t._v("题目描述：")]),t._v(" "),a("p",[t._v("12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的第一排的人高，问排列方式有多少种？")]),t._v(" "),a("p",[t._v("给定一个偶数n，请返回所求的排列方式个数。保证结果在int范围内。")]),t._v(" "),a("p",[t._v("思路：\n0：在第一排\n1：在第二排")]),t._v(" "),a("p",[t._v("任意前缀0的个数不少于1的个数（与括号、栈顺序问题相同），本质上也是一个卡特兰数问题。")]),t._v(" "),a("h3",{attrs:{id:"_1-8-错装信封问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-错装信封问题"}},[t._v("#")]),t._v(" 1.8. 错装信封问题")]),t._v(" "),a("p",[t._v("题目描述：")]),t._v(" "),a("p",[t._v("有n个信封，包含n封信，现在把信拿出来，再装回去，要求每封信不能装回它原来的信封，问有多少种装法?")]),t._v(" "),a("p",[t._v("给定一个整数n，请返回装发个数，为了防止溢出，请返回"),a("code",[t._v("结果Mod 1000000007")]),t._v("的值。保证n的大小小于等于300。")]),t._v(" "),a("p",[t._v("测试样例：\n2")]),t._v(" "),a("p",[t._v("返回：1")]),t._v(" "),a("p",[t._v("思路：\n对于n封信按照题目要求的装法即为f(n)\n假设第n封信放入了第i个信封\n情况一：第i封信也放入了第n个信封，后续为f(n-2)\n情况二：第i封信没放入第n个信封，后续为f(n-1)")]),t._v(" "),a("p",[t._v("n封信放入i个信封，i的选择有n-1种\n所以总数为 "),a("code",[t._v("f(n) = (n-1)*(f(n-1) + f(n-2))")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);