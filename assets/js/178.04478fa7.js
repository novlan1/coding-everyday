(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{456:function(e,v,_){"use strict";_.r(v);var a=_(14),t=Object(a.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("ul",[v("li",[v("a",{attrs:{href:"#11-webpack-%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F"}},[e._v("1.1. webpack 打包方式")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#12-webpack-dev-server"}},[e._v("1.2. "),v("code",[e._v("webpack-dev-server")])]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#121-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"}},[e._v("1.2.1. 配置文件")])])])]),e._v(" "),v("li",[v("a",{attrs:{href:"#13-hmr-hot-module-replacement"}},[e._v("1.3. "),v("code",[e._v("HMR")]),e._v(" ("),v("code",[e._v("Hot Module Replacement")]),e._v(")")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#131-%E5%85%B3%E4%BA%8E-babel"}},[e._v("1.3.1. 关于 babel")])])])]),e._v(" "),v("li",[v("a",{attrs:{href:"#14-tree-shaking"}},[e._v("1.4. Tree shaking")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#15-production-%E5%92%8C-development%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%86%E6%89%93%E5%8C%85"}},[e._v("1.5. "),v("code",[e._v("production")]),e._v(" 和 "),v("code",[e._v("development")]),e._v("模式的区分打包")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#16-code-splitting"}},[e._v("1.6. code splitting")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#17-splitchunksplugin%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0"}},[e._v("1.7. "),v("code",[e._v("SplitChunksPlugin")]),e._v("配置参数")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#18-css%E6%96%87%E4%BB%B6%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2mini-css-extract-plugin--optimizecssassetsplugin"}},[e._v("1.8. CSS文件的代码分割"),v("code",[e._v("mini-css-extract-plugin / OptimizeCSSAssetsPlugin")])])]),e._v(" "),v("li",[v("a",{attrs:{href:"#19-shimming"}},[e._v("1.9. "),v("code",[e._v("Shimming")])])]),e._v(" "),v("li",[v("a",{attrs:{href:"#110-webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96"}},[e._v("1.10. webpack性能优化")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#111-vue-%E5%92%8C-react-%E4%B8%AD%E7%9A%84-webpack-%E5%8C%BA%E5%88%AB"}},[e._v("1.11. Vue 和 React 中的 Webpack 区别")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#112-webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B"}},[e._v("1.12. webpack工作流程")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#113-tree-shaking-%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%92%8C-dead-code-eliminationdce%E7%9A%84%E5%8C%BA%E5%88%AB"}},[e._v("1.13. Tree Shaking 原理以及和 dead code elimination（DCE）的区别")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#1131-dead-code-%E4%B8%80%E8%88%AC%E5%85%B7%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E7%89%B9%E5%BE%81"}},[e._v("1.13.1. Dead Code 一般具有以下几个特征")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#1132-tree-shaking"}},[e._v("1.13.2. Tree Shaking")])])])]),e._v(" "),v("li",[v("a",{attrs:{href:"#114-module-chunk-bundle-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB"}},[e._v("1.14. "),v("code",[e._v("module")]),e._v(", "),v("code",[e._v("chunk")]),e._v(", "),v("code",[e._v("bundle")]),e._v(" 之间的关系")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#115-webpack-%E6%B5%81%E7%A8%8B"}},[e._v("1.15. webpack 流程")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#116-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8webpack%E6%9D%A5%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E5%92%8C%E4%BD%93%E9%AA%8C"}},[e._v("1.16. 如何利用webpack来优化前端性能？（提高性能和体验）")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#117-%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6"}},[e._v("1.17. 如何提高webpack的构建速度？")])]),e._v(" "),v("li",[v("a",{attrs:{href:"#118-%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B5%E5%BA%94%E7%94%A8"}},[e._v("1.18. 怎么配置单页应用？怎么配置多页应用？")])])]),e._v(" "),v("h2",{attrs:{id:"_1-webpack-简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack-简介"}},[e._v("#")]),e._v(" 1. webpack 简介 ")]),e._v(" "),v("p",[v("code",[e._v("webpack")]),e._v("是一个前端模块化打包工具，最开始它只能打包 JS 文件，但是随着 webpack 的发展，他还能打包如 CSS、图片等文件。主要由入口，出口，loader，plugins 四个部分。")]),e._v(" "),v("h3",{attrs:{id:"_1-1-webpack-打包方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-webpack-打包方式"}},[e._v("#")]),e._v(" 1.1. webpack 打包方式")]),e._v(" "),v("p",[e._v("用"),v("code",[e._v("webpack")]),e._v("打包有三种方式：")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("global")]),e._v("，全局安装了"),v("code",[e._v("webpack")]),e._v("，命令行输入"),v("code",[e._v("webpack index.js")])]),e._v(" "),v("li",[v("code",[e._v("local")]),e._v("  命令："),v("code",[e._v("npx webpack index.js")])]),e._v(" "),v("li",[e._v("配置脚本"),v("code",[e._v("scripts")]),e._v("："),v("code",[e._v("webpack")]),e._v("命令: "),v("code",[e._v("npm run build webpack")])])]),e._v(" "),v("h3",{attrs:{id:"_1-2-webpack-dev-server"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-webpack-dev-server"}},[e._v("#")]),e._v(" 1.2. "),v("code",[e._v("webpack-dev-server")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('"dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"\n')])])]),v("p",[v("code",[e._v("webpack-dev-server")]),e._v("是"),v("code",[e._v("webpack")]),e._v("官方提供的一个小型"),v("code",[e._v("Express")]),e._v("服务器。使用它可以为"),v("code",[e._v("webpack")]),e._v("打包生成的资源文件提供web服务")]),e._v(" "),v("p",[v("code",[e._v("webpack-dev-server")]),e._v(" 主要提供两个功能：")]),e._v(" "),v("ol",[v("li",[e._v("为静态文件提供服务")]),e._v(" "),v("li",[e._v("自动刷新和热替换(HMR)")])]),e._v(" "),v("p",[v("code",[e._v("webpack--watch")]),e._v(" 监听打包的文件，只要打包的文件发生变化，就会重新打包。")]),e._v(" "),v("p",[v("code",[e._v("Webpack-dev-server")]),e._v("打包不会产生"),v("code",[e._v("dist")]),e._v("目录，而是把dist目录里的东西放到内存里，这样打包速度更快。")]),e._v(" "),v("p",[e._v("借助"),v("code",[e._v("webpack-dev-server")]),e._v("发送"),v("code",[e._v("ajax")]),e._v("请求的原因，"),v("code",[e._v("ajax")]),e._v("只能通过"),v("code",[e._v("http")]),e._v("协议，直接打开"),v("code",[e._v("html")]),e._v("是"),v("code",[e._v("file")]),e._v("协议。 开启一个web服务器就可以了，"),v("code",[e._v("localhost:8080")]),e._v("是一个网址，可以发送"),v("code",[e._v("ajax")]),e._v("请求。")]),e._v(" "),v("p",[e._v("参数含义：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("--inline")]),e._v(" 热更新实现的方式，此方式会将"),v("code",[e._v("webpack-dev-server")]),e._v("客户端加入到webpack入口文件的配置中。还有一个 "),v("code",[e._v("--iframe")]),e._v(" 不推荐的方式。")]),e._v(" "),v("li",[v("code",[e._v("--progress")]),e._v(" 是否显示在编译时候的进度条，一般都会有，看着编译的进度，体验好一些。")]),e._v(" "),v("li",[v("code",[e._v("--config XXXX.js")]),e._v(" 通过这个参数指定一个新的配置文件。这里指定了 "),v("code",[e._v("build/webpack.dev.conf.js")])])]),e._v(" "),v("h4",{attrs:{id:"_1-2-1-配置文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-配置文件"}},[e._v("#")]),e._v(" 1.2.1. 配置文件")]),e._v(" "),v("p",[v("code",[e._v("Webpack.config.js")]),e._v("中添加"),v("code",[e._v("devServer")]),e._v("配置项：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("contentBase")]),e._v(" 告诉服务器从哪里提供内容，最好是绝对路径；")]),e._v(" "),v("li",[v("code",[e._v("proxy")]),e._v("添加跨域代理；")]),e._v(" "),v("li",[v("code",[e._v("open: true")]),e._v(",自动打开浏览器；")]),e._v(" "),v("li",[v("code",[e._v("port")]),e._v("端口；")]),e._v(" "),v("li",[v("code",[e._v("hotOnly")]),e._v("即使浏览器"),v("code",[e._v("HMR")]),e._v("不生效，也不自动刷新的功能；")]),e._v(" "),v("li",[v("code",[e._v("hot: true")]),e._v("，开启"),v("code",[e._v("HMR")])])]),e._v(" "),v("p",[v("code",[e._v("hot")]),e._v(" 和 "),v("code",[e._v("hotOnly")]),e._v(" 的区别是在某些模块不支持热更新的情况下，前者会自动刷新页面，后者不会刷新页面，而是在控制台输出热更新失败。")]),e._v(" "),v("p",[e._v("可以自己写一个"),v("code",[e._v("server.js")]),e._v(", 用"),v("code",[e._v("webpackDevMiddleware")]),e._v("等做个"),v("code",[e._v("webpack-dev-server")]),e._v("。")]),e._v(" "),v("h3",{attrs:{id:"_1-3-hmr-hot-module-replacement"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-hmr-hot-module-replacement"}},[e._v("#")]),e._v(" 1.3. "),v("code",[e._v("HMR")]),e._v(" ("),v("code",[e._v("Hot Module Replacement")]),e._v(")")]),e._v(" "),v("p",[e._v("块热替换("),v("code",[e._v("HMR")]),e._v(" - "),v("code",[e._v("Hot Module Replacement")]),e._v(")功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。")]),e._v(" "),v("p",[e._v("配置：")]),e._v(" "),v("ol",[v("li",[e._v("在 "),v("code",[e._v("Webpack")]),e._v(" 的 "),v("code",[e._v("devServer")]),e._v(" 配置中设置了 "),v("code",[e._v("hot")]),e._v(" 为 "),v("code",[e._v("true")])]),e._v(" "),v("li",[e._v("并且在 "),v("code",[e._v("Webpack")]),e._v(" 的 plugin 中添加了 "),v("code",[e._v("new webpack.HotModuleReplacementPlugin()")]),e._v(" 这个插件")])]),e._v(" "),v("p",[e._v("Vue 和 React 内置了热更新，并且有"),v("code",[e._v("module.hot.accept")]),e._v("功能。")]),e._v(" "),v("p",[v("code",[e._v("module.hot.accept")]),e._v("：接受("),v("code",[e._v("accept")]),e._v(")给定依赖模块的更新，并触发一个 回调函数 来对这些更新做出响应。")]),e._v(" "),v("h4",{attrs:{id:"_1-3-1-关于-babel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-关于-babel"}},[e._v("#")]),e._v(" 1.3.1. 关于 babel")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("babel-preset-env")]),e._v("将"),v("code",[e._v("es6")]),e._v("语法转为"),v("code",[e._v("es5")]),e._v("，"),v("code",[e._v("babel-loader")]),e._v("只是打通了"),v("code",[e._v("babel")]),e._v("和"),v("code",[e._v("webpack")])]),e._v(" "),v("li",[v("code",[e._v("babel-transform-runtime")]),e._v("不会污染全局环境")])]),e._v(" "),v("h3",{attrs:{id:"_1-4-tree-shaking"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-tree-shaking"}},[e._v("#")]),e._v(" 1.4. Tree shaking")]),e._v(" "),v("ul",[v("li",[e._v("移除 JavaScript 上下文中的未引用代码("),v("code",[e._v("dead-code")]),e._v(")。")]),e._v(" "),v("li",[e._v("只支持"),v("code",[e._v("ES module")]),e._v("，即"),v("code",[e._v("import")]),e._v("（静态），不支持"),v("code",[e._v("require.js")])])]),e._v(" "),v("p",[e._v("配置： "),v("code",[e._v("webpack.config.js")]),e._v("中添加 "),v("code",[e._v("optimization:{ usedExports: true }")]),e._v("，开发环境才需要配置，生产环境无需配置。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Package.json")]),e._v("中加上"),v("code",[e._v("sideEffects: false")]),e._v(", 用来说明任何模块都可以"),v("code",[e._v("tree-shaking")]),e._v(", 这个属性还可以设置数组形式的属性值，数组内的"),v("code",[e._v("js")]),e._v("不用"),v("code",[e._v("tree-shaking")]),e._v("。")]),e._v(" "),v("li",[e._v("一般所有"),v("code",[e._v("css")]),e._v("文件都会忽略"),v("code",[e._v("tree shaking")]),e._v("，所以可以设置成"),v("code",[e._v("”*.css”")])])]),e._v(" "),v("h3",{attrs:{id:"_1-5-production-和-development模式的区分打包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-production-和-development模式的区分打包"}},[e._v("#")]),e._v(" 1.5. "),v("code",[e._v("production")]),e._v(" 和 "),v("code",[e._v("development")]),e._v("模式的区分打包")]),e._v(" "),v("p",[e._v("安装"),v("code",[e._v("webpack-merge")])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("merge(baseConfig, devConfig)\n")])])]),v("p",[e._v("先分后合")]),e._v(" "),v("ul",[v("li",[e._v("把"),v("code",[e._v("production")]),e._v("配置文件和"),v("code",[e._v("development")]),e._v("配置文件中的公共部分拿出来，然后"),v("code",[e._v("merge")]),e._v("输出。")])]),e._v(" "),v("h3",{attrs:{id:"_1-6-code-splitting"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-code-splitting"}},[e._v("#")]),e._v(" 1.6. code splitting")]),e._v(" "),v("ul",[v("li",[e._v("能够把代码分离到不同的 "),v("code",[e._v("bundle")]),e._v(" 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 "),v("code",[e._v("bundle")]),e._v("，以及控制资源加载优先级。")]),e._v(" "),v("li",[e._v("拆分业务代码和非业务代码，当页面业务逻辑发生变化时，只要加载"),v("code",[e._v("main.js")]),e._v("即可")])]),e._v(" "),v("p",[v("code",[e._v("Webpack")]),e._v("中实现代码分割的两种方式")]),e._v(" "),v("ol",[v("li",[e._v("同步代码：只需要在"),v("code",[e._v("webpack.base.js")]),e._v("中做"),v("code",[e._v("optimization")]),e._v("的配置即可")]),e._v(" "),v("li",[e._v("异步代码("),v("code",[e._v("import")]),e._v(")：无需任何配置，会自动进行代码分割，放置到新的文件中。")])]),e._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("optimization")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("splitChunks")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("chunks")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'all'")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),v("h3",{attrs:{id:"_1-7-splitchunksplugin配置参数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-splitchunksplugin配置参数"}},[e._v("#")]),e._v(" 1.7. "),v("code",[e._v("SplitChunksPlugin")]),e._v("配置参数")]),e._v(" "),v("p",[e._v("参数：")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("chunks: async 只有异步代码可以实现代码分割，all为异步、同步都代码分割（但是需要cacheGroups\n        的vendors配置好），initial对同步代码进行代码分割\nminSize   包大小超过某值时，才对其进行打包\nmaxSize   包大小超过某值时，尝试对其二次分割\nminChunks: 1,   打包以后的chunk对一个模块使用多少次时才对其进行代码分割，默认1\nmaxAsyncRequests: 5,   超过5个不再进行代码分割\nmaxIntialRequests: 3,   入口文件引入其他库，超过3个时不再进行代码分割\nautomaticNameDelimiter: ‘~’,   波浪线连接\nname:true,   让cacheGroups的名字有效\ncacheGroups  决定分割出来的代码放到哪个文件里去\npriority   优先级，决定打包后的文件起什么名字、放到哪\n")])])]),v("h3",{attrs:{id:"_1-8-css文件的代码分割mini-css-extract-plugin-optimizecssassetsplugin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-css文件的代码分割mini-css-extract-plugin-optimizecssassetsplugin"}},[e._v("#")]),e._v(" 1.8. CSS文件的代码分割"),v("code",[e._v("mini-css-extract-plugin / OptimizeCSSAssetsPlugin")])]),e._v(" "),v("ol",[v("li",[e._v("代码分割："),v("code",[e._v("mini-css-extract-plugin")]),e._v("\n将线上css单独拿出来，而不是放在js中")])]),e._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("output")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("filename")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[name].js'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("chunkFileName")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[name].bundle.js'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("publicPath")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("path")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" path"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("resolve")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("__dirname"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'../bundle'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),v("p",[e._v("一个包（"),v("code",[e._v("css")]),e._v("或"),v("code",[e._v("js")]),e._v("）如果被页面直接引用，就会走"),v("code",[e._v("filename")]),e._v("，否则会走"),v("code",[e._v("chunkFilename")])]),e._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[e._v("合并压缩css： "),v("code",[e._v("OptimizeCSSAssetsPlugin")])])]),e._v(" "),v("h3",{attrs:{id:"_1-9-shimming"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-shimming"}},[e._v("#")]),e._v(" 1.9. "),v("code",[e._v("Shimming")])]),e._v(" "),v("p",[e._v("一些第三方的库("),v("code",[e._v("library")]),e._v(")可能会引用一些全局依赖（例如"),v("code",[e._v("jQuery")]),e._v(" 中的 "),v("code",[e._v("$")]),e._v("）。这些库也可能创建一些需要被导出的全局变量。这些“不符合规范的模块”就是"),v("code",[e._v("shimming")]),e._v("发挥作用的地方")]),e._v(" "),v("p",[e._v("使用"),v("code",[e._v("webpack.ProvidePlugin({})")])]),e._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("plugins")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("webpack"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ProvidePlugin")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("_")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[e._v("'lodash'")]),e._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),v("h3",{attrs:{id:"_1-10-webpack性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-webpack性能优化"}},[e._v("#")]),e._v(" 1.10. webpack性能优化")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("plugin")]),e._v("尽可能精简并确保可靠")]),e._v(" "),v("li",[v("code",[e._v("loader")]),e._v("少用")])]),e._v(" "),v("h3",{attrs:{id:"_1-11-vue-和-react-中的-webpack-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-vue-和-react-中的-webpack-区别"}},[e._v("#")]),e._v(" 1.11. Vue 和 React 中的 Webpack 区别")]),e._v(" "),v("ul",[v("li",[e._v("Vue-cli 脚手架自己封装了 webpack 的API，通过改"),v("code",[e._v("vue.config.js")]),e._v("配置项间接改 webpack 的配置")]),e._v(" "),v("li",[e._v("React 脚手架用的是原封不动的 webpack")])]),e._v(" "),v("h3",{attrs:{id:"_1-12-webpack工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-webpack工作流程"}},[e._v("#")]),e._v(" 1.12. webpack工作流程")]),e._v(" "),v("p",[e._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),e._v(" "),v("ol",[v("li",[e._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),e._v(" "),v("li",[e._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),e._v(" "),v("li",[e._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),e._v(" "),v("li",[e._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译。利用babel转为Ast->遍历Ast->调用ImportDeclaration。找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),e._v(" "),v("li",[e._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),e._v(" "),v("li",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),e._v(" "),v("li",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),e._v(" "),v("p",[e._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),e._v(" "),v("h3",{attrs:{id:"_1-13-tree-shaking-原理以及和-dead-code-elimination-dce-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-tree-shaking-原理以及和-dead-code-elimination-dce-的区别"}},[e._v("#")]),e._v(" 1.13. Tree Shaking 原理以及和 dead code elimination（DCE）的区别")]),e._v(" "),v("h4",{attrs:{id:"_1-13-1-dead-code-一般具有以下几个特征"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-1-dead-code-一般具有以下几个特征"}},[e._v("#")]),e._v(" 1.13.1. Dead Code 一般具有以下几个特征")]),e._v(" "),v("ul",[v("li",[e._v("代码不会被执行，不可到达")]),e._v(" "),v("li",[e._v("代码执行的结果不会被用到")]),e._v(" "),v("li",[e._v("代码只会影响死变量（只写不读）")])]),e._v(" "),v("p",[e._v("传统的编译型语言都是由编译器去除掉DC，而js是通过uglify插件去除")]),e._v(" "),v("h4",{attrs:{id:"_1-13-2-tree-shaking"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-2-tree-shaking"}},[e._v("#")]),e._v(" 1.13.2. Tree Shaking")]),e._v(" "),v("p",[e._v("es6模块特点")]),e._v(" "),v("ul",[v("li",[e._v("只能作为模块顶层的语句出现")]),e._v(" "),v("li",[e._v("import 的模块名只能是字符串常量")]),e._v(" "),v("li",[e._v("import binding 是 immutable的")])]),e._v(" "),v("p",[e._v("ES6模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析，这就是tree-shaking的基础。")]),e._v(" "),v("p",[e._v("所谓静态分析就是不执行代码，从字面量上对代码进行分析，"),v("strong",[e._v("ES6之前的模块化，比如我们可以动态require一个模块，只有执行后才知道引用的什么模块，这个就不能通过静态分析去做优化")]),e._v("。")]),e._v(" "),v("p",[e._v("正是基于这个基础上，才使得 tree-shaking 成为可能，这也是为什么 rollup 和 webpack 2 都要用 ES6 module syntax 才能 tree-shaking。")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("rollup")]),e._v(" 只处理函数和顶层的 "),v("code",[e._v("import/export")]),e._v(" 变量，不能把没用到的类的方法消除掉")]),e._v(" "),v("li",[v("code",[e._v("javascript")]),e._v(" 动态语言的特性使得静态分析比较困难")])]),e._v(" "),v("p",[e._v("参考资料：")]),e._v(" "),v("ol",[v("li",[v("a",{attrs:{href:"https://segmentfault.com/a/1190000022037771/",target:"_blank",rel:"noopener noreferrer"}},[e._v("面试准备"),v("OutboundLink")],1)])]),e._v(" "),v("h3",{attrs:{id:"_1-14-module-chunk-bundle-之间的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-module-chunk-bundle-之间的关系"}},[e._v("#")]),e._v(" 1.14. "),v("code",[e._v("module")]),e._v(", "),v("code",[e._v("chunk")]),e._v(", "),v("code",[e._v("bundle")]),e._v(" 之间的关系")]),e._v(" "),v("ol",[v("li",[v("code",[e._v("module")]),e._v(" 模块：代码模块，由 "),v("code",[e._v("import")]),e._v(", "),v("code",[e._v("require")]),e._v(" 等模块规范导出的代码片段。")]),e._v(" "),v("li",[v("code",[e._v("chunk")]),e._v(" 代码块：由多个 "),v("code",[e._v("module")]),e._v(" 组成，通常情况下 "),v("code",[e._v("bundle")]),e._v(" 是由 "),v("code",[e._v("chunk")]),e._v(" 对应生成。")]),e._v(" "),v("li",[v("code",[e._v("bundle")]),e._v("：由多个 "),v("code",[e._v("module")]),e._v(" 组成，通常跟 "),v("code",[e._v("chunk")]),e._v(" 对应，包含已经过加载和编译的最终生成的源文件。")])]),e._v(" "),v("h3",{attrs:{id:"_1-15-webpack-流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-webpack-流程"}},[e._v("#")]),e._v(" 1.15. webpack 流程")]),e._v(" "),v("p",[e._v("从启动构建到输出结果一系列过程：")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("初始化参数：解析"),v("code",[e._v("webpack")]),e._v("配置参数，合并"),v("code",[e._v("shell")]),e._v("传入和"),v("code",[e._v("webpack.config.js")]),e._v("文件配置的参数，形成最后的配置结果。")])]),e._v(" "),v("li",[v("p",[e._v("开始编译：上一步得到的参数初始化"),v("code",[e._v("compiler")]),e._v("对象，注册所有配置的插件，插件监听"),v("code",[e._v("webpack")]),e._v("构建生命周期的事件节点，做出相应的反应，执行对象的 "),v("code",[e._v("run")]),e._v(" 方法开始执行编译。")])]),e._v(" "),v("li",[v("p",[e._v("确定入口：从配置的"),v("code",[e._v("entry")]),e._v("入口，开始解析文件构建AST语法树，找出依赖，递归下去。")])]),e._v(" "),v("li",[v("p",[e._v("编译模块：递归中根据文件类型和"),v("code",[e._v("loader")]),e._v("配置，调用所有配置的"),v("code",[e._v("loader")]),e._v("对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。")])]),e._v(" "),v("li",[v("p",[e._v("完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据"),v("code",[e._v("entry")]),e._v("配置生成代码块"),v("code",[e._v("chunk")]),e._v("。")])]),e._v(" "),v("li",[v("p",[e._v("输出完成：输出所有的"),v("code",[e._v("chunk")]),e._v("到文件系统。")])])]),e._v(" "),v("p",[e._v("注意：在构建生命周期中有一系列插件在做合适的时机做合适事情，比如UglifyPlugin会在loader转换递归完对结果使用UglifyJs压缩覆盖之前的结果。")]),e._v(" "),v("h3",{attrs:{id:"_1-16-如何利用webpack来优化前端性能-提高性能和体验"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-如何利用webpack来优化前端性能-提高性能和体验"}},[e._v("#")]),e._v(" 1.16. 如何利用webpack来优化前端性能？（提高性能和体验）")]),e._v(" "),v("p",[e._v("用webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运行快速高效。")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用"),v("code",[e._v("webpack")]),e._v("的"),v("code",[e._v("UglifyJsPlugin")]),e._v("和"),v("code",[e._v("ParallelUglifyPlugin")]),e._v("来压缩JS文件， 利用"),v("code",[e._v("cssnano")]),e._v("（"),v("code",[e._v("css-loader?minimize")]),e._v("）来压缩"),v("code",[e._v("css")]),e._v("。使用"),v("code",[e._v("webpack4")]),e._v("，打包项目使用"),v("code",[e._v("production")]),e._v("模式，会自动开启代码压缩。")])]),e._v(" "),v("li",[v("p",[e._v("利用CDN加速。在构建过程中，将引用的静态资源路径修改为CDN上对应的路径。可以利用"),v("code",[e._v("webpack")]),e._v("对于"),v("code",[e._v("output")]),e._v("参数和各"),v("code",[e._v("loader")]),e._v("的"),v("code",[e._v("publicPath")]),e._v("参数来修改资源路径")])]),e._v(" "),v("li",[v("p",[e._v("删除死代码（"),v("code",[e._v("Tree Shaking")]),e._v("）。将代码中永远不会走到的片段删除掉。可以通过在启动"),v("code",[e._v("webpack")]),e._v("时追加参数"),v("code",[e._v("--optimize-minimize")]),e._v("来实现或者使用"),v("code",[e._v("es6")]),e._v("模块开启删除死代码。")])]),e._v(" "),v("li",[v("p",[e._v("优化图片，对于小图可以使用 "),v("code",[e._v("base64")]),e._v(" 的方式写入文件中")])]),e._v(" "),v("li",[v("p",[e._v("按照路由拆分代码，实现按需加载，提取公共代码。")])]),e._v(" "),v("li",[v("p",[e._v("给打包出来的文件名添加哈希，实现浏览器缓存文件")])])]),e._v(" "),v("h3",{attrs:{id:"_1-17-如何提高webpack的构建速度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-如何提高webpack的构建速度"}},[e._v("#")]),e._v(" 1.17. 如何提高webpack的构建速度？")]),e._v(" "),v("p",[e._v("（1）多入口的情况下，使用"),v("code",[e._v("commonsChunkPlugin")]),e._v("来提取公共代码；")]),e._v(" "),v("p",[e._v("（2）通过"),v("code",[e._v("externals")]),e._v("配置来提取常用库；")]),e._v(" "),v("p",[e._v("（3）使用"),v("code",[e._v("happypack")]),e._v("实现多线程加速编译；")]),e._v(" "),v("p",[e._v("（4）使用"),v("code",[e._v("webpack-uglify-parallel")]),e._v("来提升"),v("code",[e._v("uglifyPlugin")]),e._v("的压缩速度。原理上"),v("code",[e._v("webpack-uglify-parallel")]),e._v("采用多核并行压缩来提升压缩速度；")]),e._v(" "),v("p",[e._v("（5）使用"),v("code",[e._v("tree-shaking")]),e._v("和"),v("code",[e._v("scope hoisting")]),e._v("来剔除多余代码。")]),e._v(" "),v("h3",{attrs:{id:"_1-18-怎么配置单页应用-怎么配置多页应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-怎么配置单页应用-怎么配置多页应用"}},[e._v("#")]),e._v(" 1.18. 怎么配置单页应用？怎么配置多页应用？")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("单页应用可以理解为webpack的标准模式，直接在entry中指定单页应用的入口即可。")])]),e._v(" "),v("li",[v("p",[e._v("多页应用的话，可以使用webpack的 AutoWebPlugin来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。")])])]),e._v(" "),v("p",[e._v("参考资料："),v("a",{attrs:{href:"https://www.cnblogs.com/chengxs/p/11022842.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("浅析webpack的原理"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=t.exports}}]);