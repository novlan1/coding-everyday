(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{609:function(t,_,a){"use strict";a.r(_);var v=a(25),e=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("ul",[_("li",[_("a",{attrs:{href:"#1-c%E5%9F%BA%E7%A1%80"}},[t._v("1. C++基础")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#11-c%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"}},[t._v("1.1. C++中的数据类型：")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#12-c-%E8%BE%83c-%E6%96%B0%E6%B7%BB%E5%8A%A0%E4%BA%86%E5%87%A0%E4%B8%AA%E7%89%B9%E6%80%A7"}},[t._v("1.2. c++ 较c 新添加了几个特性")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#121-%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E7%9C%9F"}},[t._v("1.2.1. 判断是否为真:")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#122-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95"}},[t._v("1.2.2. 初始化方法：")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#123-%E9%9A%8F%E7%94%A8%E9%9A%8F%E5%AE%9A%E4%B9%89"}},[t._v("1.2.3. 随用随定义：")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#13-c%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F"}},[t._v("1.3. C++的输入输出方式")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#131-io%E6%96%B9%E5%BC%8F"}},[t._v("1.3.1. I/O方式")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#132-cout%E8%AF%AD%E6%B3%95%E5%BD%A2%E5%BC%8F"}},[t._v("1.3.2. cout语法形式")])])])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#2-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4"}},[t._v("2. 命名空间")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#3-vscode-%E7%BC%96%E8%BE%91-c"}},[t._v("3. VScode 编辑 C++")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#4-%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8A%A0"}},[t._v("4. 函数里面定义数组为什么要加"),_("code",[t._v("*")])]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#41-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("4.1. 指针和引用的区别")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#5-%E5%87%BD%E6%95%B0%E7%89%B9%E6%80%A7"}},[t._v("5. 函数特性")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#6-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86"}},[t._v("6. 内存管理")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#61-%E5%A0%86%E5%92%8C%E6%A0%88"}},[t._v("6.1. 堆和栈")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#7-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1"}},[t._v("7. 类和对象")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#71-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8Bstring"}},[t._v("7.1. 字符串类型"),_("code",[t._v("string")])])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#8-%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85"}},[t._v("8. 数据封装")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#81-%E7%B1%BB%E5%A4%96%E5%AE%9A%E4%B9%89"}},[t._v("8.1. 类外定义")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#82-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"}},[t._v("8.2. 构造函数")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#83-%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA"}},[t._v("8.3. 内存分区")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#9-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8"}},[t._v("9. 初始化列表")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#91-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"}},[t._v("9.1. 拷贝构造函数")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#92-%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0"}},[t._v("9.2. 析构函数")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#93-%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84"}},[t._v("9.3. 对象数组")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#94-%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98"}},[t._v("9.4. 对象成员")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#95-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D"}},[t._v("9.5. 深拷贝浅拷贝")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#10-%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88"}},[t._v("10. 对象指针")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#11-%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88"}},[t._v("11. 对象指针")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#111-%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E6%8C%87%E9%92%88"}},[t._v("11.1. 对象成员指针")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#112-this-%E6%8C%87%E9%92%88"}},[t._v("11.2. "),_("code",[t._v("this")]),t._v(" 指针")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#12-%E5%B8%B8%E5%AF%B9%E8%B1%A1%E6%8C%87%E9%92%88%E4%B8%8E%E5%B8%B8%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8"}},[t._v("12. 常对象指针与常对象引用")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#13-%E7%BB%A7%E6%89%BF"}},[t._v("13. 继承")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#14-%E9%9A%90%E8%97%8F"}},[t._v("14. 隐藏")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#15-%E5%A4%B4%E6%96%87%E4%BB%B6%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%92%8C%E5%B0%96%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("15. 头文件双引号和尖括号的区别")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#16-isa"}},[t._v("16. "),_("code",[t._v("isA")])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#17-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E7%BB%A7%E6%89%BF"}},[t._v("17. 多重继承与多继承")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#18-%E8%99%9A%E7%BB%A7%E6%89%BF"}},[t._v("18. 虚继承")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#19-%E8%99%9A%E5%87%BD%E6%95%B0"}},[t._v("19. 虚函数")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#20-%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0"}},[t._v("20. 虚析构函数")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#21-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%E5%8E%9F%E7%90%86"}},[t._v("21. 虚函数与虚析构函数原理")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#22-%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB"}},[t._v("22. 纯虚函数抽象类")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#23-%E6%8E%A5%E5%8F%A3%E7%B1%BB"}},[t._v("23. 接口类")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#24-rtti"}},[t._v("24. "),_("code",[t._v("RTTI")])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#25-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"}},[t._v("25. 异常处理")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#26-%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%8B%E5%85%83%E7%B1%BB"}},[t._v("26. 友元函数和友元类")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#27-static"}},[t._v("27. static")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#28-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD"}},[t._v("28. 运算符重载")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#281-%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD"}},[t._v("28.1. 一元运算符重载")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#282-%E4%BA%8C%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD"}},[t._v("28.2. 二元运算符重载")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#29-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF"}},[t._v("29. 函数模板")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#30-%E7%B1%BB%E6%A8%A1%E6%9D%BF"}},[t._v("30. 类模板")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#31-%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93"}},[t._v("31. 标准模板库")])])]),t._v(" "),_("h3",{attrs:{id:"_1-c-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-c-基础"}},[t._v("#")]),t._v(" 1. C++基础")]),t._v(" "),_("ul",[_("li",[t._v("c语言是"),_("code",[t._v("c＋+")]),t._v("语言的子集")]),t._v(" "),_("li",[t._v("c 语言是从c基础上发展而来的")]),t._v(" "),_("li",[t._v("c++是高级计算机语言")]),t._v(" "),_("li",[t._v("c语言面向过程，"),_("code",[t._v("c＋＋")]),t._v("语言支持面向过程＋支持面向对象")]),t._v(" "),_("li",[t._v("c语言运行更高效（越底层的东西越高效）")])]),t._v(" "),_("h4",{attrs:{id:"_1-1-c-中的数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-c-中的数据类型"}},[t._v("#")]),t._v(" 1.1. C++中的数据类型：")]),t._v(" "),_("ul",[_("li",[t._v("基本类型{整型，字符型，实型（"),_("code",[t._v("float/double")]),t._v("）}；")]),t._v(" "),_("li",[t._v("构造类型{数组类型，结构类型（"),_("code",[t._v("struct")]),t._v("），联合类型（"),_("code",[t._v("union")]),t._v("），枚举类型（"),_("code",[t._v("enum")]),t._v("）}；")]),t._v(" "),_("li",[t._v("指针类型；")]),t._v(" "),_("li",[t._v("空类型（"),_("code",[t._v("void")]),t._v("）；")])]),t._v(" "),_("h4",{attrs:{id:"_1-2-c-较c-新添加了几个特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-c-较c-新添加了几个特性"}},[t._v("#")]),t._v(" 1.2. c++ 较c 新添加了几个特性")]),t._v(" "),_("ol",[_("li",[t._v("新的数控类型，"),_("code",[t._v("bool")])]),t._v(" "),_("li",[t._v("新的赋值方法，直接赋值，例如 "),_("code",[t._v("int x（1024）")]),t._v(";")]),t._v(" "),_("li",[t._v("变量定义更加随便，随用随定义")])]),t._v(" "),_("h5",{attrs:{id:"_1-2-1-判断是否为真"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-判断是否为真"}},[t._v("#")]),t._v(" 1.2.1. 判断是否为真:")]),t._v(" "),_("ol",[_("li",[t._v("C判断是否为真，用"),_("code",[t._v("if(flag==1)")])]),t._v(" "),_("li",[t._v("C++判断是否为真，直接用"),_("code",[t._v("if(flag)")]),t._v("，简洁")])]),t._v(" "),_("h5",{attrs:{id:"_1-2-2-初始化方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-初始化方法"}},[t._v("#")]),t._v(" 1.2.2. 初始化方法：")]),t._v(" "),_("ol",[_("li",[t._v("C语言初始化方法："),_("code",[t._v("int x = 1024")])]),t._v(" "),_("li",[t._v("C++提供两种初始化方法：赋值初始化 "),_("code",[t._v("int x = 1024")]),t._v("，直接初始化 "),_("code",[t._v("int x (1024)")])])]),t._v(" "),_("h5",{attrs:{id:"_1-2-3-随用随定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-随用随定义"}},[t._v("#")]),t._v(" 1.2.3. 随用随定义：")]),t._v(" "),_("p",[t._v("C语言：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\nv1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nv2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v1\n")])])]),_("p",[t._v("c++：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("int v1 =3\nv1 = v1 + 2\n\nint v2 = 4\nv2 = v2 + v1\n")])])]),_("h4",{attrs:{id:"_1-3-c-的输入输出方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-c-的输入输出方式"}},[t._v("#")]),t._v(" 1.3. C++的输入输出方式")]),t._v(" "),_("h5",{attrs:{id:"_1-3-1-i-o方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-i-o方式"}},[t._v("#")]),t._v(" 1.3.1. I/O方式")]),t._v(" "),_("ol",[_("li",[t._v("C语言的I/O方式："),_("code",[t._v("scanf")]),t._v("，"),_("code",[t._v("printf")])]),t._v(" "),_("li",[t._v("C++语言的I/O方式："),_("code",[t._v("cin")]),t._v("，"),_("code",[t._v("cout")])])]),t._v(" "),_("h5",{attrs:{id:"_1-3-2-cout语法形式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-cout语法形式"}},[t._v("#")]),t._v(" 1.3.2. cout语法形式")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('cout<<X<<endl;（endl相当于C中的“\\n”）\ncout<<"x+y="<<x+y<<endl;\n')])])]),_("p",[t._v("#####cin的语法形式")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("cin>>x;\ncin>>x>>y;\n")])])]),_("p",[t._v("#####C++相比C：")]),t._v(" "),_("ul",[_("li",[t._v("不用关注占位符（如"),_("code",[t._v("%d")]),t._v("、"),_("code",[t._v("%c")]),t._v("）")]),t._v(" "),_("li",[t._v("不用关注数据类型")]),t._v(" "),_("li",[t._v("不易出现问题")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("otc")]),t._v("，"),_("code",[t._v("dec")]),t._v("。"),_("code",[t._v("hex")]),t._v("  分别对应8, 10，16进制")]),t._v(" "),_("li",[_("code",[t._v("boolalpha")]),t._v(" 输出布尔值")])]),t._v(" "),_("h3",{attrs:{id:"_2-命名空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-命名空间"}},[t._v("#")]),t._v(" 2. 命名空间")]),t._v(" "),_("p",[t._v("空间名不能重复")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("namespace A\n")])])]),_("p",[t._v("「变量、函数定义」")]),t._v(" "),_("p",[t._v("使用：")]),t._v(" "),_("ul",[_("li",[t._v("变量 "),_("code",[t._v("cout << A::x << endl;")])]),t._v(" "),_("li",[t._v("函数 "),_("code",[t._v("A::f1()")])]),t._v(" "),_("li",[t._v("或者"),_("code",[t._v("using namespace std")])])]),t._v(" "),_("h3",{attrs:{id:"_3-vscode-编辑-c"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-vscode-编辑-c"}},[t._v("#")]),t._v(" 3. VScode 编辑 C++")]),t._v(" "),_("p",[t._v("VScode中如果程序里有"),_("code",[t._v("scanf()")]),t._v("等请求键盘输入数据的函数，此时无法从键盘输入数据，并且程序无法结束需要关闭重启vscode才能重新执行")]),t._v(" "),_("ul",[_("li",[t._v("解决办法是依次打开：文件>首选项>设置>用户设置>拓展>"),_("code",[t._v("Run Code Configuration")])]),t._v(" "),_("li",[t._v("找到  "),_("code",[t._v("Run In Terminal")]),t._v("  打上勾 这样运行的程序就会运行在vscode的集成控制台上")]),t._v(" "),_("li",[t._v("在工作区设置也有这个选项，但工作区设置只会对工作区生效")])]),t._v(" "),_("h3",{attrs:{id:"_4-函数里面定义数组为什么要加"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-函数里面定义数组为什么要加"}},[t._v("#")]),t._v(" 4. 函数里面定义数组为什么要加"),_("code",[t._v("*")])]),t._v(" "),_("p",[t._v("定义函数时候，形式参数是数组时候，加"),_("code",[t._v("*")]),t._v("是把数组的值由实际参数传给形式参数，不加"),_("code",[t._v("*")]),t._v("是把数组的地址由实际参数传给形式参数。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("system(“pause”);")]),t._v("使用到的话需要加头文件"),_("code",[t._v('#include"stdio.h"')])]),t._v(" "),_("li",[_("code",[t._v("cin")]),t._v(", "),_("code",[t._v("cout")]),t._v("要想正常使用的话需要加头文件"),_("code",[t._v('#include"iostream"')]),t._v("和命名空间"),_("code",[t._v("using namespace std;")])])]),t._v(" "),_("p",[t._v("引用")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("引用就是指变量的一个别名（不能只有别名）")])]),t._v(" "),_("li",[_("p",[t._v("引用必须初始化。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("&")]),t._v("符号就是取地址符号, 含义只这么一个;")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("*")]),t._v("符号就是创建一个指针, 或者做一次地址跳转;")])])]),t._v(" "),_("p",[t._v("在任何编程语言中, 其实一个变量都代表了一个内存上的地址.")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("int a = 10")]),t._v(", 给a分配一个内存逻辑地址"),_("code",[t._v("0x1001ff")]),t._v(", 这个地址存放了值"),_("code",[t._v("10")]),t._v(";")]),t._v(" "),_("li",[_("code",[t._v("int &b = a")]),t._v(", 给b分配和a一样的逻辑地址"),_("code",[t._v("0x1001ff")]),t._v(". 因此"),_("code",[t._v("b")]),t._v("就是"),_("code",[t._v("a")]),t._v("的别名;")])]),t._v(" "),_("p",[t._v("好了, 最难的来了.")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("int a = 10;")]),t._v("   // 给"),_("code",[t._v("a")]),t._v("分配一个内存逻辑地址"),_("code",[t._v("0x100001")]),t._v(", 这个地址存放了值10;")]),t._v(" "),_("li",[_("code",[t._v("int *p = &a;")]),t._v("  // 创建变量"),_("code",[t._v("p")]),t._v(", 给"),_("code",[t._v("p")]),t._v("分配地址"),_("code",[t._v("0x100002")]),t._v(', 这个地址存放的值是"'),_("code",[t._v("0x100001")]),t._v('"('),_("code",[t._v("a")]),t._v("的逻辑地址值);")]),t._v(" "),_("li",[_("code",[t._v("int *&q = p;")]),t._v("  // 创建变量"),_("code",[t._v("q")]),t._v(", 给"),_("code",[t._v("q")]),t._v("分配地址也是"),_("code",[t._v("0x100002")]),t._v(", 因此这个地址存放的值还是"),_("code",[t._v("a")]),t._v("的逻辑地址值;")]),t._v(" "),_("li",[_("code",[t._v("*q = 20;")]),t._v("  // 访问存放在"),_("code",[t._v("q")]),t._v("变量地址下的值, 获得了"),_("code",[t._v("a")]),t._v("的地址值, 再访问一下"),_("code",[t._v("a")]),t._v("的地址值, 修改上面的内容为"),_("code",[t._v("20")]),t._v(";")])]),t._v(" "),_("p",[t._v("指针：指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用跟原来的变量实质上是同一个东西，只不过是原变量的一个别名而已。")]),t._v(" "),_("h4",{attrs:{id:"_4-1-指针和引用的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-指针和引用的区别"}},[t._v("#")]),t._v(" 4.1. 指针和引用的区别")]),t._v(" "),_("ul",[_("li",[t._v("首先，引用不可以为空，但指针可以为空。使用指针之前必须做判空操作，而引用就不必。")]),t._v(" "),_("li",[t._v('引用不可以改变指向，对一个对象"至死不渝"；但是指针可以改变指向，而指向其它对象。说明：虽然引用不可以改变指向，但是可以改变初始化对象的内容。')]),t._v(" "),_("li",[t._v("引用的大小是所指向的变量的大小，因为引用只是一个别名而已；指针是指针本身的大小，4个字节。")])]),t._v(" "),_("p",[t._v('总之，它们的这些差别都可以归结为"指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名，引用不改变指向。"')]),t._v(" "),_("p",[t._v("交换两个数：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("void fun(int &a, int &b) \n{\n  int c = 0;\n  c = a;\n  a = b;\n  b = c;\n}\n")])])]),_("p",[_("code",[t._v("const")]),t._v("(控制变量是否可以变化)")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("（则此时x为常量，不可进行再赋值）\n")])])]),_("p",[_("code",[t._v("const")]),t._v("与指针类型")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("（两种写法完全等价，"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("都在"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("的左边）\n")])])]),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("这两种写法也是完全等价的"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("； "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x； "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("（错误，因为"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("指定的为"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p，指针指向的数据为常量，指针本身不是）；\np"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("y；（正确）\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("x"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  p"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("y（错误，因为"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("指向的为p，只能为x的地址）\n")])])]),_("p",[t._v("const与引用")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("；"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("y"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x； y"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("（错误，y通过"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("限定只能为x的别名，值为"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）\n")])])]),_("p",[t._v("总结：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("const int x=3；int *y=&x；")]),t._v("（这种写法是错误的因为"),_("code",[t._v("x")]),t._v("本身定义为"),_("code",[t._v("const")]),t._v("，在用一个可变的指针指向，那么就有用指针改变"),_("code",[t._v("x")]),t._v("值的风险，这是系统所不允许的）；")]),t._v(" "),_("li",[_("code",[t._v("int x=3； const int *y=&x；")]),t._v("（正确，这样保证了指针对"),_("code",[t._v("x")]),t._v("只有可读性，而没有可写性）")]),t._v(" "),_("li",[t._v("大不可以包含小，小可以包含大，安全。")])]),t._v(" "),_("p",[t._v("常量指针常量")]),t._v(" "),_("ul",[_("li",[t._v("常量指针常量：指向常量的指针常量，可以定义一个指向常量的指针常量，它必须在定义时初始化。常量指针常量定义"),_("code",[t._v('"const int* const pointer=&c"')]),t._v("告诉编译器，"),_("code",[t._v("pointer")]),t._v("和"),_("code",[t._v("*pointer")]),t._v("都是常量，他们都不能作为左值进行操作。")]),t._v(" "),_("li",[t._v('而就不存在所谓的"常量引用常量"，因为跟上面讲的一样引用变量就是引用常量。C++不区分变量的'),_("code",[t._v("const")]),t._v("引用和"),_("code",[t._v("const")]),t._v("变量的引用。程序决不能给引用本身重新赋值，使他指向另一个变量，因此引用总是"),_("code",[t._v("const")]),t._v("的。如果对引用应用关键字"),_("code",[t._v("const")]),t._v("，起作用就是使其目标称为"),_("code",[t._v("const")]),t._v("变量。即没有："),_("code",[t._v("const double const & a=1；")]),t._v("只有"),_("code",[t._v("const double &a=1；")])]),t._v(" "),_("li",[t._v("总结：有一个规则可以很好的区分"),_("code",[t._v("const")]),t._v("是修饰指针，还是修饰指针指向的数据——画一条垂直线穿过指针声明的星号（"),_("code",[t._v("*")]),t._v("），如果"),_("code",[t._v("const")]),t._v("出现在线的左边，指针指向的数据为常量；如果"),_("code",[t._v("const")]),t._v("出现在右边，指针本身为常量。而引用本身与天俱来就是常量，即不可以改变指向。（"),_("code",[t._v("int const *…")]),t._v("和"),_("code",[t._v("const int *…")]),t._v("等价）")])]),t._v(" "),_("h3",{attrs:{id:"_5-函数特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数特性"}},[t._v("#")]),t._v(" 5. 函数特性")]),t._v(" "),_("p",[t._v("一、函数参数默认值")]),t._v(" "),_("ol",[_("li",[t._v("有默认值参数值的参数必须在参数表的最右端")]),t._v(" "),_("li",[t._v("函数定义不写默认值，声明可写默认值（上面写默认值，下面不写）")]),t._v(" "),_("li",[t._v("无实参则用默认值，否则实参覆盖默认值")]),t._v(" "),_("li",[t._v("函数重载必须在同一个作用域内")])]),t._v(" "),_("p",[t._v("二、函数重载")]),t._v(" "),_("ol",[_("li",[t._v("定义：在相同作用域内 用同一函数名定义的多个函数 参数个数和参数类型不同")]),t._v(" "),_("li",[t._v("思考：编译器如何识别重载的函数 ("),_("code",[t._v("getMax_int_int")]),t._v("和"),_("code",[t._v("getMax_double_double")]),t._v(")")])]),t._v(" "),_("p",[t._v("三、内联函数")]),t._v(" "),_("ol",[_("li",[t._v("关键字："),_("code",[t._v("inline")]),t._v("，")]),t._v(" "),_("li",[t._v("编译时将函数体代码和实参 代替 函数调用语句")]),t._v(" "),_("li")]),t._v(" "),_("ul",[_("li",[t._v("内联编译是建议性的，由编译器决定")]),t._v(" "),_("li",[t._v("逻辑简单，调用频繁的函数建议使用内联")]),t._v(" "),_("li",[t._v("递归函数 无法使用内联方式")])]),t._v(" "),_("p",[t._v("总结")]),t._v(" "),_("ul",[_("li",[t._v("函数参数默认值 实参覆盖默认值。")]),t._v(" "),_("li",[t._v("函数重载 名称相同 参数可辨。")]),t._v(" "),_("li",[t._v("内联函数 效率高，由编译器决定是否使用")])]),t._v(" "),_("p",[t._v("普通函数调用：调用->找到入口->执行调用->返回入口->调用结束\n内联函数：省去了找到入口和返回入口的过程，省去函数调用的过程")]),t._v(" "),_("h3",{attrs:{id:"_6-内存管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-内存管理"}},[t._v("#")]),t._v(" 6. 内存管理")]),t._v(" "),_("p",[t._v("1.申请内存："),_("code",[t._v("int *p = new int;")]),t._v(" 或者 "),_("code",[t._v("new int(20)")]),t._v(" 圆括号表示赋值\n释放内存："),_("code",[t._v("delete p; p=NULL")]),t._v("\n2.申请块内存："),_("code",[t._v("int *arr=new int[10];")]),t._v(" 方括号表示申请块内存，也就是数据个数。使用："),_("code",[t._v("p[0] = 10")]),t._v("\n释放:"),_("code",[t._v("delete []arr; arr = NULL")]),t._v("\n3.申请内存需要判断是否成功，"),_("code",[t._v("if (p==NULL)")]),t._v(" { //处理 }\n释放内存需要设空指针, "),_("code",[t._v("p=NULL")]),t._v("\n4."),_("code",[t._v("new")]),t._v("与"),_("code",[t._v("delete")]),t._v("配套使用（不能与C语言的"),_("code",[t._v("malloc")]),t._v("和"),_("code",[t._v("free")]),t._v("混搭）")]),t._v(" "),_("h4",{attrs:{id:"_6-1-堆和栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-堆和栈"}},[t._v("#")]),t._v(" 6.1. 堆和栈")]),t._v(" "),_("ol",[_("li",[t._v("栈：是由编译器在需要时自动分配，不需要时自动清除的变量存储区。通常存放局部变量、函数参数等。")]),t._v(" "),_("li",[t._v("堆：是由"),_("code",[t._v("new")]),t._v("分配的内存块，由程序员释放（编译器不管），一般一个"),_("code",[t._v("new")]),t._v("与一个"),_("code",[t._v("delete")]),t._v("对应，一个"),_("code",[t._v("new[]")]),t._v("与一个"),_("code",[t._v("delete[]")]),t._v("对应。如果程序员没有释放掉，资源将由操作系统在程序结束后自动回收")])]),t._v(" "),_("h3",{attrs:{id:"_7-类和对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-类和对象"}},[t._v("#")]),t._v(" 7. 类和对象")]),t._v(" "),_("p",[t._v("类的限定符有三个："),_("code",[t._v("private")]),t._v(","),_("code",[t._v("protected")]),t._v(","),_("code",[t._v("public")])]),t._v(" "),_("p",[t._v("class声明后面一生要加分号;")]),t._v(" "),_("ul",[_("li",[t._v("从栈中实例化 "),_("code",[t._v("Coordinate coor; coor.x=10; coor.y=20;")]),t._v(" （取成员变量和方法都是用"),_("code",[t._v(".")]),t._v("方式）")]),t._v(" "),_("li",[t._v("栈中实例化之后内存自动清除。")])]),t._v(" "),_("ol",[_("li",[t._v("从堆中实例化 "),_("code",[t._v("Coordinate *p=new Coordinate(); p->x=100; p->y=200;")])]),t._v(" "),_("li",[_("code",[t._v("p->printX();p->printY()")]),t._v(" （取成员变量和方法都是用"),_("code",[t._v("->")]),t._v("方式）")]),t._v(" "),_("li",[t._v("堆中实例化不一定成功，所以需要判断一下："),_("code",[t._v("if(p==NULL){ return 0;}")])]),t._v(" "),_("li",[t._v("堆中实例化之后需要清除内存，即："),_("code",[t._v("delete p；p=NULL;")])])]),t._v(" "),_("h4",{attrs:{id:"_7-1-字符串类型string"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-字符串类型string"}},[t._v("#")]),t._v(" 7.1. 字符串类型"),_("code",[t._v("string")])]),t._v(" "),_("p",[t._v("字符串的操作繁琐，可以使用字符串类型："),_("code",[t._v("string")]),t._v("(使用之前要引入"),_("code",[t._v("#include<string>")]),t._v(")\n如：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("string name"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zhang"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("hobby")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"football"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("name"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("hobby"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("string s1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s1为空串")]),t._v("\nstring s2（“ABC”）"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s2的初始值为ABC")]),t._v("\nstring s3（s2）"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将s2的字符赋给s3；")]),t._v("\nstring s4（n，‘c’）"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s4赋n个c")]),t._v("\n")])])]),_("p",[t._v("常用API有"),_("code",[t._v("str.empty()")]),t._v(", "),_("code",[t._v("str.size()")]),t._v(", "),_("code",[t._v("s1+s2")]),t._v(","),_("code",[t._v("s1==’A’")])]),t._v(" "),_("p",[_("code",[t._v("etline()")]),t._v("的原型是"),_("code",[t._v("istream& getline ( istream &is , string &str , char delim );")])]),t._v(" "),_("ul",[_("li",[t._v("其中 "),_("code",[t._v("istream &is")]),t._v(" 表示一个输入流，譬如"),_("code",[t._v("cin")]),t._v("；")]),t._v(" "),_("li",[_("code",[t._v("string&str")]),t._v("表示把从输入流读入的字符串存放在这个字符串中（可以自己随便命名，str什么的都可以）；")]),t._v(" "),_("li",[_("code",[t._v("char delim")]),t._v("表示遇到这个字符停止读入，在不设置的情况下系统默认该字符为'\\n'，也就是回车换行符（遇到回车停止读入）。")])]),t._v(" "),_("p",[t._v("给大家举个例子：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("string line"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"please cin a line:"')]),t._v("\ngetline（cin"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("line"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),_("span",{pre:!0,attrs:{class:"token char"}},[t._v("'#'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The line you give is:"')]),t._v("line"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v('那么当我输入"'),_("code",[t._v("You are the #best!")]),t._v('" 的时候，输入流实际上只读入了"'),_("code",[t._v("You are the")]),t._v('"，'),_("code",[t._v("#")]),t._v("后面的并没有存放到"),_("code",[t._v("line")]),t._v("中（应该是在缓冲区里吧）。然后程序运行结果应该是这样的：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v(" please cin a line"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("You are the #best"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n The line you give is"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("You are the \n")])])]),_("p",[t._v("而且这里把终止符设为"),_("code",[t._v("#")]),t._v("，你输入的时候就算输入几个回车换行也没关系，输入流照样会读入，譬如：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("please cin a line"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("You are the best"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里输入了一个回车换行")]),t._v("\nThank you"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n#   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 终止读入")]),t._v("\nThe line you give is"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("You are the best！\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 换行照样读入并且输出")]),t._v("\nThank you"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),_("p",[t._v("以上就是"),_("code",[t._v("getline()")]),t._v("函数一个小小的实例了。")]),t._v(" "),_("h3",{attrs:{id:"_8-数据封装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-数据封装"}},[t._v("#")]),t._v(" 8. 数据封装")]),t._v(" "),_("p",[t._v("面向对象的基本思想：以谁做什么来表达程序的逻辑，以对象为中心，对象的所有行为都通过调用自己的函数来完成。体现在代码层面就是数据成员调用自己的函数以及通过函数来对自己进行操作.")]),t._v(" "),_("p",[t._v("封装的好处：")]),t._v(" "),_("ol",[_("li",[t._v("可以在成员函数中做一些必要的限制")]),t._v(" "),_("li",[t._v("有时候确实不允许用户改变数据成员")])]),t._v(" "),_("p",[t._v("对数据的封装一般用"),_("code",[t._v("set")]),t._v("来对函数赋值 "),_("code",[t._v("get")]),t._v("函数用来读取数据成员")]),t._v(" "),_("ol",[_("li",[t._v("类的写法一般是"),_("code",[t._v("public")]),t._v("写在前面，"),_("code",[t._v("private")]),t._v("写在后面")]),t._v(" "),_("li",[t._v("建议定义私有成员时命名为 "),_("code",[t._v("m_")]),t._v("数据类型+成员名\n"),_("ul",[_("li",[t._v("如："),_("code",[t._v("string m_strName")]),t._v(" 以便区分数据成员，知道数据成员是定义在类里面的")]),t._v(" "),_("li",[t._v("形参是"),_("code",[t._v("_")]),t._v("+成员名，如："),_("code",[t._v("void getName(string _name)")])])])]),t._v(" "),_("li",[t._v("只读：初始化，只有"),_("code",[t._v("get")]),t._v("函数，不设置"),_("code",[t._v("set")]),t._v("函数。")])]),t._v(" "),_("h4",{attrs:{id:"_8-1-类外定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-类外定义"}},[t._v("#")]),t._v(" 8.1. 类外定义")]),t._v(" "),_("ul",[_("li",[t._v("内联函数："),_("code",[t._v("inline")]),t._v("，一般使用于函数逻辑简单")]),t._v(" "),_("li",[t._v("类内定义：是指将成员函数的定义放在"),_("code",[t._v("class")]),t._v("类内部的定义（"),_("code",[t._v("class")]),t._v("大括号内部）")]),t._v(" "),_("li",[t._v("两者的联系：类内定义会将简单的成员函数当做内联函数来用，但是不会出现"),_("code",[t._v("inline")]),t._v("关键字")]),t._v(" "),_("li",[t._v("类外定义：分为"),_("code",[t._v("同文件类外定义")]),t._v("和"),_("code",[t._v("分文件类外定义")]),t._v("。")])]),t._v(" "),_("p",[t._v("类内定义的成员函数，编译器会将其优先编译为内联函数。对于复杂的成员函数，则编译为普通的函数。")]),t._v(" "),_("p",[t._v("类外定义的成员函数的格式： "),_("code",[t._v("返回类型 类名::函数名(参数列表)")]),t._v(" ，如"),_("code",[t._v("Teacher::getName(string _name)")])]),t._v(" "),_("p",[t._v("分文件类外定义：")]),t._v(" "),_("ul",[_("li",[t._v("定义一个类名"),_("code",[t._v(".h")]),t._v("的头文件，用来保存类的定义；")]),t._v(" "),_("li",[t._v("定义一个类名"),_("code",[t._v(".cpp")]),t._v("的文件，用来保存类中成员函数的定义，定义之前要加上"),_("code",[t._v('#include "类名.h"')])])]),t._v(" "),_("h4",{attrs:{id:"_8-2-构造函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-构造函数"}},[t._v("#")]),t._v(" 8.2. 构造函数")]),t._v(" "),_("p",[t._v("构造函数的规则和特点：")]),t._v(" "),_("ol",[_("li",[t._v("构造函数在对象实例化时被自动调用（有且仅有一次）；")]),t._v(" "),_("li",[t._v("构造函数与类同名；")]),t._v(" "),_("li",[t._v("构造函数没有返回值（连 "),_("code",[t._v("void")]),t._v(" 都不用写）；")]),t._v(" "),_("li",[t._v("构造函数可以有多个重载形式（遵循重载规则，参数个数、类型、调用顺序不同等）；")]),t._v(" "),_("li",[t._v("即使有多个构造函数，实例化对象时仅用到一个构造函数；")]),t._v(" "),_("li",[t._v("用户没有定义构造函数时，编译器自动生成一个构造函数，如果用户定义了构造函数，则系统不会生成默认的构造函数。")])]),t._v(" "),_("h4",{attrs:{id:"_8-3-内存分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-内存分区"}},[t._v("#")]),t._v(" 8.3. 内存分区")]),t._v(" "),_("ul",[_("li",[t._v("栈区：定义变量。内存由系统进行控制，释放和分配")]),t._v(" "),_("li",[t._v("堆区：关键字"),_("code",[t._v("new")]),t._v("，需要程序员自己管理释放")]),t._v(" "),_("li",[t._v("全局区：全局变量和静态变量")]),t._v(" "),_("li",[t._v("常量区：字符串和常量")]),t._v(" "),_("li",[t._v("代码区 ：存储逻辑代码的二进制")])]),t._v(" "),_("h3",{attrs:{id:"_9-初始化列表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-初始化列表"}},[t._v("#")]),t._v(" 9. 初始化列表")]),t._v(" "),_("p",[t._v("默认构造函数，就是初始化的时候不用传参，如"),_("code",[t._v("Teacher t;")]),t._v(" 其构造函数可能是"),_("code",[t._v("Teacher(){};")]),t._v(" 也可能是"),_("code",[t._v("Teacher(string _name=”xiao”);")]),t._v("即有所有参数都有默认值")]),t._v(" "),_("p",[t._v("初始化列表格式：")]),t._v(" "),_("ul",[_("li",[t._v("格式是在构造函数后面加：加数据成员名字（赋值），注赋值只能用"),_("code",[t._v("（）")]),t._v("，不能用等号")])]),t._v(" "),_("p",[t._v("初始化列表的特性：")]),t._v(" "),_("ul",[_("li",[t._v("初始化列表先于构造函数执行")]),t._v(" "),_("li",[t._v("初始化列表只能用于构造函数")]),t._v(" "),_("li",[t._v("初始化列表可以同时初始化多个数据成员")])]),t._v(" "),_("p",[t._v("初始化列表的必要性：")]),t._v(" "),_("ul",[_("li",[t._v("如"),_("code",[t._v("const")]),t._v("类型成员，在构造函数中不能赋值，只能通过初始化列表。")])]),t._v(" "),_("h4",{attrs:{id:"_9-1-拷贝构造函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-拷贝构造函数"}},[t._v("#")]),t._v(" 9.1. 拷贝构造函数")]),t._v(" "),_("p",[t._v("定义格式："),_("code",[t._v("类名（const 类名&变量名）")]),t._v("，变量名可写可不写。")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("class Student\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    public"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Student")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("m_strName "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jim"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Student")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Student "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("stu"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝构造函数在名称上一样，但是在参数设计上却不同，const +引用")]),t._v("\n    private"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        string m_strName"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("ul",[_("li",[t._v("如果没有自定义的拷贝构造函数，则系统自动生成一个默认的拷贝构造函数")]),t._v(" "),_("li",[t._v("当采用直接初始化或复制初始化实例化对象时，系统自动调用拷贝构造函数，即"),_("code",[t._v("Teacher t3 = t2; Teacher t4(t1)")])]),t._v(" "),_("li",[t._v("作为参数的实例也会调用一次拷贝构造函数")]),t._v(" "),_("li",[t._v("拷贝构造函数的参数是确定的，不能重载")])]),t._v(" "),_("h4",{attrs:{id:"_9-2-析构函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-析构函数"}},[t._v("#")]),t._v(" 9.2. 析构函数")]),t._v(" "),_("p",[t._v("构造函数：")]),t._v(" "),_("ol",[_("li",[t._v("出生；")]),t._v(" "),_("li",[t._v("析构函数：死亡")])]),t._v(" "),_("p",[t._v("对象的生命历程")]),t._v(" "),_("ol",[_("li",[t._v("申请内存")]),t._v(" "),_("li",[t._v("初始化列表")]),t._v(" "),_("li",[t._v("构造函数")]),t._v(" "),_("li",[t._v("参与运算")]),t._v(" "),_("li",[t._v("析构函数")]),t._v(" "),_("li",[t._v("释放内存")])]),t._v(" "),_("p",[t._v("析构函数 (  在对象销毁时，自动调用，归还系统资源   定义格式："),_("code",[t._v("~类名（）")]),t._v("  )")]),t._v(" "),_("ul",[_("li",[t._v("如果没有自定义，系统自动生成")]),t._v(" "),_("li",[t._v("析构函数在对象销毁时自动调用")]),t._v(" "),_("li",[t._v("析构函数没有返回值、没有参数也不能重载")])]),t._v(" "),_("h4",{attrs:{id:"_9-3-对象数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-对象数组"}},[t._v("#")]),t._v(" 9.3. 对象数组")]),t._v(" "),_("p",[t._v("栈中实例化一个对象数组：如"),_("code",[t._v("Coordinate coord[3]；")]),t._v("\n堆中 "),_("code",[t._v("Coordinate *p=new Coordinate[3]；")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("p[0]")]),t._v("指向第一个元素；执行"),_("code",[t._v("p++")]),t._v("之后"),_("code",[t._v("p[0]")]),t._v("指向第2个了！！！")]),t._v(" "),_("li",[t._v("释放内存时要注意指针 "),_("code",[t._v("p")]),t._v(" 指回原来的位置。用"),_("code",[t._v("delete")]),t._v("释放数组内存时要注意此时的指针"),_("code",[t._v("*p")]),t._v("要指到该数组的第一个元素上。保证申请和释放的是同一段内存")]),t._v(" "),_("li",[t._v("不论堆栈，新建一个长度为3的对象数组，销毁时，构造函数和析构函数会执行三次。")]),t._v(" "),_("li",[t._v("销毁指针，释放对象数组的内存，用"),_("code",[t._v("delete []p")]),t._v("，因为如果用"),_("code",[t._v("delete p")]),t._v("的话，析构函数只会执行一次，会造成内存泄漏")])]),t._v(" "),_("h4",{attrs:{id:"_9-4-对象成员"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-对象成员"}},[t._v("#")]),t._v(" 9.4. 对象成员")]),t._v(" "),_("p",[t._v("对象成员：一个对象中包含其他对象\n如：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("class Line"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    public：\n      Line（）；\n    private：\n      Coordinate m_coorA"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      Coordinate m_coorB"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("当实例化这样一个对象时，会先实例化"),_("code",[t._v("m_coorA")]),t._v("，再实例化"),_("code",[t._v("m_coorB")]),t._v("，最后实例化"),_("code",[t._v("Line")]),t._v("\n对象消亡时，会先销毁"),_("code",[t._v("Line")]),t._v("，再"),_("code",[t._v("m_coorB")]),t._v(",最后"),_("code",[t._v("m_coorA")]),t._v("\n类比：生产汽车时，先生产好各种零件，然后组装；销毁汽车时，先拆开，再销毁各个零件。")]),t._v(" "),_("p",[t._v("对象成员需要外层对象传参进行构造时必须采用"),_("strong",[t._v("初始化列表")]),t._v("的方式")]),t._v(" "),_("p",[t._v("如果坐标类有一个默认构造函数（不带参数），那么它就可以在实例化对象的时候不使用初始化列表，如果坐标类必须有参数传入，那么在实例化线段类的时候就必须要使用初始化列表的方式将相应的值传递给坐标类")]),t._v(" "),_("p",[t._v("原因：\n因为初始化列表会比构造函数先执行，再因为"),_("code",[t._v("Coordinate")]),t._v("是"),_("code",[t._v("Line")]),t._v("的对象成员，会优先于"),_("code",[t._v("Line")]),t._v("执行构造函数，所以如果不把"),_("code",[t._v("Coordinate")]),t._v("的那两个对象放在初始化列表中进行初始化，将会导致"),_("code",[t._v("Coordinnate")]),t._v("的对象使用默认构造函数进行初始化，然后你又没有写默认的构造函数，所以会报错，不过如果你写了默认构造函数，会导致多出来两个对象")]),t._v(" "),_("p",[t._v("默认构造函数：无参构造函数，有参构造函数并且所有参数均进行默认这样的两种函数叫做默认构造函数。（切记，如果函数的参数没有全部进行默认则不叫默认构造函数。）\n对象成员如果没有默认构造函数那么外部对象必须对对象成员进行初始化！")]),t._v(" "),_("h4",{attrs:{id:"_9-5-深拷贝浅拷贝"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-深拷贝浅拷贝"}},[t._v("#")]),t._v(" 9.5. 深拷贝浅拷贝")]),t._v(" "),_("p",[t._v("浅拷贝：")]),t._v(" "),_("ul",[_("li",[t._v("将对象内容简单拷贝，指针成员指向同一地址")])]),t._v(" "),_("p",[t._v("深拷贝：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("在堆中开辟一块新的地址，将原地址中的内容拷贝进去")])]),t._v(" "),_("li",[_("p",[t._v("如果数据成员里面不包含指针的话用浅拷贝即可")])]),t._v(" "),_("li",[_("p",[t._v("如果数据成员里面包含指针的话，那就需要用到深拷贝，即为该指针在堆上开辟一块内存，并且将另外一个对象的数据全部赋给这个对象的数据成员")])])]),t._v(" "),_("p",[t._v("深拷贝的拷贝构造函数：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("m_iCount "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iCount"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm_pArr "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m_iCount"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("m_iCount"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tm_pArr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_pArr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("浅拷贝的拷贝构造函数：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("m_iCount "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iCount"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm_pArr "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_pArr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("其构造函数为：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("m_iCount "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" count"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm_pArr"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("m_iCount"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"_10-对象指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-对象指针"}},[t._v("#")]),t._v(" 10. 对象指针")]),t._v(" "),_("h3",{attrs:{id:"_11-对象指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-对象指针"}},[t._v("#")]),t._v(" 11. 对象指针")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("对象指针："),_("code",[t._v("类名 * 指针名")]),t._v("  = "),_("code",[t._v("new 类名")])])]),t._v(" "),_("li",[_("p",[t._v("C语言的"),_("code",[t._v("malloc")]),t._v("与C++的"),_("code",[t._v("new")]),t._v("都具有申请新内存空间的作用，但是"),_("code",[t._v("new")]),t._v("会调用对象的构造函数，而"),_("code",[t._v("malloc")]),t._v("不会调用")])]),t._v(" "),_("li",[_("p",[t._v("C++在"),_("code",[t._v("new")]),t._v("时的初始化的规律可能为：对于有构造函数的类，不论有没有括号，都用构造函数进行初始化；如果没有构造函数，则不加括号的"),_("code",[t._v("new")]),t._v("只分配内存空间，不进行内存的初始化，而加了括号的"),_("code",[t._v("new")]),t._v("会在分配内存的同时初始化为"),_("code",[t._v("0")]),t._v("。")])])]),t._v(" "),_("p",[t._v("第一种(堆中实例化)：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("Coordinate "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个点，指向NULL")]),t._v("\np1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Coordinate"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为Coordinate是一个默认构造函数所以可以没有参数")]),t._v("\nCoordinate "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Coordinate")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("m_iX "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两种不同的赋值方法")]),t._v("\np1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("m_iY "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iX "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iY "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndelete p1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("p",[t._v("第二种（栈中实例化，p2指向p1）：")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("Coordinate p1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从栈中实例化一个对象")]),t._v("\nCoordinate "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让p2指向p1，运用了取地址的符号")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 然后就可以用p2来操作p1的数据成员和成员函数了")]),t._v("\np2"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("m_iX "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np2"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("m_iY "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" p1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iX "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\ncout "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" p1"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("m_iY "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n")])])]),_("h4",{attrs:{id:"_11-1-对象成员指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-对象成员指针"}},[t._v("#")]),t._v(" 11.1. 对象成员指针")]),t._v(" "),_("ul",[_("li",[t._v("对象成员：一个对象作为另外一个类的数据成员（类名 * 对象名）")]),t._v(" "),_("li",[t._v("对象成员指针：一个对象的指针作为另外一个类的数据成员（类名 *指针名）")])]),t._v(" "),_("ol",[_("li",[t._v("对象成员指针的定义： "),_("code",[t._v("类名 * 指针名")]),t._v(" 是指针而不是对象")]),t._v(" "),_("li",[t._v("指针在32位编译器下占4个基本内存单元")]),t._v(" "),_("li",[t._v("若存在对象成员指针1，2……"),_("code",[t._v("sizeof（指针1，指针2……）")]),t._v("只计算各指针所占内存的总和，不计算对象成员所占内存")]),t._v(" "),_("li",[t._v("对象成员指针如果在构造函数用 "),_("code",[t._v("new")]),t._v(" 的方式从堆中申请内存实例化2个 "),_("code",[t._v("Coordinate")]),t._v(" 对象，那这2个对象都是在堆中，而不在 "),_("code",[t._v("Line")]),t._v(" 对象中，因为每个指针占 4 个内存单元，因此 "),_("code",[t._v("sizeof（Line）")]),t._v(" 只占 "),_("code",[t._v("8")]),t._v(" 个内存单元，销毁 "),_("code",[t._v("Line")]),t._v(" 的时候，先销毁队中的内存，在释放 "),_("code",[t._v("Line")]),t._v(" 本身的内存")])]),t._v(" "),_("p",[t._v("初始化方式：")]),t._v(" "),_("ol",[_("li",[_("p",[_("code",[t._v("Line::Line():m_pCoorA(NULL), m_pCoorB(NULL){}")])])]),t._v(" "),_("li")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("Line"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Line")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tm_pCoorA "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tm_pCoorB "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("ol",{attrs:{start:"3"}},[_("li")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("Line"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Line")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tm_pCoorA "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Coordinate")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tm_pCoorB "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Coordinate")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nLine"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Line")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  delete m_pCoorA"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  m_pCoorA "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  delete m_pCoorB"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  m_pCoorB "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("h4",{attrs:{id:"_11-2-this-指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-this-指针"}},[t._v("#")]),t._v(" 11.2. "),_("code",[t._v("this")]),t._v(" 指针")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("this")]),t._v(" 表示对象的地址，可以访问到自身对象的数据成员")]),t._v(" "),_("li",[_("code",[t._v("this")]),t._v(" 代表当前自身的对象，谁调用 "),_("code",[t._v("Array")]),t._v(" 构造对象，然后 "),_("code",[t._v("This")]),t._v(" 就代表那个对象取代那个对象，也就是  "),_("code",[t._v("Array arr1；")])]),t._v(" "),_("li",[_("code",[t._v("Array arr1；arr1.setLen（5）")]),t._v("的时候，"),_("code",[t._v("{this -> len = len}")]),t._v("  中 "),_("code",[t._v("this")]),t._v(" 就是代表了 "),_("code",[t._v("arr1")]),t._v(" 对象，会取代 "),_("code",[t._v("this")]),t._v(" ，而 "),_("code",[t._v("this")]),t._v(" 其实是对象的地址，也就是指针，"),_("code",[t._v("{this -> len = len}")]),t._v(" 就代表是 "),_("code",[t._v("{ arr1.len = len; }")]),t._v(",从而标记区别了数据成员和参数。")]),t._v(" "),_("li",[t._v("编译时编译器自动为每个成员函数的参数列表都添加一个"),_("code",[t._v("this")]),t._v(" 指针")])]),t._v(" "),_("p",[_("code",[t._v("this")]),t._v("的值是对象本身地址；"),_("code",[t._v("*this")]),t._v(" 就是对象"),_("code",[t._v("arr1")])]),t._v(" "),_("ol",[_("li",[_("code",[t._v("Array ... return *this")]),t._v(" "),_("ul",[_("li",[t._v("相当于： "),_("code",[t._v("Array arrX = arr1;")]),t._v(" "),_("code",[t._v("arrX")]),t._v("是一个新的对象。即返回的"),_("code",[t._v("this")]),t._v("指针为另一个临时对象")])])]),t._v(" "),_("li",[_("code",[t._v("Array& ... return *this")]),t._v(" "),_("ul",[_("li",[t._v("相当于： "),_("code",[t._v("Array & arrX = arr1;")]),t._v(" 此时"),_("code",[t._v("arrX")]),t._v("是"),_("code",[t._v("arr1")]),t._v("的别名。")])])]),t._v(" "),_("li",[_("code",[t._v("Array* ... return this")]),t._v(" "),_("ul",[_("li",[t._v("相当于： "),_("code",[t._v("Array* arrX = this;")]),t._v(" 此时"),_("code",[t._v("arrX")]),t._v("的值是地址，且是指向"),_("code",[t._v("arr1")]),t._v("的。用"),_("code",[t._v("->")]),t._v("访问或者"),_("code",[t._v("*p.")]),t._v(" 访问")])])])]),t._v(" "),_("p",[t._v("注意：")]),t._v(" "),_("ol",[_("li",[_("code",[t._v("this")]),t._v("指针无需用户定义，是编译器自动产生的。")]),t._v(" "),_("li",[t._v("同一个类的两个对象的"),_("code",[t._v("this")]),t._v("指针指向不同位置的内存：对象各自的"),_("code",[t._v("this")]),t._v("指针指向各自对象的首地址，所以不同对象的"),_("code",[t._v("this")]),t._v("指针一定指向不同的内存地址")]),t._v(" "),_("li",[t._v("当成员函数的参数或临时变量与数据成员同名时，可以使用"),_("code",[t._v("this")]),t._v("指针区分同名的数据成员。")]),t._v(" "),_("li",[_("code",[t._v("this")]),t._v("指针也是指针类型，所以在32位编译器下也占用4个基本的内存单元，即"),_("code",[t._v("sizeof(this)")]),t._v("的结果为4。")])]),t._v(" "),_("h3",{attrs:{id:"_12-常对象指针与常对象引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-常对象指针与常对象引用"}},[t._v("#")]),t._v(" 12. 常对象指针与常对象引用")]),t._v(" "),_("ol",[_("li",[_("code",[t._v("Coordinate * const pCoor = &coor1")]),t._v(": 指针是常量，这种方式定义的常指针“只能指向"),_("code",[t._v("coor1")]),t._v("，但可以调用"),_("code",[t._v("coor1")]),t._v("的不同的函数”；（拥有读写权限）")]),t._v(" "),_("li",[_("code",[t._v("const Coordinate *pCoor = &coor1")]),t._v(": 对象是常量，只能调用"),_("code",[t._v("coor1")]),t._v("的“常成员函数”。（只拥有读权限）")])]),t._v(" "),_("p",[t._v("常指针和常引用都只能调用对象的常成员函数。")]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Coordinate "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("coor")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建常指针p")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Coordinate "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("coor"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建常引用c")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Coordinate "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" coor"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"_13-继承"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-继承"}},[t._v("#")]),t._v(" 13. 继承")]),t._v(" "),_("p",[t._v("实例化子类时，会先调用父类的构造函数，再调用子类自己的构造函数。\n析构时，先调用自己析构的函数，再调用父类的析构函数。")]),t._v(" "),_("p",[_("code",[t._v("public")]),t._v("继承：")]),t._v(" "),_("ul",[_("li",[t._v("基类的"),_("code",[t._v("public")]),t._v("成员被继承到派生类的"),_("code",[t._v("public")]),t._v("位置，")]),t._v(" "),_("li",[t._v("基类的"),_("code",[t._v("protected")]),t._v("成员被继承到派生类的"),_("code",[t._v("protected")]),t._v("位置，")]),t._v(" "),_("li",[t._v("基类的"),_("code",[t._v("private")]),t._v("成员被继承到派生类的"),_("code",[t._v("private")]),t._v("的“不可见位置”，所以派生类的成员函数是不能访问这些"),_("code",[t._v("private")]),t._v("的成员的")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 堆中实例化对象：")]),t._v("\nWorker "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Worker")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈中实例化对象：")]),t._v("\nWorker worker"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("ul",[_("li",[t._v("类中成员函数可访问"),_("code",[t._v("protected")]),t._v("和"),_("code",[t._v("private")]),t._v("成员。")]),t._v(" "),_("li",[t._v("类的对象不能访问"),_("code",[t._v("protected")]),t._v("和"),_("code",[t._v("private")]),t._v("成员。")]),t._v(" "),_("li",[t._v("公有继承的派生类的成员函数可访问基类中的"),_("code",[t._v("protected")]),t._v("成员，不可访问基类中的"),_("code",[t._v("private")]),t._v("成员。")])]),t._v(" "),_("p",[t._v("继承的几种方式")]),t._v(" "),_("ul",[_("li",[t._v("公有继承 "),_("code",[t._v("class A: public B")])]),t._v(" "),_("li",[t._v("保护继承："),_("code",[t._v("class A: protected B")])]),t._v(" "),_("li",[t._v("私有继承： "),_("code",[t._v("class A: private B")])])]),t._v(" "),_("p",[t._v("注意：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("通过"),_("code",[t._v("public")]),t._v("继承的都是被继承为派生类中所对应的访问属性（"),_("code",[t._v("private")]),t._v("例外），")]),t._v(" "),_("ul",[_("li",[t._v("如：基类"),_("code",[t._v("public")]),t._v("通过"),_("code",[t._v("public")]),t._v("继承为派生类中"),_("code",[t._v("public")]),t._v("；")]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("protected")]),t._v("通过"),_("code",[t._v("public")]),t._v("继承为派生类中"),_("code",[t._v("protected")])]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("private")]),t._v("通过"),_("code",[t._v("public")]),t._v("继承为无法访问。")])])]),t._v(" "),_("li",[_("p",[t._v("通过"),_("code",[t._v("protected")]),t._v("继承的都是被继承为派生类中的"),_("code",[t._v("protected")]),t._v("访问属性（"),_("code",[t._v("private")]),t._v("例外），")]),t._v(" "),_("ul",[_("li",[t._v("如：基类"),_("code",[t._v("public")]),t._v("通过通过"),_("code",[t._v("protected")]),t._v("继承为派生类中"),_("code",[t._v("protected")]),t._v("；")]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("protected")]),t._v("通过"),_("code",[t._v("protected")]),t._v("继承为派生类中"),_("code",[t._v("protected")]),t._v("；")]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("private")]),t._v("通过"),_("code",[t._v("protected")]),t._v("继承为无法访问。")])])]),t._v(" "),_("li",[_("p",[t._v("通过"),_("code",[t._v("private")]),t._v("继承的都是被继承为派生类中的"),_("code",[t._v("private")]),t._v("访问属性（"),_("code",[t._v("private")]),t._v("例外），")]),t._v(" "),_("ul",[_("li",[t._v("如：基类"),_("code",[t._v("public")]),t._v("通过通过"),_("code",[t._v("private")]),t._v("继承为派生类中"),_("code",[t._v("private")]),t._v(";")]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("protected")]),t._v("通过"),_("code",[t._v("private")]),t._v("继承为派生类中"),_("code",[t._v("private")]),t._v("；")]),t._v(" "),_("li",[t._v("基类"),_("code",[t._v("private")]),t._v("通过"),_("code",[t._v("private")]),t._v("继承为无法访问。")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:"/imgs/c_plus_extend_public.png",alt:"继承"}}),t._v(" "),_("img",{attrs:{src:"/imgs/c_plus_extend_protected.png",alt:"继承"}}),t._v(" "),_("img",{attrs:{src:"/imgs/c_plus_extend_private.png",alt:"继承"}})]),t._v(" "),_("p",[t._v("私有继承后父类对象的"),_("code",[t._v("public")]),t._v("和"),_("code",[t._v("protected")]),t._v("成员被继承到子类的"),_("code",[t._v("private")]),t._v("下，类似于在子类中定义了一个父类的私有对象成员。这两种方式都被称为"),_("code",[t._v("has-a")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"_14-隐藏"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14-隐藏"}},[t._v("#")]),t._v(" 14. 隐藏")]),t._v(" "),_("p",[t._v("父子关系，成员同名，隐藏")]),t._v(" "),_("p",[t._v("A类有"),_("code",[t._v("void ABC（）")]),t._v("，B类也有"),_("code",[t._v("void ABC（）")]),t._v("，B类公有继承A类，基类中的"),_("code",[t._v("ABC（）")]),t._v("成员函数就会被B类中的"),_("code",[t._v("ABC（）")]),t._v("成员函数隐藏，隐藏的特性体现在：当实例化B的对象的时候，使用该对象只能够直接的访问到子类B中的"),_("code",[t._v("ABC（）")]),t._v("成员函数，而无法访问父类中的"),_("code",[t._v("ABC（）")]),t._v("成员函数 从语法的角度来说，同名的数据成员也具有隐藏的特征\n对象调用同名的成员函数：直接"),_("code",[t._v("soldier.play()；")]),t._v("调用的是自己的成员函数，如果要调用父类的成员函数，则需要加上父类的类名，"),_("code",[t._v("soldier.Person::play()")])]),t._v(" "),_("p",[t._v("子类和父类的重名函数无法形成重载，只能进行隐藏，必须加上"),_("code",[t._v("父类::调用")])]),t._v(" "),_("h3",{attrs:{id:"_15-头文件双引号和尖括号的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-头文件双引号和尖括号的区别"}},[t._v("#")]),t._v(" 15. 头文件双引号和尖括号的区别")]),t._v(" "),_("p",[_("code",[t._v("include")]),t._v("包含头文件时注意双引号"),_("code",[t._v("“”")]),t._v("和尖括号"),_("code",[t._v("<>")]),t._v("是不同的，编译器会搜索不同的路径")]),t._v(" "),_("ul",[_("li",[t._v("尖括号"),_("code",[t._v("<>")]),t._v("是引用C++自身文件库里的头文件，如"),_("code",[t._v("<iostream>")])]),t._v(" "),_("li",[t._v("双引号"),_("code",[t._v("“”")]),t._v("则是引用用户自己编写的头文件，如"),_("code",[t._v("“Person.h”")])])]),t._v(" "),_("h3",{attrs:{id:"_16-isa"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16-isa"}},[t._v("#")]),t._v(" 16. "),_("code",[t._v("isA")])]),t._v(" "),_("p",[t._v("派生类的对象可以赋值给基类，而基类的对象不能赋值给派生类")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Soldier s1;\nPerson p1 = s1;\nPerson *p2 = &s1; // 这三行是正确的\n \ns1 = p1;\nSoldier *s2 = &p1; // 这两行是错误的\n")])])]),_("p",[t._v("对于作为函数参数时：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("void fun(Person *p){...}\nint main(){\n    Person p1;\n    Soldier s1;\n    fun(&p1);\n    fun(&s1); // 这两种都是正确的\n}\n")])])]),_("p",[t._v("用子类对象初始化父类对象时，从父类中继承下来的属性会被初始化，而子类中特有的属性则会被截断（不会赋值给父类）")]),t._v(" "),_("p",[t._v("父类的指针指向子类对象的时候  只能访问子类中父类原有的成员，而无法访问子类中独有的数据成员和成员函数")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("Person *p=new Soldier; // 用父类Person的指针指向堆中分配的子类Soldier的对象\ndelete p;\np=NULL; // 只执行父类的析构函数，而不执行子类的析构函数，可能导致内存泄露\n")])])]),_("p",[t._v("【如何在这种情况下防止内存泄露？】")]),t._v(" "),_("p",[t._v("虚析构函数：当存在继承关系，且要用一个父类的指针指向堆中子类的对象，并希望用父类的指针释放这块内存时，可以使用。")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class Person{\n    Person();\n    virtual~Person();  // 前面加关键字virtual即可，这个关键字可以被继承下去\n}\n// 在Soldier.h中，即使在~Soldier前面不写virtual，也相当于有了这个关键字（被继承下来了）\n")])])]),_("p",[_("code",[t._v("void test1(Person p){p.play}")]),t._v("调用"),_("code",[t._v("test1")]),t._v("的时候，因为在"),_("code",[t._v("test1")]),t._v("中所定义的参数是一个对象P，所以传值的时候会先实例化临时对象P，通过临时对象P调用play这个函数，在"),_("code",[t._v("test1")]),t._v("执行完毕之后，p这个临时对象就会被销毁\n如果函数的参数是基类的对象，那么基类的对象和派生类的对象，都可以作为实参传递进去，并且可以正常使用。\n"),_("code",[t._v("void test2(Person &p)")]),t._v("  没有实例化临时对象，使用基类的引用也可以接收基类的对象以及派生类的对象\n"),_("code",[t._v("void test3(Person *p)")]),t._v("的调用结果和"),_("code",[t._v("void test2(Person &p)")]),t._v("一样")]),t._v(" "),_("h3",{attrs:{id:"_17-多重继承与多继承"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17-多重继承与多继承"}},[t._v("#")]),t._v(" 17. 多重继承与多继承")]),t._v(" "),_("ul",[_("li",[t._v("多重继承，3个类即以上，A是B的父类，B是C的父类；")]),t._v(" "),_("li",[t._v("多继承，3个类即以上，一个类同时继承了多个类；")]),t._v(" "),_("li",[t._v("若未指明继承方式，则系统默认为"),_("code",[t._v("private")]),t._v("私有继承。")])]),t._v(" "),_("p",[t._v("如果存在多继承.那么初始化子类的时候肯定先需要调用父类的析构函数.但是先调用哪个父类的析构函数.此顺序不取决于初始化列表,而是取决于你继承的顺序.比如")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class A : public B, public C {\n    A(b,c):C(c),B(b);\n};\n")])])]),_("p",[t._v("上面的例子,A先继承了B,再继承C.但是初始化列表中先初始化了C,再初始化B.但是B和C的执行顺序确实 "),_("code",[t._v("B - C - A")]),t._v(". 可见多继承的父类初始化顺序应该和继承顺序有关.")]),t._v(" "),_("h3",{attrs:{id:"_18-虚继承"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18-虚继承"}},[t._v("#")]),t._v(" 18. 虚继承")]),t._v(" "),_("p",[t._v("菱形继承：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("       人\n      / \\\n   工人  农民\n     \\   /\n     农民工\n")])])]),_("p",[t._v("使用虚("),_("code",[t._v("virtual")]),t._v(')继承，防止"农民工"中有两个"人"的实例')]),t._v(" "),_("p",[t._v("虚继承和普通继承最大的不同是虚继承相当于在子类中有一个指向父类的指针，而在菱形继承时，就会继承一个指针。因为普通继承每一个函数或变量都是"),_("code",[t._v("xxx")]),t._v("的，但是虚继承这个指针并不是子类的一部分，只是有一个。当二代子类在继承子类时，两个指针重合，就省去了很多空间。")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class A\n{...};\nclass B1:virtual public A\n{...};\nclass B2:virtual public A\n{...};\nclass C:public B1,public B2\n{...};\n")])])]),_("p",[t._v("如果文件被定义了两次，例如"),_("code",[t._v("include .h")]),t._v("这种情况，\n通过宏定义解决重定义 在原"),_("code",[t._v(".h")]),t._v("头文件中：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("#ifndef PERSON_H\n#define PERSON_H\n...\n#endif\n")])])]),_("p",[t._v("没采用虚继承，此时要创建农民工的类，先调用"),_("code",[t._v("Farmer")]),t._v("的构造函数，又因为"),_("code",[t._v("Person")]),t._v("是"),_("code",[t._v("Farmer")]),t._v("的父类，所以最终先调用"),_("code",[t._v("Person")]),t._v("的构造函数，同理又由于"),_("code",[t._v("worker")]),t._v("也是农民工的父类，所以也要先调用"),_("code",[t._v("worker")]),t._v("的构造函数，而"),_("code",[t._v("person")]),t._v("又是"),_("code",[t._v("worker")]),t._v("的父类，故先调用"),_("code",[t._v("person")]),t._v("的构造函数，再调用"),_("code",[t._v("worker")]),t._v("的构造函数，最终调用农民工的构造函数（"),_("code",[t._v("Person->Farmer->Person->Worker->MigrantWorker")]),t._v("）。")]),t._v(" "),_("p",[t._v("使用虚继承时虽然不会重复调用最顶层父类的构造函数和析构函数，但参数只能使用最顶层父类默认值，而无法从子类中获得传入的值。")]),t._v(" "),_("h3",{attrs:{id:"_19-虚函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19-虚函数"}},[t._v("#")]),t._v(" 19. 虚函数")]),t._v(" "),_("ul",[_("li",[t._v("多态：指相同对象受到不同消息或不同对象收到相同消息时产生不同的动作。\n"),_("ul",[_("li",[t._v("静态多态（早绑定）：在运行前，编译阶段就已确定要调用哪个函数，很早就把函数编译进去。（比如重载）")]),t._v(" "),_("li",[t._v("动态多态（晚绑定）：不同对象，下达相同指令，产生不同动作。前提：以封装与继承为基础。至少要两个类，父类与子类，用三个类时，动态多态表现地会更明显。")])])]),t._v(" "),_("li",[t._v("实现多态的成员函数：用"),_("code",[t._v("virtual")]),t._v("修饰函数，使之成为虚函数。")])]),t._v(" "),_("p",[t._v("动态多态和静态多态的区别（注意这些多态都出现在类里面，因为没有了继承就没有多态）：\n静态多态(早绑定)：静态多态主要通过函数和运算符重载来实现，例如函数"),_("code",[t._v("void go（int a）{}")]),t._v("和"),_("code",[t._v("void go（）{}")]),t._v("这两个函数的名字一样，但是在编译的时候就可以根据"),_("code",[t._v("go（）")]),t._v("里面有无输入参数区分出到底执行哪个方法。")]),t._v(" "),_("p",[t._v("动态多态(晚绑定)：例如父类"),_("code",[t._v("father")]),t._v("有个方法名字叫"),_("code",[t._v("go（）{“父类的go”}；")]),t._v("\n子类"),_("code",[t._v("son")]),t._v("有个方法也叫"),_("code",[t._v("go（）{“son的go”}；")]),t._v("\n子类"),_("code",[t._v("daughter")]),t._v("有个方法也叫"),_("code",[t._v("go（）{“daughter的go”}；")])]),t._v(" "),_("div",{staticClass:"language-c extra-class"},[_("pre",{pre:!0,attrs:{class:"language-c"}},[_("code",[t._v("father "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new son；\nfather "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("new daughter；\n")])])]),_("p",[t._v("然后当我们执行")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("p1->go（）；\np2->go（）;\n")])])]),_("p",[t._v("输出的结果都只是父类的"),_("code",[t._v("go")]),t._v('；\n如果想实现输出"'),_("code",[t._v("son")]),t._v("的"),_("code",[t._v("go")]),t._v('"和"'),_("code",[t._v("daughter")]),t._v("的"),_("code",[t._v("go")]),t._v('"，就需要在父类的'),_("code",[t._v("go（）")]),t._v("方法得前面加上关键字"),_("code",[t._v("virtual")]),t._v("变成。这样再输入"),_("code",[t._v("p1->go（）；p2->go（）;")]),t._v('就可以输出"'),_("code",[t._v("son")]),t._v("的"),_("code",[t._v("go")]),t._v('"和"'),_("code",[t._v("daughter")]),t._v("的"),_("code",[t._v("go")]),t._v('"')]),t._v(" "),_("h3",{attrs:{id:"_20-虚析构函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20-虚析构函数"}},[t._v("#")]),t._v(" 20. 虚析构函数")]),t._v(" "),_("ul",[_("li",[t._v("虚析构函数：目的就是解决用父类的指针调用子类对象时产生的一些内存泄漏问题，"),_("code",[t._v("delete")]),t._v(" 指针，指针的类型是什么的，系统就会释放相应内存的空间。所以在父类的析构函数前加上“"),_("code",[t._v("virtual")]),t._v("”关键字，则在释放内存时，会同时释放掉子类对象的内存。")]),t._v(" "),_("li",[t._v("虚不是所有函数都能“虚的”：\n"),_("ul",[_("li",[t._v("内联函数不能是虚函数，")]),t._v(" "),_("li",[t._v("静态函数不能是虚函数，")]),t._v(" "),_("li",[t._v("构造函数不能是虚函数，")]),t._v(" "),_("li",[t._v("不是类的成员函数不能是虚函数，即普通函数不能是虚函数")])])])]),t._v(" "),_("p",[_("code",[t._v("virtual")]),t._v("适用的以下情形：")]),t._v(" "),_("ul",[_("li",[t._v("虚继承，"),_("code",[t._v("class B：virtual public A")]),t._v(" （菱形继承"),_("code",[t._v("A-B")]),t._v(","),_("code",[t._v("C-D")]),t._v("）避免重复继承数据")]),t._v(" "),_("li",[t._v("虚方法，"),_("code",[t._v("virtual void fun()")]),t._v("  实现多态，不同子类实例化的父类调用相同方法结果不同")]),t._v(" "),_("li",[t._v("虚析构，"),_("code",[t._v("virtual ~A( )")]),t._v("  防止释放子类实例化的父类中子类内存泄漏的问题，最好析构前都加")])]),t._v(" "),_("h3",{attrs:{id:"_21-虚函数与虚析构函数原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_21-虚函数与虚析构函数原理"}},[t._v("#")]),t._v(" 21. 虚函数与虚析构函数原理")]),t._v(" "),_("ul",[_("li",[t._v("覆盖：父类和子类定义了同名虚函数，在子类的虚函数表中，子类的虚函数地址就会把原来的父类的虚函数地址给覆盖了。")]),t._v(" "),_("li",[t._v("隐藏：父类和子类出现了同名函数，父类的同名函数将进行隐藏。")]),t._v(" "),_("li",[t._v("重载是指同一类中两个同名函数，但是参数的类型和数量不同（静态多态）")])]),t._v(" "),_("p",[t._v("虚析构函数原理：")]),t._v(" "),_("ul",[_("li",[t._v("（前提：执行完子类的析构函数就会执行父类的析构函数。）")]),t._v(" "),_("li",[t._v("如果在父类中定义了虚析构函数，那么在父类的虚函数表中会有一个父类析构函数的函数指针；而子类的虚函数表也会有一个子类析构函数指针指向子类的析构函数。")]),t._v(" "),_("li",[t._v("此时若使用父类的指针指向子类对象，那么通过"),_("code",[t._v("delete")]),t._v("父类指针，可找到子类的虚函数表指针——虚函数表——析构函数——自动执行父类析构函数")])]),t._v(" "),_("p",[t._v("注意：")]),t._v(" "),_("ul",[_("li",[t._v("对象的大小：类实例化的对象，数据成员占据的内存大小，成员函数不占据内存。（没有数据成员的对象会占用1个内存单元，证明自己的存在）")]),t._v(" "),_("li",[t._v("对象的地址：实例化的对象，所占内存的第一个存储单元的地址")]),t._v(" "),_("li",[t._v("对象成员地址：实例化对象有一个或多个数据成员，每个数据成员都有自己的地址，占一定的内存空间（数据类型不同，地址不同）")]),t._v(" "),_("li",[t._v("函数表指针：具有虚函数的类实例化的对象时，存储在内存中第一块的指针就是虚函数表的指针")])]),t._v(" "),_("p",[t._v("注意：")]),t._v(" "),_("ul",[_("li",[t._v("虚函数表指针占据的是每个对象的前四个内存单元")]),t._v(" "),_("li",[t._v("有虚函数时，对象中首先存虚函数表指针，再存数据成员地址，没有虚函数时，首先存的是数据成员的地址。")]),t._v(" "),_("li",[t._v("有虚函数时，先使用指针 p 指向对象，访问的虚函数表指针，（"),_("code",[t._v("*p")]),t._v("）取得的是虚函数表地址，再使 p++ 就指向了数据成员，（"),_("code",[t._v("*p")]),t._v("）就能取得数据成员的值。")])]),t._v(" "),_("p",[t._v("每个类只有一份虚函数表，所有该类的对象共用同一张虚函数表")]),t._v(" "),_("h3",{attrs:{id:"_22-纯虚函数抽象类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_22-纯虚函数抽象类"}},[t._v("#")]),t._v(" 22. 纯虚函数抽象类")]),t._v(" "),_("ul",[_("li",[t._v("虚函数："),_("code",[t._v("virtual double calcArea(){return 0;}")])]),t._v(" "),_("li",[t._v("纯虚函数："),_("code",[t._v("virtual double calcPerimeter() = 0;")])]),t._v(" "),_("li",[t._v("纯虚函数在虚函数表中直接写为"),_("code",[t._v("0")]),t._v("，包含纯虚函数的类，就是抽象类。")]),t._v(" "),_("li",[t._v("纯虚函数无法调用，所以抽象类无法实例化对象")]),t._v(" "),_("li",[t._v("抽象类的子类也有可能是抽象类。抽象类的子类只有把抽象类当中的所有纯虚函数都做了实现，子类才可以实例化对象。")]),t._v(" "),_("li",[t._v("抽象基类是本类族的公共接口，例如可通过抽象基类的指针访问到任何子类的虚函数，并对这些函数下达同一命令，从而实现多态性。")]),t._v(" "),_("li",[t._v("若是子类并没有对父类中的纯虚函数进行定义，则该子类仍然是抽象基类。")])]),t._v(" "),_("p",[t._v("只有函数声明 没有函数定义的函数叫做纯虚函数，纯虚函数表示为虚函数后面加上"),_("code",[t._v("=0")])]),t._v(" "),_("h3",{attrs:{id:"_23-接口类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_23-接口类"}},[t._v("#")]),t._v(" 23. 接口类")]),t._v(" "),_("ul",[_("li",[t._v("含有纯虚函数的类是抽象类。")]),t._v(" "),_("li",[t._v("仅有纯虚函数的类是接口类：（没有数据成员，只有成员函数，且都是纯虚函数）。")]),t._v(" "),_("li",[t._v("接口类更多的是表达一个能力或者协议")])]),t._v(" "),_("p",[t._v("继承后的子类的构造函数要用初始化列表初始化，因为初始化列表先于构造函数执行，并且父类构造函数先于子类构造函数执行：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('FighterPlane::FighterPlane(string code ):Plane(code){\n  // cout << " FighterPlane()" << endl;\n}\n')])])]),_("ul",[_("li",[t._v("用接口类做函数形参，可以限制传入参数的类型，只有拥有接口类定义的函数功能的对象才能作为实参")]),t._v(" "),_("li",[_("code",[t._v("void flyMatch(Flyable *f1,Flyable *f2){f1->takeoff();f2->takeoff()}")])]),t._v(" "),_("li",[t._v("以上函数当传入参数为plane类或者Fighter类时，就是父类指针指向子类对象。")])]),t._v(" "),_("h3",{attrs:{id:"_24-rtti"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_24-rtti"}},[t._v("#")]),t._v(" 24. "),_("code",[t._v("RTTI")])]),t._v(" "),_("p",[_("code",[t._v("Run-Time Type Identification")]),t._v(" "),_("code",[t._v("RTTI")]),t._v("：运行时类型识别")]),t._v(" "),_("p",[_("code",[t._v("typeid(*obj).name()")]),t._v("打印出"),_("code",[t._v("obj")]),t._v("这个指针指向的实际的对象类型\n对类型进行比对："),_("code",[t._v("if{typeid(*obj)==typeid(Bird)}")])]),t._v(" "),_("p",[_("code",[t._v("dynamic_cast< >转换类型")]),t._v("，"),_("code",[t._v("< >")]),t._v("中是要转化成为的类型，例如："),_("code",[t._v("Bird *bird = dynamic_cast<Bird *>(obj)``;(obj)")]),t._v("转化为"),_("code",[t._v("Bird * 类型")])]),t._v(" "),_("p",[_("code",[t._v("dynamic_cast")]),t._v("用法的注意事项：")]),t._v(" "),_("ul",[_("li",[t._v("只能应用于指针和引用之间的转换，即"),_("code",[t._v("< >")]),t._v("中只能是某一类型的指针或者是某一类型的引用；")]),t._v(" "),_("li",[t._v("要转换的类型中，必须包含虚函数；")]),t._v(" "),_("li",[t._v("转换成功返回子类的地址，失败返回"),_("code",[t._v("NULL")])])]),t._v(" "),_("p",[_("code",[t._v("typied")]),t._v("的注意事项：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("type_id")]),t._v(" 返回一个"),_("code",[t._v("type_info")]),t._v("对象的引用；")]),t._v(" "),_("li",[t._v("如果想通过基类的指针获得派生类的数据类型，基类必须带有虚函数；")]),t._v(" "),_("li",[t._v("只能获取对象的实际类型")])]),t._v(" "),_("p",[t._v("之所以进行这个转换是因为使用父类"),_("code",[t._v("Flyable")]),t._v("指针通过虚函数实现机制我们可以动态的是实现同名的虚函数，但是对于子类"),_("code",[t._v("Bird")]),t._v("中的非虚函数（觅食函数），要想调用则必须是"),_("code",[t._v("Bird")]),t._v("，所以要进行强制类型转换。")]),t._v(" "),_("h3",{attrs:{id:"_25-异常处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25-异常处理"}},[t._v("#")]),t._v(" 25. 异常处理")]),t._v(" "),_("ul",[_("li",[t._v("异常：程序运行期出现的错误。")]),t._v(" "),_("li",[t._v("异常处理：对有可能发生异常的地方做出预见性的安排。")]),t._v(" "),_("li",[t._v("异常处理关键字"),_("code",[t._v("try...catch...")]),t._v("和"),_("code",[t._v("throw")]),t._v("就是将主逻辑放在"),_("code",[t._v("try")]),t._v("块里，异常处理逻辑放在"),_("code",[t._v("catch")]),t._v("里面。")]),t._v(" "),_("li",[t._v("基本思想：主逻辑与异常处理分离。好处看上去整齐，非常容易理解。")]),t._v(" "),_("li",[t._v("异常传播方向和调用关系 相反。")]),t._v(" "),_("li",[_("code",[t._v("try")]),t._v(" 和"),_("code",[t._v("catch")]),t._v("可以是一对一也可以是一对多。")]),t._v(" "),_("li",[t._v("常见的异常：数组下标越界，除数为0，内存不足。")])]),t._v(" "),_("p",[t._v("多态和异常处理的联系：我们可以通过定义一个异常类，把异常类定义为一个接口类其中定义一些打印的方法，或者异常处理的方法，然后我们通过细分的子类来继承接口类当我们抛出这些子类的对象时都可以用父类来捕获。"),_("code",[t._v("throw new")]),t._v("加子类名捕获时用"),_("code",[t._v("catch")]),t._v("（父类名"),_("code",[t._v("+&e")]),t._v("）我们也可以通过子类对象去调用子类相应的虚函数。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("catch")]),t._v("（引用）可以输出错误代码，"),_("code",[t._v("catch（int &e）{ cout << e << endl; }")])]),t._v(" "),_("li",[t._v("也可以 "),_("code",[t._v("throw")]),t._v(" 一个类，然后就可以在 "),_("code",[t._v("catch")]),t._v(" 中调用这个类的成员函数，如果继承了父类，还可以调用到父类的成员函数（方法是"),_("code",[t._v("[::]")]),t._v("来写是父类下的成员函数），通过对父类的成员函数加上 "),_("code",[t._v("virtual")]),t._v(" 变成虚函数，在子类继承父类的时候，如果实例化父类类型的子类对象时，就可以调用到子类的成员函数。")]),t._v(" "),_("li",[_("code",[t._v("catch")]),t._v(" 中写上父类类型因为继承而存在 "),_("code",[t._v("isA")]),t._v(" 的关系，就可以传入子类对象或者父类对象")]),t._v(" "),_("li",[_("code",[t._v("try")]),t._v(" 可以对应多条 "),_("code",[t._v("catch")]),t._v(" 说的是一个错误出现的原因可能有多个")])]),t._v(" "),_("h3",{attrs:{id:"_26-友元函数和友元类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26-友元函数和友元类"}},[t._v("#")]),t._v(" 26. 友元函数和友元类")]),t._v(" "),_("p",[t._v("1，友元全局函数：\n"),_("code",[t._v("friend void printXY（Coordinate &c);")]),t._v("\n将函数printXY声明成类"),_("code",[t._v("coordinate")]),t._v("的友元，则在"),_("code",[t._v("printXY")]),t._v("可以直接访问"),_("code",[t._v("coordinate")]),t._v("的"),_("code",[t._v("private")]),t._v("的成员。\n友元成员函数：\n"),_("code",[t._v("friend void Circle::printXY(Coordinate &c);")]),t._v("\n将类"),_("code",[t._v("Circle")]),t._v("的成员函数"),_("code",[t._v("printXY")]),t._v("声明称"),_("code",[t._v("Coordinate")]),t._v("类的友元,\n2，友元类：\n在类"),_("code",[t._v("Coordinate")]),t._v(" 中写上")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("friend Circle;//应该在类外，前面先写上class Circle;\n")])])]),_("p",[t._v("则可以在Circle类中声明一个"),_("code",[t._v("Coordinate")]),t._v("的对象，然后可以调用"),_("code",[t._v("Coordinate")]),t._v("类的任何成员。\n3，友元注意事项\n单向性，不可传递性，声明的形式及数量不受限制。")]),t._v(" "),_("ul",[_("li",[t._v("友元函数的参数列表必须是类的对象、引用或指针")]),t._v(" "),_("li",[t._v("友元函数的括号内一定要有东西")]),t._v(" "),_("li",[t._v("传入对象的引用，函数的声明和定义写法："),_("code",[t._v("void display（Coordinate &coor）")])])]),t._v(" "),_("ol",[_("li",[t._v("必须在类的说明中说明友元函数，说明时以关键字"),_("code",[t._v("friend")]),t._v("开头，后跟友元函数的函数原型，友元函数的说明可以出现在类的任何地方，包括在"),_("code",[t._v("private")]),t._v("和"),_("code",[t._v("public")]),t._v("部分；")]),t._v(" "),_("li",[t._v('注意友元函数不是类的成员函数，所以友元函数的实现和普通函数一样，在实现时不用"'),_("code",[t._v("::")]),t._v('"指示属于哪个类，只有成员函数才使用"::"作用域符号；')]),t._v(" "),_("li",[t._v("友元函数不能直接访问类的成员，只能访问对象成员，")]),t._v(" "),_("li",[t._v("友元函数可以访问对象的私有成员，但普通函数不行；")]),t._v(" "),_("li",[t._v("调用友元函数时，在实际参数中需要指出要访问的对象，")]),t._v(" "),_("li",[t._v("类与类之间的友元关系不能继承。")]),t._v(" "),_("li",[t._v("一个类的成员函数也可以作为另一个类的友元，但必须先定义这个类。")])]),t._v(" "),_("p",[t._v("友元函数：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("void display(Coordinate coor); // 传对象\nvoid display(Coordinate &coor); // 传引用\n")])])]),_("p",[t._v("传引用 效率更高，因为传对象 会创建临时变量")]),t._v(" "),_("p",[t._v("注意：")]),t._v(" "),_("ul",[_("li",[t._v("友元关系不可传递（B是A朋友，C是B朋友，不代表C是A的朋友）；")]),t._v(" "),_("li",[t._v("友元关系具有单向性；（A是B的朋友，但B不是A的朋友）；")]),t._v(" "),_("li",[t._v("友元声明的形式及数量不受限制；(形式:可以既有友元函数又有友元类；数量上：(可以一个或多个友元函数或友元类)")])]),t._v(" "),_("p",[t._v("友元只是封装的补充，破坏了封装性使私有数据暴漏给朋友，不得已而为之；")]),t._v(" "),_("p",[t._v("构造函数的执行可以分成两个阶段，初始化阶段和计算阶段，初始化阶段先于计算阶段。\n所有类类型（"),_("code",[t._v("class type")]),t._v("）的成员都会在初始化阶段初始化，即使该成员没有出现在构造函数的初始化列表中\n除了性能问题之外，有些时候合初始化列表是不可或缺的，以下几种情况时必须使用初始化列表：")]),t._v(" "),_("ol",[_("li",[t._v("常量成员，因为常量只能初始化不能赋值，所以必须放在初始化列表里面")]),t._v(" "),_("li",[t._v("引用类型，引用必须在定义的时候初始化，并且不能重新赋值，所以也要写在初始化列表里面")]),t._v(" "),_("li",[t._v("没有默认构造函数的类类型，因为使用初始化列表可以不必调用默认构造函数来初始化，而是直接调用拷贝构造函数初始化")])]),t._v(" "),_("h3",{attrs:{id:"_27-static"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27-static"}},[t._v("#")]),t._v(" 27. static")]),t._v(" "),_("ol",[_("li",[t._v("静态数据成员和静态成员函数：两者都是存在在类中的，其存在与否与是否实例化对象无关，即使不实例化，也会在内存中存在。定义方法，在之前加上"),_("code",[t._v("static")]),t._v("即可。")]),t._v(" "),_("li",[t._v("其访问方法：1.通过实例化对象来访问其值  2. 类名::数据成员/成员函数直接调用。")]),t._v(" "),_("li",[t._v("初始化静态数据成员是：\n"),_("ul",[_("li",[t._v("不需要再加"),_("code",[t._v("static")]),t._v("关键字")]),t._v(" "),_("li",[t._v("必须单独去初始化。不是随着对象的产生而产生，是随着类的产生而产生。  "),_("code",[t._v("int Tank::m_iCount = 0;")])])])]),t._v(" "),_("li",[t._v("静态成员函数只能调用静态的数据成员，不能调用非静态的。普通成员函数可以调用静态和非静态的数据成员，不受影响。")]),t._v(" "),_("li",[t._v("不依赖与对象的一个表现：当用"),_("code",[t._v("sizeof")]),t._v("计算时，是不包括静态的数据成员的。")])]),t._v(" "),_("p",[t._v("从"),_("code",[t._v("this")]),t._v("指针谈静态成员函数：")]),t._v(" "),_("ol",[_("li",[t._v("调用静态成员函数和静态数据成员时，并不与对象相关，只是与类相关")]),t._v(" "),_("li",[t._v("使用静态成员函数，并不会传入一个隐形的"),_("code",[t._v("this")]),t._v("指针，并不知道调用的数据成员是哪个对象的数据成员。所以在静态的成员函数中无法调用非静态的数据成员")]),t._v(" "),_("li",[t._v("可以在静态的成员函数中调用静态的数据成员")])]),t._v(" "),_("h3",{attrs:{id:"_28-运算符重载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-运算符重载"}},[t._v("#")]),t._v(" 28. 运算符重载")]),t._v(" "),_("h4",{attrs:{id:"_28-1-一元运算符重载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-1-一元运算符重载"}},[t._v("#")]),t._v(" 28.1. 一元运算符重载")]),t._v(" "),_("p",[t._v("-（负号）的重载:友元函数重载，成员函数重载。\n成员函数重载：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class{Coordinate& operator-();}  \nCoordinate & Coordinate::operator-(){\nm_ix=-m_ix;\nm_iy=-m_iy; \nreturn *this;} \nCoordinate coor1(3,5) -coor1;//coor1.operator-();\n")])])]),_("p",[t._v("友元函数重载:")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(" class{friend Coordinate& operator-(Coordinate &coor);}\nCoordinate& operator-(Coordinate &coor){coor.m_ix = -coor.m_ix; coor.m_iy=-coor.m_iy; return coor;} \n-coor1;//operator-(coor1);\n")])])]),_("p",[t._v("++的前置重载：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class{ Coordinate& operator++();} \nCoordinate& Coordinate::operator++(){m_ix++;m_iy++; return *this;} \n++coor1;//coor1.operator++();\n")])])]),_("p",[t._v("++的后置重载:")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class{ Coordinate operator++(int);}\nCoordinate operator++(int){ Coordinate old(*this); m_ix++;m_iy++; return old;}\ncoor1++;//coor1.operator++(0);\n")])])]),_("p",[t._v("友元函数的重载，因为全局函数不像成员函数有隐式的this指针，因此必须主动给个形参，所以是以类的引用作为形参，再所以，返回值，必须是引用的别名，")]),t._v(" "),_("h4",{attrs:{id:"_28-2-二元运算符重载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-2-二元运算符重载"}},[t._v("#")]),t._v(" 28.2. 二元运算符重载")]),t._v(" "),_("p",[t._v("索引运算符只能作为成员函数重载，因为友元函数重载的第一个形参可以是"),_("code",[t._v("this")]),t._v("指针也可以是其他的值，但是对于索引运算符来说，它的第一个形参必须是"),_("code",[t._v("this")]),t._v("指针。")]),t._v(" "),_("p",[_("code",[t._v("<<")]),t._v("、"),_("code",[t._v(">>")]),t._v("只能用做友元函数重载，因为，"),_("code",[t._v("<<")]),t._v("重载时的形参有两个参数，第一个必须是"),_("code",[t._v("ostream")]),t._v("对象，而成员函数重载时第一个形参是隐形的"),_("code",[t._v("this")]),t._v("指针，因此"),_("code",[t._v("<<")]),t._v("只能声明为友元函数重载。")]),t._v(" "),_("p",[t._v("（1）函数参数是引用，则改变的是传入对象的值\n（2）函数参数是对象，则改变的是新对象的值，其中调用了拷贝构造函数")]),t._v(" "),_("p",[t._v("【"),_("code",[t._v("+")]),t._v("运算符】\n成员函数重载：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class Coordinate{…Coordinate operator+(const Coordinate &coor);…}\n\nCoordinate operator+(const Coordinate &coor)\n{\n    Coordinate temp(0,0);\n    temp.m_iX=this->m_iX+coor.m_iX;\n    temp.m_iY=this->m_iY+coor.m_iY;\n    return temp;\n}\n\nint main (void)\n{   ...\n    coor3=coor1+coor2;//coor1.operator+(coor2)\n    ...\n}\n")])])]),_("p",[t._v("友元函数重载：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class Coordinate{friend Coordinate operator+(const Coordinate &c1，const Coordinate &c2);…}\n\nCoordinate operator+(const Coordinate &c1，const Coordinate &c2)\n{\n    Coordinate temp(0,0);\ntemp.m_iX = c1.m_iX + c2.m_iX;\ntemp.m_iY = c1.m_iY + c2.m_iY;\n    return temp;\n}\n\nint main(void)\n{   ……\n    coor3=coor1+coor2;//operator+(coor1,coor2)\n    ……\n}\n")])])]),_("p",[_("code",[t._v("<<")]),t._v("输出运算符重载")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v('class Coordinate{ friend ostream &operator<<(ostream &out, Coordinate &c); }\n\nostream &operator<<(ostream &out, Coordinate &c){\n  out << c.m_iX << "," <<  c.m_iY;\n  return out;\n};\n')])])]),_("p",[t._v("使用："),_("code",[t._v("cout << coor3 << endl;")])]),t._v(" "),_("p",[_("code",[t._v("[]")]),t._v("索引运算符重载")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("class Coordinate{ int operator[](int index); }\n\nint Coordinate::operator[](int index){\n  if(index == 0) {\n    return m_iX;\n  }\n  return m_iY;\n};\n")])])]),_("p",[t._v("使用："),_("code",[t._v("cout << coor3[1] << endl;")])]),t._v(" "),_("h3",{attrs:{id:"_29-函数模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29-函数模板"}},[t._v("#")]),t._v(" 29. 函数模板")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("函数模板的关键字："),_("code",[t._v("template class typename")]),t._v("（其中后两者相同，可以混用）")])]),t._v(" "),_("li",[_("p",[t._v("函数模板：\n类型模板")])])]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("template<class T>\nT display(T a,T b )\n{\n\n}\n")])])]),_("p",[t._v("调用的时候： "),_("code",[t._v("display(100,2);")]),t._v("自动判断//或者 "),_("code",[t._v("display<int,int>(100,2);")])]),t._v(" "),_("p",[t._v("变量作为参数")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("template<int size>\n{\n}\n")])])]),_("p",[t._v("多参数模板")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("template<class A,calss B>\nvoid display(A a, B b)\n{}\n{}\n")])])]),_("ol",{attrs:{start:"2"}},[_("li",[t._v("定义出函数模板时，函数模板并不是相互重载的关系，因为在内存中只是将函数模板定义出来，并不能在内存中产生任何代码，只有在使用时才产生相应的函数代码，此时这些函数相互间才能称得上重载关系。")])]),t._v(" "),_("p",[t._v("函数模板参数个数不能为0个，因为这样则没有必要使用函数模板。")]),t._v(" "),_("h3",{attrs:{id:"_30-类模板"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30-类模板"}},[t._v("#")]),t._v(" 30. 类模板")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("template<class T>\nclass MyArray{\npublic:\n    void display();//若是类内定义则没什么特别的：void display(){...}\nprivate:\n    T *m_pArr;\n};\n//实现\ntemplate<class T>\nvoid MyArry<T>::display(){\n...\n}\n//使用\nMyArray<int> arr;\narr.display();\n")])])]),_("p",[t._v("【模板代码不能分离编译，必须都写在"),_("code",[t._v(".h")]),t._v("文件中】")]),t._v(" "),_("h3",{attrs:{id:"_31-标准模板库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31-标准模板库"}},[t._v("#")]),t._v(" 31. 标准模板库")]),t._v(" "),_("p",[t._v("迭代器的声明与初始化方法：")]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("vector vec;\nvector<string>::iterator 迭代器名称 = vec.begin();\n//则声明了一个迭代器，并让这个迭代器指向了向量vec的开始的元素，声明迭代器的时候  vector<string>::iterator   是迭代器的类型。\n")])])]),_("p",[t._v("当要使用迭代器输出它指向的元素时必须用  "),_("code",[t._v("*迭代器名称")])]),t._v(" "),_("p",[_("code",[t._v("map")]),t._v(" 是映射。\n声明方法： "),_("code",[t._v("map<T1,T2>映射名称;")]),t._v(" "),_("code",[t._v("T1")]),t._v("是"),_("code",[t._v("key")]),t._v("的类型，"),_("code",[t._v("T2")]),t._v("是"),_("code",[t._v("value")]),t._v("的类型")]),t._v(" "),_("p",[t._v("map的使用方法：")]),t._v(" "),_("ol",[_("li",[t._v("先定义"),_("code",[t._v("pair")]),t._v("：")])]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("pair<T1,T2>名称1（key1,value1）;\npair<T1,T2>名称2（key2,value2）;\n")])])]),_("ol",{attrs:{start:"2"}},[_("li",[t._v("然后把"),_("code",[t._v("pair")]),t._v("插入映射：")])]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("映射名称.insert(名称1);\n映射名称.insert(名称2);\n")])])]),_("ol",{attrs:{start:"3"}},[_("li",[t._v("映射的使用：")])]),t._v(" "),_("div",{staticClass:"language-c++ extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("映射名称[key1] ;  则输出value1\n映射名称[key2] ;  则输出value2\n")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);