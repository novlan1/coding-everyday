(window.webpackJsonp=window.webpackJsonp||[]).push([[608],{878:function(t,a,e){"use strict";e.r(a);var s=e(14),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[a("a",{attrs:{href:"#1-%E4%BB%8B%E7%BB%8D"}},[t._v("1. 介绍")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86"}},[t._v("2. 依赖管理")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B"}},[t._v("3. 构建流程")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#31-goal"}},[t._v("3.1. Goal")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6"}},[t._v("4. 使用插件")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86"}},[t._v("5. 模块管理")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#501-%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93"}},[t._v("5.0.1. 中央仓库")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#502-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93"}},[t._v("5.0.2. 私有仓库")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#503-%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93"}},[t._v("5.0.3. 本地仓库")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#51-%E4%BD%BF%E7%94%A8mvnw"}},[t._v("5.1. 使用mvnw")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#6-%E5%AE%89%E8%A3%85maven-wrapper"}},[t._v("6. 安装Maven Wrapper")])])]),t._v(" "),a("h3",{attrs:{id:"_1-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1. 介绍")]),t._v(" "),a("p",[t._v("Maven是一个Java项目的管理和构建工具：")]),t._v(" "),a("ul",[a("li",[t._v("Maven使用"),a("code",[t._v("pom.xml")]),t._v("定义项目内容，并使用预设的目录结构；")]),t._v(" "),a("li",[t._v("在Maven中声明一个依赖项可以自动下载并导入classpath；")]),t._v(" "),a("li",[t._v("Maven使用"),a("code",[t._v("groupId")]),t._v("，"),a("code",[t._v("artifactId")]),t._v("和"),a("code",[t._v("version")]),t._v("唯一定位一个依赖。")])]),t._v(" "),a("p",[t._v("一个使用Maven管理的普通的Java项目，它的目录结构默认如下：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a-maven-project\n├── pom.xml\n├── src\n│   ├── main\n│   │   ├── java\n│   │   └── resources\n│   └── test\n│       ├── java\n│       └── resources\n└── target\n")])])]),a("p",[t._v("项目的根目录"),a("code",[t._v("a-maven-project")]),t._v("是项目名，它有一个项目描述文件"),a("code",[t._v("pom.xml")]),t._v("，存放Java源码的目录是"),a("code",[t._v("src/main/java")]),t._v("，存放资源文件的目录是"),a("code",[t._v("src/main/resources")]),t._v("，存放测试源码的目录是"),a("code",[t._v("src/test/java")]),t._v("，存放测试资源的目录是"),a("code",[t._v("src/test/resources")]),t._v("，最后，所有编译、打包生成的文件都放在"),a("code",[t._v("target")]),t._v("目录里。这些就是一个Maven项目的标准目录结构。")]),t._v(" "),a("p",[t._v("其中最关键的一个项目描述文件"),a("code",[t._v("pom.xml")]),t._v("，它的内容长得像下面：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("project")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("modelVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("4.0.0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("modelVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("com.itranswarp.learnjava"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1.0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("packaging")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("jar"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("packaging")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        ...\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("commons-logging"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("commons-logging"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1.2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("project")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("其中，"),a("code",[t._v("groupId")]),t._v("类似于Java的包名，通常是公司或组织名称，"),a("code",[t._v("artifactId")]),t._v("类似于Java的类名，通常是项目名称，再加上"),a("code",[t._v("version")]),t._v("，一个Maven工程就是由"),a("code",[t._v("groupId")]),t._v("，"),a("code",[t._v("artifactId")]),t._v("和"),a("code",[t._v("version")]),t._v("作为唯一标识。我们在引用其他第三方库的时候，也是通过这3个变量确定。例如，依赖"),a("code",[t._v("commons-logging")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("commons-logging"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("commons-logging"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1.2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("使用"),a("code",[t._v("<dependency>")]),t._v("声明一个依赖后，Maven就会自动下载这个依赖包并把它放到classpath中。")]),t._v(" "),a("h3",{attrs:{id:"_2-依赖管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-依赖管理"}},[t._v("#")]),t._v(" 2. 依赖管理")]),t._v(" "),a("p",[t._v("Maven定义了几种依赖关系，分别是"),a("code",[t._v("compile")]),t._v("、"),a("code",[t._v("test")]),t._v("、"),a("code",[t._v("runtime")]),t._v("和"),a("code",[t._v("provided")]),t._v("：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("scope")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("示例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("compile")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("编译时需要用到该jar包（默认）")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("commons-logging")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("test")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("编译Test时需要用到该jar包")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("junit")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("runtime")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("编译时不需要，但运行时需要用到")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mysql")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("provided")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("编译时需要用到，但运行时由JDK或某个服务器提供")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("servlet-api")])])])]),t._v(" "),a("p",[t._v("其中，默认的"),a("code",[t._v("compile")]),t._v("是最常用的，Maven会把这种类型的依赖直接放入classpath。")]),t._v(" "),a("p",[t._v("一个问题是，Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（"),a("a",{attrs:{href:"https://repo1.maven.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("repo1.maven.org"),a("OutboundLink")],1),t._v("），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。")]),t._v(" "),a("p",[t._v("Maven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的"),a("code",[t._v(".m2")]),t._v("目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。")]),t._v(" "),a("h3",{attrs:{id:"_3-构建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-构建流程"}},[t._v("#")]),t._v(" 3. 构建流程")]),t._v(" "),a("p",[t._v("Maven的生命周期（lifecycle）由一系列阶段（phase）构成，以内置的生命周期"),a("code",[t._v("default")]),t._v("为例，它包含以下phase：")]),t._v(" "),a("ul",[a("li",[t._v("validate")]),t._v(" "),a("li",[t._v("initialize")]),t._v(" "),a("li",[t._v("generate-sources")]),t._v(" "),a("li",[t._v("process-sources")]),t._v(" "),a("li",[t._v("generate-resources")]),t._v(" "),a("li",[t._v("process-resources")]),t._v(" "),a("li",[t._v("compile")]),t._v(" "),a("li",[t._v("process-classes")]),t._v(" "),a("li",[t._v("generate-test-sources")]),t._v(" "),a("li",[t._v("process-test-sources")]),t._v(" "),a("li",[t._v("generate-test-resources")]),t._v(" "),a("li",[t._v("process-test-resources")]),t._v(" "),a("li",[t._v("test-compile")]),t._v(" "),a("li",[t._v("process-test-classes")]),t._v(" "),a("li",[t._v("test")]),t._v(" "),a("li",[t._v("prepare-package")]),t._v(" "),a("li",[t._v("package")]),t._v(" "),a("li",[t._v("pre-integration-test")]),t._v(" "),a("li",[t._v("integration-test")]),t._v(" "),a("li",[t._v("post-integration-test")]),t._v(" "),a("li",[t._v("verify")]),t._v(" "),a("li",[t._v("install")]),t._v(" "),a("li",[t._v("deploy")])]),t._v(" "),a("p",[t._v("如果我们运行"),a("code",[t._v("mvn package")]),t._v("，Maven就会执行"),a("code",[t._v("default")]),t._v("生命周期，它会从开始一直运行到"),a("code",[t._v("package")]),t._v("这个phase为止：")]),t._v(" "),a("ul",[a("li",[t._v("validate")]),t._v(" "),a("li",[t._v("...")]),t._v(" "),a("li",[t._v("package")])]),t._v(" "),a("p",[t._v("如果我们运行"),a("code",[t._v("mvn compile")]),t._v("，Maven也会执行"),a("code",[t._v("default")]),t._v("生命周期，但这次它只会运行到"),a("code",[t._v("compile")]),t._v("，即以下几个phase：")]),t._v(" "),a("ul",[a("li",[t._v("validate")]),t._v(" "),a("li",[t._v("...")]),t._v(" "),a("li",[t._v("compile")])]),t._v(" "),a("p",[t._v("Maven另一个常用的生命周期是"),a("code",[t._v("clean")]),t._v("，它会执行3个phase：")]),t._v(" "),a("ul",[a("li",[t._v("pre-clean")]),t._v(" "),a("li",[t._v("clean （注意这个clean不是lifecycle而是phase）")]),t._v(" "),a("li",[t._v("post-clean")])]),t._v(" "),a("p",[t._v("所以，我们使用"),a("code",[t._v("mvn")]),t._v("这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。")]),t._v(" "),a("p",[t._v("更复杂的例子是指定多个phase，例如，运行"),a("code",[t._v("mvn clean package")]),t._v("，Maven先执行"),a("code",[t._v("clean")]),t._v("生命周期并运行到"),a("code",[t._v("clean")]),t._v("这个phase，然后执行"),a("code",[t._v("default")]),t._v("生命周期并运行到"),a("code",[t._v("package")]),t._v("这个phase，实际执行的phase如下：")]),t._v(" "),a("ul",[a("li",[t._v("pre-clean")]),t._v(" "),a("li",[t._v("clean （注意这个clean是phase）")]),t._v(" "),a("li",[t._v("validate")]),t._v(" "),a("li",[t._v("...")]),t._v(" "),a("li",[t._v("package")])]),t._v(" "),a("p",[t._v("在实际开发过程中，经常使用的命令有：")]),t._v(" "),a("p",[a("code",[t._v("mvn clean")]),t._v("：清理所有生成的class和jar；")]),t._v(" "),a("p",[a("code",[t._v("mvn clean compile")]),t._v("：先清理，再执行到"),a("code",[t._v("compile")]),t._v("；")]),t._v(" "),a("p",[a("code",[t._v("mvn clean test")]),t._v("：先清理，再执行到"),a("code",[t._v("test")]),t._v("，因为执行"),a("code",[t._v("test")]),t._v("前必须执行"),a("code",[t._v("compile")]),t._v("，所以这里不必指定"),a("code",[t._v("compile")]),t._v("；")]),t._v(" "),a("p",[a("code",[t._v("mvn clean package")]),t._v("：先清理，再执行到"),a("code",[t._v("package")]),t._v("。")]),t._v(" "),a("p",[t._v("大多数phase在执行过程中，因为我们通常没有在"),a("code",[t._v("pom.xml")]),t._v("中配置相关的设置，所以这些phase什么事情都不做。")]),t._v(" "),a("p",[t._v("经常用到的phase其实只有几个：")]),t._v(" "),a("ul",[a("li",[t._v("clean：清理")]),t._v(" "),a("li",[t._v("compile：编译")]),t._v(" "),a("li",[t._v("test：运行测试")]),t._v(" "),a("li",[t._v("package：打包")])]),t._v(" "),a("h4",{attrs:{id:"_3-1-goal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-goal"}},[t._v("#")]),t._v(" 3.1. Goal")]),t._v(" "),a("p",[t._v("执行一个phase又会触发一个或多个goal：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("执行的Phase")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("对应执行的Goal")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("compile")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("compiler:compile")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("test")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("compiler:testCompile surefire:test")])])])]),t._v(" "),a("p",[t._v("goal的命名总是"),a("code",[t._v("abc:xyz")]),t._v("这种形式。")]),t._v(" "),a("p",[t._v("类比一下：")]),t._v(" "),a("ul",[a("li",[t._v("lifecycle相当于Java的package，它包含一个或多个phase；")]),t._v(" "),a("li",[t._v("phase相当于Java的class，它包含一个或多个goal；")]),t._v(" "),a("li",[t._v("goal相当于class的method，它其实才是真正干活的。")])]),t._v(" "),a("p",[t._v("大多数情况，我们只要指定phase，就默认执行这些phase默认绑定的goal，只有少数情况，我们可以直接指定运行一个goal，例如，启动Tomcat服务器：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mvn tomcat:run\n")])])]),a("h3",{attrs:{id:"_4-使用插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用插件"}},[t._v("#")]),t._v(" 4. 使用插件")]),t._v(" "),a("p",[t._v("以"),a("code",[t._v("compile")]),t._v("这个phase为例，如果执行：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("mvn compile\n")])])]),a("p",[t._v("Maven将执行"),a("code",[t._v("compile")]),t._v("这个phase，这个phase会调用"),a("code",[t._v("compiler")]),t._v("插件执行关联的"),a("code",[t._v("compiler:compile")]),t._v("这个goal。")]),t._v(" "),a("p",[t._v("实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行"),a("code",[t._v("compile")]),t._v("，它只是负责找到对应的"),a("code",[t._v("compiler")]),t._v("插件，然后执行默认的"),a("code",[t._v("compiler:compile")]),t._v("这个goal来完成编译。")]),t._v(" "),a("p",[t._v("所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。")]),t._v(" "),a("p",[t._v("Maven已经内置了一些常用的标准插件：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("插件名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("对应执行的phase")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("clean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("clean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("compiler")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("compile")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("surefire")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("test")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("jar")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("package")])])])]),t._v(" "),a("p",[t._v("如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要在pom.xml中声明。")]),t._v(" "),a("p",[t._v("下面列举了一些常用的插件：")]),t._v(" "),a("ul",[a("li",[t._v("maven-shade-plugin：打包所有依赖包并生成可执行jar；")]),t._v(" "),a("li",[t._v("cobertura-maven-plugin：生成单元测试覆盖率报告；")]),t._v(" "),a("li",[t._v("findbugs-maven-plugin：对Java源码进行静态分析以找出潜在问题。")])]),t._v(" "),a("h3",{attrs:{id:"_5-模块管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-模块管理"}},[t._v("#")]),t._v(" 5. 模块管理")]),t._v(" "),a("p",[t._v("对于Maven工程来说，原来是一个大项目：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("single-project\n├── pom.xml\n└── src\n")])])]),a("p",[t._v("现在可以分拆成3个模块：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mutiple-project\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n")])])]),a("p",[t._v("把公共部分提取出来，现在我们的整个工程结构如下：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("multiple-project\n├── pom.xml\n├── parent\n│   └── pom.xml\n├── module-a\n│   ├── pom.xml\n│   └── src\n├── module-b\n│   ├── pom.xml\n│   └── src\n└── module-c\n    ├── pom.xml\n    └── src\n")])])]),a("p",[t._v("在编译的时候，需要在根目录创建一个"),a("code",[t._v("pom.xml")]),t._v("统一编译：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.itranswarp.learnjava</groupId>\n    <artifactId>build</artifactId>\n    <version>1.0</version>\n    <packaging>pom</packaging>\n    <name>build</name>\n\n    <modules>\n        <module>parent</module>\n        <module>module-a</module>\n        <module>module-b</module>\n        <module>module-c</module>\n    </modules>\n</project>\n')])])]),a("h5",{attrs:{id:"_5-0-1-中央仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-1-中央仓库"}},[t._v("#")]),t._v(" 5.0.1. 中央仓库")]),t._v(" "),a("p",[t._v("其实我们使用的大多数第三方模块都是这个用法，例如，我们使用commons logging、log4j这些第三方模块，就是第三方模块的开发者自己把编译好的jar包发布到Maven的中央仓库中。")]),t._v(" "),a("h5",{attrs:{id:"_5-0-2-私有仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-2-私有仓库"}},[t._v("#")]),t._v(" 5.0.2. 私有仓库")]),t._v(" "),a("p",[t._v("私有仓库是指公司内部如果不希望把源码和jar包放到公网上，那么可以搭建私有仓库。私有仓库总是在公司内部使用，它只需要在本地的"),a("code",[t._v("~/.m2/settings.xml")]),t._v("中配置好，使用方式和中央仓位没有任何区别。")]),t._v(" "),a("h5",{attrs:{id:"_5-0-3-本地仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-0-3-本地仓库"}},[t._v("#")]),t._v(" 5.0.3. 本地仓库")]),t._v(" "),a("p",[t._v("本地仓库是指把本地开发的项目“发布”在本地，这样其他项目可以通过本地仓库引用它。但是我们不推荐把自己的模块安装到Maven的本地仓库，因为每次修改某个模块的源码，都需要重新安装，非常容易出现版本不一致的情况。更好的方法是使用模块化编译，在编译的时候，告诉Maven几个模块之间存在依赖关系，需要一块编译，Maven就会自动按依赖顺序编译这些模块。")]),t._v(" "),a("h4",{attrs:{id:"_5-1-使用mvnw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-使用mvnw"}},[t._v("#")]),t._v(" 5.1. 使用mvnw")]),t._v(" "),a("p",[a("code",[t._v("mvnw")]),t._v("是Maven Wrapper的缩写。因为我们安装Maven时，默认情况下，系统所有项目都会使用全局安装的这个Maven版本。但是，对于某些项目来说，它可能必须使用某个特定的Maven版本，这个时候，就可以使用Maven Wrapper，它可以负责给这个特定的项目安装指定版本的Maven，而其他项目不受影响。")]),t._v(" "),a("p",[t._v("简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。")]),t._v(" "),a("h3",{attrs:{id:"_6-安装maven-wrapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-安装maven-wrapper"}},[t._v("#")]),t._v(" 6. 安装Maven Wrapper")]),t._v(" "),a("p",[t._v("安装Maven Wrapper最简单的方式是在项目的根目录（即"),a("code",[t._v("pom.xml")]),t._v("所在的目录）下运行安装命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mvn -N io.takari:maven:0.7.6:wrapper\n")])])]),a("p",[t._v("它会自动使用最新版本的Maven。注意"),a("code",[t._v("0.7.6")]),t._v("是Maven Wrapper的版本。最新的Maven Wrapper版本可以去"),a("a",{attrs:{href:"https://github.com/takari/maven-wrapper",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方网站"),a("OutboundLink")],1),t._v("查看。")]),t._v(" "),a("p",[t._v("如果要指定使用的Maven版本，使用下面的安装命令指定版本，例如"),a("code",[t._v("3.3.3")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mvn -N io.takari:maven:0.7.6:wrapper -Dmaven=3.3.3\n")])])]),a("p",[t._v("安装后，查看项目结构：")]),t._v(" "),a("div",{staticClass:"language-ascii extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("my-project\n├── .mvn\n│   └── wrapper\n│       ├── MavenWrapperDownloader.java\n│       ├── maven-wrapper.jar\n│       └── maven-wrapper.properties\n├── mvnw\n├── mvnw.cmd\n├── pom.xml\n└── src\n    ├── main\n    │   ├── java\n    │   └── resources\n    └── test\n        ├── java\n        └── resources\n")])])]),a("p",[t._v("发现多了"),a("code",[t._v("mvnw")]),t._v("、"),a("code",[t._v("mvnw.cmd")]),t._v("和"),a("code",[t._v(".mvn")]),t._v("目录，我们只需要把"),a("code",[t._v("mvn")]),t._v("命令改成"),a("code",[t._v("mvnw")]),t._v("就可以使用跟项目关联的Maven。例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mvnw clean package\n")])])]),a("p",[t._v("在Linux或macOS下运行时需要加上"),a("code",[t._v("./")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("./mvnw clean package\n")])])]),a("p",[t._v("Maven Wrapper的另一个作用是把项目的"),a("code",[t._v("mvnw")]),t._v("、"),a("code",[t._v("mvnw.cmd")]),t._v("和"),a("code",[t._v(".mvn")]),t._v("提交到版本库中，可以使所有开发人员使用统一的Maven版本。")])])}),[],!1,null,null,null);a.default=n.exports}}]);