(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{337:function(_,v,a){"use strict";a.r(v);var e=a(14),r=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("ul",[v("li",[v("a",{attrs:{href:"#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA"}},[_._v("1. 数据库理论")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#11-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%8F%8A%E5%85%B6%E5%8C%BA%E5%88%AB"}},[_._v("1.1. 关系型数据库和非关系型数据及其区别？")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#111-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B8%E5%9E%8B%E4%BA%8C%E7%BB%B4%E8%A1%A8%E7%BB%93%E6%9E%84"}},[_._v("1.1.1. 关系型数据库，典型，二维表结构")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#112-%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AF%E4%BB%A5%E6%98%AF%E6%96%87%E6%A1%A3%E6%88%96%E8%80%85%E9%94%AE%E5%80%BC%E5%AF%B9"}},[_._v("1.1.2. 非关系型数据库，可以是文档或者键值对")])])])]),_._v(" "),v("li",[v("a",{attrs:{href:"#12-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E7%90%86%E7%89%B9%E6%80%A7%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6"}},[_._v("1.2. 事务的原理，特性，事务并发控制")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#13-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1transaction"}},[_._v("1.3. 什么是事务(Transaction)？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#14-%E4%BA%8B%E5%8A%A1%E7%9A%84acid%E7%89%B9%E6%80%A7"}},[_._v("1.4. 事务的ACID特性")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#15-%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%AF%B9%E4%BA%8B%E5%8A%A1%E8%BF%9B%E8%A1%8C%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%AF%E8%83%BD%E4%BA%A7%E7%94%9F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98"}},[_._v("1.5. 如果不对事务进行并发控制可能产生哪些问题？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#16-%E5%9B%9B%E7%A7%8D%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB"}},[_._v("1.6. 四种事务隔离级别")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#17-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E6%8F%92%E5%85%A5%E9%87%8D%E5%A4%8D"}},[_._v("1.7. 如何解决高并发场景下的插入重复？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#18-%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81"}},[_._v("1.8. 乐观锁和悲观锁")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#19-mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"}},[_._v("1.9. MySQL数据类型")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#191-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%87%E6%9C%AC"}},[_._v("1.9.1. 字符串（文本）：")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#1911-varcharn-%E6%88%96-varchar2n-%E4%B8%AD%E7%9A%84-n-%E6%98%AF%E5%AD%97%E7%AC%A6%E8%BF%98%E6%98%AF%E5%AD%97%E8%8A%82"}},[_._v("1.9.1.1. "),v("code",[_._v("varchar(N)")]),_._v(" 或 "),v("code",[_._v("varchar2(N)")]),_._v(" 中的 N 是字符还是字节？")])])])]),_._v(" "),v("li",[v("a",{attrs:{href:"#192-charvarchar-%E4%B8%8E-text"}},[_._v("1.9.2. char、varchar 与 text")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#193-%E6%95%B0%E5%80%BC"}},[_._v("1.9.3. 数值")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#194-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4"}},[_._v("1.9.4. 日期和时间：")])])])]),_._v(" "),v("li",[v("a",{attrs:{href:"#110-innodb-%E5%92%8C-myisam%E7%9A%84%E5%8C%BA%E5%88%AB"}},[_._v("1.10. InnoDB 和 MyISAM的区别")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#111-%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96"}},[_._v("1.11. 索引原理及优化")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#112-%E6%9F%A5%E6%89%BE%E7%BB%93%E6%9E%84%E8%BF%9B%E5%8C%96%E5%8F%B2"}},[_._v("1.12. 查找结构进化史：")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#113-%E4%BB%80%E4%B9%88%E6%98%AFb-tree"}},[_._v("1.13. 什么是B-Tree？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#114-btree"}},[_._v("1.14. B+Tree")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#115-mysql%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B"}},[_._v("1.15. mysql索引类型")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#116-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95"}},[_._v("1.16. 什么时候创建索引？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#117-%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84"}},[_._v("1.17. 创建索引有哪些需要注意的？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#118-%E7%B4%A2%E5%BC%95%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%A4%B1%E6%95%88"}},[_._v("1.18. 索引什么时候失效？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#119-%E4%BB%80%E4%B9%88%E6%98%AF%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95"}},[_._v("1.19. 什么是聚集索引和非聚集索引？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#120-%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E6%85%A2%E6%9F%A5%E8%AF%A2"}},[_._v("1.20. 如何排查慢查询？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#121-mysql%E8%AF%AD%E5%8F%A5%E7%BC%96%E5%86%99"}},[_._v("1.21. Mysql语句编写")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#122-%E7%BC%93%E5%AD%98%E5%8F%8Aredis"}},[_._v("1.22. 缓存及Redis")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#123-redis-%E5%92%8C-memcached-%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB"}},[_._v("1.23. Redis 和 Memcached 主要区别？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#124-redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"}},[_._v("1.24. Redis常用数据类型和使用场景？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#125-redis%E5%AE%9E%E7%8E%B0%E7%9A%84%E8%B7%B3%E8%B7%83%E8%A1%A8%E6%98%AF%E4%BB%80%E4%B9%88%E7%BB%93%E6%9E%84"}},[_._v("1.25. Redis实现的跳跃表是什么结构？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#126-redis%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E4%B8%A4%E7%A7%8D"}},[_._v("1.26. Redis有哪些持久化方式？两种")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#127-redis-%E4%BA%8B%E5%8A%A1%E5%92%8C-mysql-%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB"}},[_._v("1.27. Redis 事务和 Mysql 事务的区别？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#128-redis%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81"}},[_._v("1.28. Redis如何实现分布式锁？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#129-%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98%E7%9A%84%E6%A8%A1%E5%BC%8F"}},[_._v("1.29. 使用缓存的模式？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#130-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98"}},[_._v("1.30. 如何解决缓存穿透问题？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#131-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E9%97%AE%E9%A2%98%E5%BE%AE%E5%8D%9A%E7%83%AD%E7%82%B9"}},[_._v("1.31. 如何解决缓存击穿问题？（微博热点）")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#132-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E9%97%AE%E9%A2%98"}},[_._v("1.32. 如何解决缓存雪崩问题？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#133-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1"}},[_._v("1.33. 数据库设计")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#134-mysql%E6%9F%A5%E7%9C%8B%E6%94%AF%E6%8C%81%E7%9A%84%E5%BC%95%E6%93%8E"}},[_._v("1.34. Mysql查看支持的引擎")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#135-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9"}},[_._v("1.35. 什么是存储过程？有哪些优缺点？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#136-%E4%BB%80%E4%B9%88%E6%98%AF%E8%A7%86%E5%9B%BE%E4%BB%A5%E5%8F%8A%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B"}},[_._v("1.36. 什么是视图？以及视图的使用场景有哪些？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#137-%E8%AF%B4%E4%B8%80%E8%AF%B4%E4%B8%89%E4%B8%AA%E8%8C%83%E5%BC%8F"}},[_._v("1.37. 说一说三个范式")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#138-oracle%E5%92%8Cmysql%E7%9A%84%E5%8C%BA%E5%88%AB"}},[_._v("1.38. Oracle和MySQL的区别")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AForm"}},[_._v("什么是ORM？")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#orm%E5%A5%BD%E5%A4%84"}},[_._v("ORM好处")])]),_._v(" "),v("li",[v("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9peewee"}},[_._v("为什么选择"),v("code",[_._v("peewee")]),_._v("？")])])])])]),_._v(" "),v("h2",{attrs:{id:"_1-数据库理论"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库理论"}},[_._v("#")]),_._v(" 1. 数据库理论")]),_._v(" "),v("h3",{attrs:{id:"_1-1-关系型数据库和非关系型数据及其区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-关系型数据库和非关系型数据及其区别"}},[_._v("#")]),_._v(" 1.1. 关系型数据库和非关系型数据及其区别？")]),_._v(" "),v("h4",{attrs:{id:"_1-1-1-关系型数据库-典型-二维表结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-关系型数据库-典型-二维表结构"}},[_._v("#")]),_._v(" 1.1.1. 关系型数据库，典型，二维表结构")]),_._v(" "),v("p",[_._v("优点：")]),_._v(" "),v("ol",[v("li",[_._v("易于维护：丰富的完整性（实体、参照、用户定义完整性）降低了数据冗余和数据不一致的概率，都是使用表结构，格式一致")]),_._v(" "),v("li",[_._v("使用方便：sql语言通用，可用于复杂查询")]),_._v(" "),v("li",[_._v("复杂操作：支持sql")])]),_._v(" "),v("p",[_._v("缺点：")]),_._v(" "),v("ol",[v("li",[_._v("读写性能比较差，尤其是海量数据的高效率读写")]),_._v(" "),v("li",[_._v("固定的表结构，灵活度稍欠")]),_._v(" "),v("li",[_._v("高并发读写需求，硬盘IO是很大的瓶颈")])]),_._v(" "),v("h4",{attrs:{id:"_1-1-2-非关系型数据库-可以是文档或者键值对"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-非关系型数据库-可以是文档或者键值对"}},[_._v("#")]),_._v(" 1.1.2. 非关系型数据库，可以是文档或者键值对")]),_._v(" "),v("p",[_._v("优点：")]),_._v(" "),v("ol",[v("li",[_._v("格式灵活：存储的数据格式可以是key,value形式、文档形式、图片形式等，使用灵活，应用场景广泛，而关系型数据库只支持基础类型")]),_._v(" "),v("li",[_._v("速度快，nosql可以磁盘或者随机存储器作为载体，而关系型数据库只能使用硬盘")]),_._v(" "),v("li",[_._v("高扩展性")]),_._v(" "),v("li",[_._v("成本低，部署简单")])]),_._v(" "),v("p",[_._v("缺点：")]),_._v(" "),v("ol",[v("li",[_._v("不提供sql支持")]),_._v(" "),v("li",[_._v("无事务处理")]),_._v(" "),v("li",[_._v("数据结构相对复杂，复杂查询稍欠")])]),_._v(" "),v("h3",{attrs:{id:"_1-2-事务的原理-特性-事务并发控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-事务的原理-特性-事务并发控制"}},[_._v("#")]),_._v(" 1.2. 事务的原理，特性，事务并发控制")]),_._v(" "),v("p",[_._v("常用的字段、含义和区别\n常用引擎区别")]),_._v(" "),v("h3",{attrs:{id:"_1-3-什么是事务-transaction"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-什么是事务-transaction"}},[_._v("#")]),_._v(" 1.3. 什么是事务(Transaction)？")]),_._v(" "),v("ul",[v("li",[_._v("事务是数据库并发控制的基本单位")]),_._v(" "),v("li",[_._v("事务可以看做是一系列SQL语句的集合")]),_._v(" "),v("li",[_._v("事务必须要么全部执行成功，要么全部执行失败（回滚）")]),_._v(" "),v("li",[_._v("转账操作是事务使用的一个常见场景\n"),v("ul",[v("li",[_._v("转账分两步：A减去50元，B加上50元，只执行了一个就必须回滚")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-4-事务的acid特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-事务的acid特性"}},[_._v("#")]),_._v(" 1.4. 事务的ACID特性")]),_._v(" "),v("ol",[v("li",[_._v("原子性("),v("code",[_._v("Atomicity")]),_._v(")：一个事务中所有操作全部完成或失败 [ˌætəˈmɪsɪti]")]),_._v(" "),v("li",[_._v("一致性("),v("code",[_._v("Consistency")]),_._v(")：事务开始和结束之后数据完整性没有被破坏")]),_._v(" "),v("li",[_._v("隔离性("),v("code",[_._v("Isolatiion")]),_._v(")：允许多个事务同时对数据库修改和读写（保证性能）")]),_._v(" "),v("li",[_._v("持久性("),v("code",[_._v("Durability")]),_._v(")：事务结束之后，修改是永久的不会丢失（持久化到磁盘，内存是一时的，断电就消失）")])]),_._v(" "),v("p",[_._v("目前主要有两种方式实现ACID：第一种是"),v("code",[_._v("Write ahead logging")]),_._v("，也就是日志式的方式(现代数据库均基于这种方式)。第二种是"),v("code",[_._v("Shadow paging")]),_._v("。")]),_._v(" "),v("h3",{attrs:{id:"_1-5-如果不对事务进行并发控制可能产生哪些问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-如果不对事务进行并发控制可能产生哪些问题"}},[_._v("#")]),_._v(" 1.5. 如果不对事务进行并发控制可能产生哪些问题？")]),_._v(" "),v("ul",[v("li",[_._v("幻读（"),v("code",[_._v("phantom read")]),_._v("）：一个事务第二次查出第一次没有的结果（别的事务已经插入了一些数据）")]),_._v(" "),v("li",[_._v("非重复读（"),v("code",[_._v("nonrepeatable read")]),_._v("）：一个事务重复读两次得到两次不同的结果（读取操作的结果是不可重复的）")]),_._v(" "),v("li",[_._v("脏读（"),v("code",[_._v("dirty read")]),_._v("）：一个事务读取到另一个事务没有提交的修改")]),_._v(" "),v("li",[_._v("丢失修改：并发写入造成其中一些修改丢失")])]),_._v(" "),v("h3",{attrs:{id:"_1-6-四种事务隔离级别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-四种事务隔离级别"}},[_._v("#")]),_._v(" 1.6. 四种事务隔离级别")]),_._v(" "),v("ol",[v("li",[_._v("读未提交（read uncommitted）：别的事务可以读取到未提交改变")]),_._v(" "),v("li",[_._v("读已提交（read committed）：只能读取已经提交的数据")]),_._v(" "),v("li",[_._v("可重复读（repeatable read）：同一个事务先后查询结果一样(InnoDB默认可重复读)")]),_._v(" "),v("li",[_._v("串行化（Serializable）：事务完全串行化的执行，隔离级别最高，执行效率最低")])]),_._v(" "),v("h3",{attrs:{id:"_1-7-如何解决高并发场景下的插入重复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-如何解决高并发场景下的插入重复"}},[_._v("#")]),_._v(" 1.7. 如何解决高并发场景下的插入重复？")]),_._v(" "),v("p",[_._v("高并发场景下，写入数据库会有数据重复问题")]),_._v(" "),v("ol",[v("li",[_._v("使用数据库唯一索引（分库分表时无法使用）")]),_._v(" "),v("li",[_._v("使用队列异步写入")]),_._v(" "),v("li",[_._v("使用redis实现分布式锁（事务持有锁，插入完成后释放锁）")])]),_._v(" "),v("h3",{attrs:{id:"_1-8-乐观锁和悲观锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-乐观锁和悲观锁"}},[_._v("#")]),_._v(" 1.8. 乐观锁和悲观锁")]),_._v(" "),v("ul",[v("li",[_._v("悲观锁是先获取锁在进行操作。一锁二查三更新，"),v("code",[_._v("select for update")])]),_._v(" "),v("li",[_._v("乐观锁先修改，更新的时候发现数据已经变了就回滚（"),v("code",[_._v("check and set")]),_._v("）（假设我改的时候别人不会改）")]),_._v(" "),v("li",[_._v("乐观锁通过版本号或者时间戳实现")]),_._v(" "),v("li")]),_._v(" "),v("p",[_._v("根据响应速度、冲突频率、重试代价来判断使用哪一种锁")]),_._v(" "),v("h3",{attrs:{id:"_1-9-mysql数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-mysql数据类型"}},[_._v("#")]),_._v(" 1.9. MySQL数据类型")]),_._v(" "),v("p",[_._v("三种类型：字符串、数值、日期")]),_._v(" "),v("h4",{attrs:{id:"_1-9-1-字符串-文本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-1-字符串-文本"}},[_._v("#")]),_._v(" 1.9.1. 字符串（文本）：")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_type_string.png",alt:"字符串"}})]),_._v(" "),v("ul",[v("li",[v("code",[_._v("varchar")]),_._v("会额外拿出1个字节或2个字节存储字符串的长度。列长度小于255字节，使用1个字节表示，否则用2个")]),_._v(" "),v("li",[v("code",[_._v("varchar")]),_._v("长度，如果存储内容超出指定长度，会被截断")]),_._v(" "),v("li",[v("code",[_._v("char")]),_._v("适合存储密码，md5都变成32位了")]),_._v(" "),v("li",[v("code",[_._v("varchar")]),_._v("只会把大的变小，不会把小的变大。这是和"),v("code",[_._v("char")]),_._v("的区别。")])]),_._v(" "),v("p",[_._v("MySQL 5.0 以上的版本：")]),_._v(" "),v("ol",[v("li",[_._v("一个汉字占多少长度与编码有关：\n"),v("ol",[v("li",[_._v("UTF－8：一个汉字＝3个字节")]),_._v(" "),v("li",[_._v("GBK：一个汉字＝2个字节")])])]),_._v(" "),v("li",[v("code",[_._v("varchar(n)")]),_._v(" 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别")]),_._v(" "),v("li",[_._v("MySQL 检查长度，可用 SQL 语言来查看：")])]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("select LENGTH(fieldname) from tablename\n")])])]),v("h5",{attrs:{id:"_1-9-1-1-varchar-n-或-varchar2-n-中的-n-是字符还是字节"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-1-1-varchar-n-或-varchar2-n-中的-n-是字符还是字节"}},[_._v("#")]),_._v(" 1.9.1.1. "),v("code",[_._v("varchar(N)")]),_._v(" 或 "),v("code",[_._v("varchar2(N)")]),_._v(" 中的 N 是字符还是字节？")]),_._v(" "),v("ul",[v("li",[_._v("MySQL 5.7 版本 varchar(N)字段类型中的 N 是字符数，其中一个汉字或是一个字母表示一个字符。")]),_._v(" "),v("li",[_._v("Oracle 11g 版本 varchar2(N)和varchar2(N byte)字段类型中的 N 是字节数，其中一个汉字占 2 个字节，一个字母占 1 一个字节。varchar2(N char)字段类型中的 N 是字符数，其中一个汉字占 1 个字符，一个字母占 1 一个字符。")]),_._v(" "),v("li",[_._v("所以针对不同的关系型数据库管理系统，字段类型varchar(N) 中的N表示的含义是不同的，以实际情况而定。所以不要轻易下结论，实践是检验真理的唯一标准。")])]),_._v(" "),v("h4",{attrs:{id:"_1-9-2-char、varchar-与-text"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-2-char、varchar-与-text"}},[_._v("#")]),_._v(" 1.9.2. char、varchar 与 text")]),_._v(" "),v("p",[_._v("关于 char、varchar 与 text 平时没有太在意，一般来说，可能现在大家都是用 varchar。但是当要存储的内容比较大时，究竟是选择 varchar 还是 text 呢？")]),_._v(" "),v("p",[_._v("这三种类型比较：")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("char")]),_._v(":  char 不用多说了，它是定长格式的，但是长度范围是 0~255. 当你想要储存一个长度不足 255 的字符时，Mysql 会用空格来填充剩下的字符。因此在读取数据时，char 类型的数据要进行处理，把后面的空格去除。")]),_._v(" "),v("li",[v("code",[_._v("varchar")]),_._v(": 在 5.0.3 以下的版本中的最大长度限制为 255，而在 5.0.3 及以上的版本中，varchar 数据类型的长度支持到了 65535，也就是说可以存放 65532 个字节（注意是字节而不是字符！！！）的数据（起始位和结束位占去了3个字节），也就是说，在 5.0.3 以下版本中需要使用固定的 TEXT 或 BLOB 格式存放的数据可以在高版本中使用可变长的 varchar 来存放，这样就能有效的减少数据库文件的大小。")]),_._v(" "),v("li",[v("code",[_._v("text")]),_._v(": 与 char 和 varchar 不同的是，text 不可以有默认值，其最大长度是 2 的 16 次方-1")])]),_._v(" "),v("p",[_._v("按照查询速度： char最快， varchar次之，text最慢。")]),_._v(" "),v("p",[_._v("总结起来，有几点：")]),_._v(" "),v("ol",[v("li",[_._v("经常变化的字段用 varchar")]),_._v(" "),v("li",[_._v("知道固定长度的用 char")]),_._v(" "),v("li",[_._v("尽量用 varchar")]),_._v(" "),v("li",[_._v("超过 255 字符的只能用 varchar 或者 text")]),_._v(" "),v("li",[_._v("能用 varchar 的地方不用 text")])]),_._v(" "),v("h4",{attrs:{id:"_1-9-3-数值"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-3-数值"}},[_._v("#")]),_._v(" 1.9.3. 数值")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_type_number.png",alt:"字符串"}})]),_._v(" "),v("ol",[v("li",[_._v("括号里的Length指的是数据库里面的可见长度")]),_._v(" "),v("li",[_._v("Int(10)不是10个字节，它始终是4个字节，而是显示的时候，在数据库中最小显示10个字符宽")])]),_._v(" "),v("p",[_._v("MySQL会自动填充0，zerofill")]),_._v(" "),v("ul",[v("li",[_._v("Int(3)  1234  =>1234")]),_._v(" "),v("li",[_._v("int(5) 12 => 00012")])]),_._v(" "),v("p",[_._v("难道我们建了int(3)，就不能存放数据1234了？")]),_._v(" "),v("ul",[v("li",[_._v("并不是，还可以插入更多位的数字。3只是代表显示宽度。")])]),_._v(" "),v("p",[v("code",[_._v("decimal")]),_._v("可以理解成当做字符串进行处理，"),v("code",[_._v("float")]),_._v("和"),v("code",[_._v("double")]),_._v("效率更高")]),_._v(" "),v("p",[_._v("在mysql的数据类型中浮点型分为两种，"),v("code",[_._v("float()")]),_._v("与"),v("code",[_._v("double()")]),_._v("类型，定点型为"),v("code",[_._v("decimal()")]),_._v("。")]),_._v(" "),v("p",[_._v("数据类型(M,D)")]),_._v(" "),v("ul",[v("li",[_._v("M：精度，数据的总长度；")]),_._v(" "),v("li",[_._v("D：标度，小数点后的长度；\n其区别在于：")]),_._v(" "),v("li",[_._v("当不指定精度时，"),v("code",[_._v("Float")]),_._v("、"),v("code",[_._v("Double")]),_._v("默认会保存实际精度，而"),v("code",[_._v("Decimal")]),_._v("默认是整数；")]),_._v(" "),v("li",[_._v("当标度不够时，都会四舍五入，但Decimal会警告信息。")])]),_._v(" "),v("h4",{attrs:{id:"_1-9-4-日期和时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-4-日期和时间"}},[_._v("#")]),_._v(" 1.9.4. 日期和时间：")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_type_datetime.png",alt:"字符串"}})]),_._v(" "),v("h3",{attrs:{id:"_1-10-innodb-和-myisam的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-innodb-和-myisam的区别"}},[_._v("#")]),_._v(" 1.10. InnoDB 和 MyISAM的区别")]),_._v(" "),v("ol",[v("li",[_._v("MyISAM不支持事务，InnoDB支持事务")]),_._v(" "),v("li",[_._v("MyISAM不支持外键，InnoDB支持外键")]),_._v(" "),v("li",[_._v("MyISAM只支持表锁，InnoDB支持行锁和表锁")]),_._v(" "),v("li",[_._v("InnoDB不支持全文索引，MyISAM支持全文索引")])]),_._v(" "),v("h3",{attrs:{id:"_1-11-索引原理及优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-索引原理及优化"}},[_._v("#")]),_._v(" 1.11. 索引原理及优化")]),_._v(" "),v("p",[_._v("什么是索引？")]),_._v(" "),v("ul",[v("li",[_._v("索引是数据表中一个或者多个列进行排序的数据结构")]),_._v(" "),v("li",[_._v("索引能够大幅提升检索速度")]),_._v(" "),v("li",[_._v("创建、更新索引本身也会耗费时间和空间")])]),_._v(" "),v("h3",{attrs:{id:"_1-12-查找结构进化史"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-查找结构进化史"}},[_._v("#")]),_._v(" 1.12. 查找结构进化史：")]),_._v(" "),v("ol",[v("li",[_._v("线性查找：一个个找；实现简单；太慢")]),_._v(" "),v("li",[_._v("二分查找：有序；简单；要求是有序的，插入特别慢")]),_._v(" "),v("li",[_._v("HASH：查询快；占用空间，不太适合存储大规模数据")]),_._v(" "),v("li",[_._v("二叉查找树：插入和查询很快(log(n))；无法存储大规模数据，复杂度退化（单边增长，变成线性复杂度）")]),_._v(" "),v("li",[_._v("平衡树：解决bst退化的问题，树是平衡的；依然无法解决节点太多、树高度非常深的问题")]),_._v(" "),v("li",[_._v("多路查找树：一个父亲多个孩子节点（度）；节点过多时，树不会特别深")]),_._v(" "),v("li",[_._v("多路平衡查找树：B-Tree")])]),_._v(" "),v("h3",{attrs:{id:"_1-13-什么是b-tree"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-什么是b-tree"}},[_._v("#")]),_._v(" 1.13. 什么是B-Tree？")]),_._v(" "),v("ul",[v("li",[_._v("多路平衡查找树（每个节点最多 m 个孩子("),v("code",[_._v("m>=2")]),_._v(")，称为 m 阶或者度）")]),_._v(" "),v("li",[_._v("叶节点具有相同的深度")]),_._v(" "),v("li",[_._v("节点中的数据 key 从左到右是递增的")])]),_._v(" "),v("p",[_._v("B-Tree无法实现范围查找")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_b_tree.png",alt:"B-Tree"}})]),_._v(" "),v("h3",{attrs:{id:"_1-14-b-tree"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-b-tree"}},[_._v("#")]),_._v(" 1.14. B+Tree")]),_._v(" "),v("ul",[v("li",[_._v("B+树是 B-Tree 的变形")]),_._v(" "),v("li",[_._v("Mysql实际使用的 B+Tree 作为索引的数据结构")]),_._v(" "),v("li",[_._v("只在叶子节点带有指向记录的指针（为什么？可以增加树的度）")]),_._v(" "),v("li",[_._v("叶子结点通过指针相连（为什么？实现范围查询）")])]),_._v(" "),v("p",[_._v("B+Tree示例：")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_b_plus_tree.png",alt:"B-Tree"}})]),_._v(" "),v("p",[_._v("阶不是越大越好，和磁盘块大小有关，让操作系统更友好的加载和缓存数据")]),_._v(" "),v("h3",{attrs:{id:"_1-15-mysql索引类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-mysql索引类型"}},[_._v("#")]),_._v(" 1.15. mysql索引类型")]),_._v(" "),v("ol",[v("li",[_._v("普通索引（"),v("code",[_._v("create index")]),_._v("）")]),_._v(" "),v("li",[_._v("唯一索引，索引列的值必须唯一（"),v("code",[_._v("create unique index")]),_._v("）")]),_._v(" "),v("li",[_._v("多列索引（B+树key的值由多个列组成）")]),_._v(" "),v("li",[_._v("主键索引（"),v("code",[_._v("primary key")]),_._v("），一个表只能有一个，主键索引一定是唯一索引")]),_._v(" "),v("li",[_._v("全文索引（"),v("code",[_._v("fulltest index")]),_._v("），InnoDB不支持")])]),_._v(" "),v("h3",{attrs:{id:"_1-16-什么时候创建索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-什么时候创建索引"}},[_._v("#")]),_._v(" 1.16. 什么时候创建索引？")]),_._v(" "),v("p",[_._v("建表的时候需要根据查询需求来创建索引")]),_._v(" "),v("ol",[v("li",[_._v("经常用作查询条件的字段（where条件）")]),_._v(" "),v("li",[_._v("经常用作表连接的字段")]),_._v(" "),v("li",[_._v("经常出现在order by，group by之后的字段")])]),_._v(" "),v("h3",{attrs:{id:"_1-17-创建索引有哪些需要注意的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-创建索引有哪些需要注意的"}},[_._v("#")]),_._v(" 1.17. 创建索引有哪些需要注意的？")]),_._v(" "),v("p",[_._v("最佳实践")]),_._v(" "),v("ol",[v("li",[_._v("非空字段not null，mysql很难对空值作查询优化（B+树中，空值无法作比较）（很多公司建表规范要求索引字段有默认值）")]),_._v(" "),v("li",[_._v("区分度高，离散度大，作为索引的字段值尽量不要有大量的相同值（B+树key相同）")]),_._v(" "),v("li",[_._v("索引的长度不要太长（比较耗费时间）（索引在B+树中作为key值存在，int值很容易比较，字符串很难比较）")])]),_._v(" "),v("h3",{attrs:{id:"_1-18-索引什么时候失效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-索引什么时候失效"}},[_._v("#")]),_._v(" 1.18. 索引什么时候失效？")]),_._v(" "),v("p",[_._v("记忆口诀：模糊匹配、类型隐转、最左匹配")]),_._v(" "),v("ol",[v("li",[_._v("以"),v("code",[_._v("%")]),_._v("开头的 LIKE 语句，模糊搜索（三者都是B+树key没办法直接比较）")]),_._v(" "),v("li",[_._v("出现类型隐式转换（动态语言中需要注意，如"),v("code",[_._v("python")]),_._v("）")]),_._v(" "),v("li",[_._v("没有满足最左前缀原则")])]),_._v(" "),v("h3",{attrs:{id:"_1-19-什么是聚集索引和非聚集索引"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-19-什么是聚集索引和非聚集索引"}},[_._v("#")]),_._v(" 1.19. 什么是聚集索引和非聚集索引？")]),_._v(" "),v("ul",[v("li",[_._v("聚集还是非聚集指的是B+Tree叶节点存的是指针还是数据记录")]),_._v(" "),v("li",[_._v("MyISAM索引和数据分离，使用的是非聚集索引")]),_._v(" "),v("li",[_._v("InnoDB数据文件就是索引文件，主键索引就是聚集索引")])]),_._v(" "),v("p",[_._v("非聚集索引：")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_nonclustered_index.png",alt:"非聚集索引"}})]),_._v(" "),v("p",[_._v("聚集索引:")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_clustered_index.png",alt:"聚集索引"}})]),_._v(" "),v("p",[_._v("InnoDB中的辅助索引，先找到主键以后再根据主键找到数据")]),_._v(" "),v("p",[_._v("聚集索引与辅助索引：")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/sql_clustered_index_and_help_index.png",alt:"聚集索引与辅助索引"}})]),_._v(" "),v("h3",{attrs:{id:"_1-20-如何排查慢查询"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-20-如何排查慢查询"}},[_._v("#")]),_._v(" 1.20. 如何排查慢查询？")]),_._v(" "),v("ol",[v("li",[_._v("慢查询通常是缺少索引，索引不合理或者业务代码实现导致")]),_._v(" "),v("li",[v("code",[_._v("slow_query_log_file")]),_._v("开启并且查询慢查询日志")]),_._v(" "),v("li",[_._v("通过"),v("code",[_._v("explain")]),_._v("排查索引问题")]),_._v(" "),v("li",[_._v("调整数据修改索引；业务代码层限制不合理访问（一次获取太多可以分页）")])]),_._v(" "),v("p",[_._v("Mysql索引，如果是分布式系统下如何生成数据库的自增id？")]),_._v(" "),v("h3",{attrs:{id:"_1-21-mysql语句编写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-21-mysql语句编写"}},[_._v("#")]),_._v(" 1.21. Mysql语句编写")]),_._v(" "),v("ol",[v("li",[_._v("内连接（Inner Join）：两个表都存在匹配时，才会返回匹配行")]),_._v(" "),v("li",[_._v("外连接（left/right join）：返回一个表的行，即使另一个没有匹配")]),_._v(" "),v("li",[_._v("全连接（Full join）：只要某一个表存在匹配就返回")])]),_._v(" "),v("p",[_._v("内连接：“交集”")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("select * from A inner join B on a.id=b.id\n")])])]),v("p",[_._v("左连接：返回左表中所有记录，即使右表中没有匹配的记录")]),_._v(" "),v("ul",[v("li",[_._v("没有匹配到的字段会设置成null")])]),_._v(" "),v("h3",{attrs:{id:"_1-22-缓存及redis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-22-缓存及redis"}},[_._v("#")]),_._v(" 1.22. 缓存及Redis")]),_._v(" "),v("p",[_._v("缓存的使用场景?\nRedis常用数据类型，使用方式？\n缓存使用问题：数据一致性问题；缓存穿透、击穿、雪崩问题")]),_._v(" "),v("p",[_._v("什么是缓存，为什么使用缓存？")]),_._v(" "),v("ul",[v("li",[_._v("内存缓存主要有Redis和Memcached")]),_._v(" "),v("li",[_._v("缓解关系数据库（Mysql）并发访问的压力：热点数据")]),_._v(" "),v("li",[_._v("减少响应的时间：内存IO速度比磁盘快")]),_._v(" "),v("li",[_._v("提升吞吐量：Redis等内存数据库单机就可以支撑很大并发")])]),_._v(" "),v("h3",{attrs:{id:"_1-23-redis-和-memcached-主要区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-23-redis-和-memcached-主要区别"}},[_._v("#")]),_._v(" 1.23. Redis 和 Memcached 主要区别？")]),_._v(" "),v("h3",{attrs:{id:"_1-24-redis常用数据类型和使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-24-redis常用数据类型和使用场景"}},[_._v("#")]),_._v(" 1.24. Redis常用数据类型和使用场景？")]),_._v(" "),v("ol",[v("li",[_._v("String（字符串）：用来实现简单的kv键值对存储，比如计数器")]),_._v(" "),v("li",[_._v("List（链表）：实现双向链表，比如用户的关注，粉丝列表")]),_._v(" "),v("li",[_._v("Hash（哈希表）：用来存储彼此相关信息的键值对（HSET name,key [id:usename]）")]),_._v(" "),v("li",[_._v("Set（集合）：存储不重复元素，比如用户的关注者")]),_._v(" "),v("li",[_._v("Sorted Set（有序集合）：实时信息排行榜")])]),_._v(" "),v("p",[_._v("Redis内置实现《Redis设计与实现》\nRedis各种类型的C底层实现方式")]),_._v(" "),v("ol",[v("li",[_._v("String：整数或者sds（Simple Dynamic String）")]),_._v(" "),v("li",[_._v("List：ziplist或者double linked list")]),_._v(" "),v("li",[_._v("Hash: ziplist或者hashtable")]),_._v(" "),v("li",[_._v("Set：intset（小整数）或者hashtable")]),_._v(" "),v("li",[_._v("SortedSet: skiplist 跳跃表")])]),_._v(" "),v("p",[_._v("Ziplist（压缩列表）:通过一个连续的内存块实现list结构，其中的每个entry节点头部保存前后节点长度信息，实现双向链表功能")]),_._v(" "),v("h3",{attrs:{id:"_1-25-redis实现的跳跃表是什么结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-25-redis实现的跳跃表是什么结构"}},[_._v("#")]),_._v(" 1.25. Redis实现的跳跃表是什么结构？")]),_._v(" "),v("p",[v("code",[_._v("Sorted set")]),_._v("为了简化实现，使用"),v("code",[_._v("skiplist")]),_._v("而不是平衡树实现")]),_._v(" "),v("p",[v("img",{attrs:{src:"/imgs/redis_skiplist.png",alt:"跳跃表"}})]),_._v(" "),v("p",[_._v("链表不能随机访问，设置了多层，模拟二分查找")]),_._v(" "),v("h3",{attrs:{id:"_1-26-redis有哪些持久化方式-两种"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-26-redis有哪些持久化方式-两种"}},[_._v("#")]),_._v(" 1.26. Redis有哪些持久化方式？两种")]),_._v(" "),v("ul",[v("li",[_._v("快照方式：把数据快照放在磁盘二进制文件中，dump.rdb\n"),v("ul",[v("li",[_._v("快照的实现方式是指定时间间隔把Redis数据库状态保存到一个压缩的二进制文件中，能够恢复到制定时间段的版本，宕机的话会丢失很多数据。")])])]),_._v(" "),v("li",[_._v("AOF（Append Only File）：每一个写命令追加到appendonly.aof中（宕机不会丢失很多数据，但文件可能较大）")])]),_._v(" "),v("h3",{attrs:{id:"_1-27-redis-事务和-mysql-事务的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-27-redis-事务和-mysql-事务的区别"}},[_._v("#")]),_._v(" 1.27. Redis 事务和 Mysql 事务的区别？")]),_._v(" "),v("ul",[v("li",[_._v("将多个请求打包，一次性、按序执行多个命令的机制")]),_._v(" "),v("li",[_._v("Redis通过MULTI，EXEC，WATCH等命令实现事务功能")]),_._v(" "),v("li",[_._v("Python redis-py pipeline=conn.pipeline(transaction=True)")])]),_._v(" "),v("h3",{attrs:{id:"_1-28-redis如何实现分布式锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-28-redis如何实现分布式锁"}},[_._v("#")]),_._v(" 1.28. Redis如何实现分布式锁？")]),_._v(" "),v("p",[_._v("不同机器、不同进程的线程上进行同步，使用分布式锁\n给一个线程指向键值对，其他线程重试或等待")]),_._v(" "),v("ul",[v("li",[_._v("使用setnx实现加锁，可以同时通过expire添加超时时间")]),_._v(" "),v("li",[_._v("锁的value值可以使用一个随机的uuid或者特定命名")]),_._v(" "),v("li",[_._v("释放锁的时候，通过uuid判断是否是该锁，是则执行delete释放锁")])]),_._v(" "),v("p",[_._v("当一个线程想要持有锁的时候，就给他设置一个key，当key已经存在时获取失败，进行重试或等待，释放锁时通过delete删除")]),_._v(" "),v("h3",{attrs:{id:"_1-29-使用缓存的模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-29-使用缓存的模式"}},[_._v("#")]),_._v(" 1.29. 使用缓存的模式？")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("Cache Aside")]),_._v("：同时更新缓存和数据库（最常用）")]),_._v(" "),v("li",[v("code",[_._v("Read/Write Through")]),_._v("：先更新缓存，缓存负责同步更新数据库")]),_._v(" "),v("li",[v("code",[_._v("Write Behind Caching")]),_._v("：先更新缓存，缓存定期异步更新数据库")])]),_._v(" "),v("p",[_._v("涉及到缓存和数据库一致的问题，先更新数据库后更新缓存，并发写操作可能导致缓存读取的是脏数据")]),_._v(" "),v("h3",{attrs:{id:"_1-30-如何解决缓存穿透问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-30-如何解决缓存穿透问题"}},[_._v("#")]),_._v(" 1.30. 如何解决缓存穿透问题？")]),_._v(" "),v("p",[_._v("大量查询不到的数据的请求落到后端数据库，数据库压力增大")]),_._v(" "),v("ul",[v("li",[_._v("由于大量缓存查不到就去数据库取，数据库也没有要查的数据（比如无脑爬虫通过自增id的方式爬取网站，网站差不到相关id的数据）")]),_._v(" "),v("li",[_._v("解决：对于没查到返回为None的数据也缓存\n"),v("ul",[v("li",[_._v("插入数据的时候删除相应缓存，或者设置较短的超时时间")])])])]),_._v(" "),v("h3",{attrs:{id:"_1-31-如何解决缓存击穿问题-微博热点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-31-如何解决缓存击穿问题-微博热点"}},[_._v("#")]),_._v(" 1.31. 如何解决缓存击穿问题？（微博热点）")]),_._v(" "),v("ol",[v("li",[_._v("某些非常热点的数据key过期，大量请求达到后端数据库")]),_._v(" "),v("li",[_._v("分布式锁：获取锁的线程从数据库拉数据更新缓存，其他线程等待")]),_._v(" "),v("li",[_._v("异步后台更新：后台任务针对过期的key自动刷新")])]),_._v(" "),v("h3",{attrs:{id:"_1-32-如何解决缓存雪崩问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-32-如何解决缓存雪崩问题"}},[_._v("#")]),_._v(" 1.32. 如何解决缓存雪崩问题？")]),_._v(" "),v("p",[_._v("缓存不可用或者大量缓存key同时失效，大量请求直接打到数据库")]),_._v(" "),v("ol",[v("li",[_._v("多级缓存：不同级别的key设置不同的超时时间")]),_._v(" "),v("li",[_._v("随机超时：key的超时时间随机设置，防止同时超时")]),_._v(" "),v("li",[_._v("架构层：提升系统可用性，监控、报警完善")])]),_._v(" "),v("h3",{attrs:{id:"_1-33-数据库设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-33-数据库设计"}},[_._v("#")]),_._v(" 1.33. 数据库设计")]),_._v(" "),v("p",[_._v("目标：")]),_._v(" "),v("ol",[v("li",[_._v("减少数据冗余")]),_._v(" "),v("li",[_._v("避免数据维护异常")]),_._v(" "),v("li",[_._v("节约存储空间")]),_._v(" "),v("li",[_._v("高效的访问")])]),_._v(" "),v("p",[_._v("步骤：")]),_._v(" "),v("ol",[v("li",[_._v("需求分析")]),_._v(" "),v("li",[_._v("逻辑设计（ER图）")]),_._v(" "),v("li",[_._v("物理设计")]),_._v(" "),v("li",[_._v("维护优化")])]),_._v(" "),v("h3",{attrs:{id:"_1-34-mysql查看支持的引擎"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-34-mysql查看支持的引擎"}},[_._v("#")]),_._v(" 1.34. Mysql查看支持的引擎")]),_._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[_._v("show engines;\n")])])]),v("p",[_._v("以下两点必须使用 InnoDB：")]),_._v(" "),v("ol",[v("li",[_._v("可靠性高或者要求事务处理，则使用 InnoDB。这个是必须的。")]),_._v(" "),v("li",[_._v("表更新和查询都相当的频繁，并且表锁定的机会比较大的情况指定 InnoDB 数据引擎的创建。")])]),_._v(" "),v("p",[_._v("对比之下，MyISAM 的使用场景：")]),_._v(" "),v("ol",[v("li",[_._v("做很多 count 的计算的。如一些日志，调查的业务表。")]),_._v(" "),v("li",[v("strong",[_._v("插入修改不频繁")]),_._v("，查询非常频繁的。")])]),_._v(" "),v("h3",{attrs:{id:"_1-35-什么是存储过程-有哪些优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-35-什么是存储过程-有哪些优缺点"}},[_._v("#")]),_._v(" 1.35. 什么是存储过程？有哪些优缺点？")]),_._v(" "),v("p",[_._v("存储过程是一些预编译的SQL语句。\n更加直白的理解：存储过程可以说是一个记录集，它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。")]),_._v(" "),v("ol",[v("li",[_._v("存储过程是一个预编译的代码块，执行效率比较高")]),_._v(" "),v("li",[_._v("一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率")]),_._v(" "),v("li",[_._v("可以一定程度上确保数据安全")])]),_._v(" "),v("h3",{attrs:{id:"_1-36-什么是视图-以及视图的使用场景有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-36-什么是视图-以及视图的使用场景有哪些"}},[_._v("#")]),_._v(" 1.36. 什么是视图？以及视图的使用场景有哪些？")]),_._v(" "),v("p",[_._v("视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。")]),_._v(" "),v("ol",[v("li",[_._v("只暴露部分字段给访问者，所以就建一个虚表，就是视图。")]),_._v(" "),v("li",[_._v("查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异")])]),_._v(" "),v("h3",{attrs:{id:"_1-37-说一说三个范式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-37-说一说三个范式"}},[_._v("#")]),_._v(" 1.37. 说一说三个范式")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。")])]),_._v(" "),v("li",[v("p",[_._v("第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。")])]),_._v(" "),v("li",[v("p",[_._v('第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存在"A → B → C"的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段x → 非关键字段y')])])]),_._v(" "),v("h3",{attrs:{id:"_1-38-oracle和mysql的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-38-oracle和mysql的区别"}},[_._v("#")]),_._v(" 1.38. Oracle和MySQL的区别")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("Oracle是大型数据库而Mysql是中小型数据库，Oracle市场占有率达40%，Mysql只有 20% 左右，同时Mysql是开源的而 Oracle 价格非常高。")])]),_._v(" "),v("li",[v("p",[_._v("Oracle支持大并发，大访问量，是OLTP最好的工具。")])]),_._v(" "),v("li",[v("p",[_._v("安装所用的空间差别也是很大的，Mysql安装完后才"),v("code",[_._v("152M")]),_._v("，而Oracle有"),v("code",[_._v("3G")]),_._v("左右，且使用的时候Oracle占用特别大的内存空间和其他机器性能。")])]),_._v(" "),v("li",[v("p",[_._v("Oracle也Mysql操作上的一些区别")])])]),_._v(" "),v("ul",[v("li",[_._v("①主键 Mysql一般使用自动增长类型，在创建表时只要指定表的主键为"),v("code",[_._v("auto increment")]),_._v("，插入记录时，不需要再指定该记录的主键值，Mysql将自动增长；\nOracle没有自动增长类型，主键一般使用的序列，插入记录时将序列号的下一个值付给该字段即可；只是ORM框架是只要是native主键生成策略即可。")]),_._v(" "),v("li",[_._v("②单引号的处理：MYSQL里可以用双引号包起字符串，ORACLE里只可以用单引号包起字符串。在插入和修改字符串前必须做单引号的替换：把所有出现的一个单引号替换成两个单引号。")]),_._v(" "),v("li",[_._v("③翻页的SQL语句的处理：MYSQL处理翻页的SQL语句比较简单，用LIMIT 开始位置, 记录个数；ORACLE处理翻页的SQL语句就比较繁琐了。每个结果集只有一个ROWNUM字段标明它的位置，并且只能用"),v("code",[_._v("ROWNUM<100")]),_._v("，不能用"),v("code",[_._v("ROWNUM>80")]),_._v("。")]),_._v(" "),v("li",[_._v("④ 长字符串的处理：长字符串的处理ORACLE也有它特殊的地方。INSERT和UPDATE时最大可操作的字符串长度小于等于4000个单字节,，如果要插入更长的字符串，请考虑字段用CLOB类型，方法借用ORACLE里自带的DBMS_LOB程序包。插入修改记录前一定要做进行非空和长度判断，不能为空的字段值和超出长度字段值都应该提出警告，返回上次操作。")]),_._v(" "),v("li",[_._v("⑤空字符的处理：MYSQL的非空字段也有空的内容，ORACLE里定义了非空字段就不容许有空的内容。按MYSQL的"),v("code",[_._v("NOT NULL")]),_._v("来定义ORACLE表结构，导数据的时候会产生错误。因此导数据时要对空字符进行判断，如果为NULL或空字符，需要把它改成一个空格的字符串。")]),_._v(" "),v("li",[_._v("⑥字符串的模糊比较 MYSQL里用 "),v("code",[_._v("字段名 like '%字符串%'")]),_._v(",ORACLE里也可以用 "),v("code",[_._v("字段名 like '%字符串%'")]),_._v("， 但这种方法不能使用索引, 速度不快。")]),_._v(" "),v("li",[_._v("⑦Oracle实现了"),v("code",[_._v("ANSII SQL")]),_._v("中大部分功能，如，事务的隔离级别、传播特性等，而Mysql在这方面还是比较的弱")])]),_._v(" "),v("h3",{attrs:{id:"什么是orm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是orm"}},[_._v("#")]),_._v(" 什么是ORM？")]),_._v(" "),v("p",[v("code",[_._v("Object Relational Mapping")]),_._v("对象关系映射")]),_._v(" "),v("ol",[v("li",[_._v("用于实现业务对象和数据表中的字段映射（"),v("code",[_._v("sqlalchemy")]),_._v(" "),v("code",[_._v("peewee")]),_._v("）")]),_._v(" "),v("li",[_._v("优势：代码更加面向对象，代码量更少，灵活性高，提升开发效果")])]),_._v(" "),v("h3",{attrs:{id:"orm好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#orm好处"}},[_._v("#")]),_._v(" ORM好处")]),_._v(" "),v("ol",[v("li",[_._v("隔离数据库和数据库版本之间的差异")]),_._v(" "),v("li",[_._v("便于维护")]),_._v(" "),v("li",[_._v("ORM会提供防sql注入等功能")]),_._v(" "),v("li",[_._v("变量传递式的调用更加简单")])]),_._v(" "),v("h3",{attrs:{id:"为什么选择peewee"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择peewee"}},[_._v("#")]),_._v(" 为什么选择"),v("code",[_._v("peewee")]),_._v("？")]),_._v(" "),v("ol",[v("li",[_._v("三个常用的ORM，"),v("code",[_._v("django orm")]),_._v("、"),v("code",[_._v("sqlalchemy")]),_._v("、"),v("code",[_._v("peewee")])]),_._v(" "),v("li",[_._v("简单、灵活、申明方式和"),v("code",[_._v("django")]),_._v("的"),v("code",[_._v("orm")]),_._v("接近")]),_._v(" "),v("li",[_._v("社区活跃")])])])}),[],!1,null,null,null);v.default=r.exports}}]);