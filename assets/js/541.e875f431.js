(window.webpackJsonp=window.webpackJsonp||[]).push([[541],{812:function(t,s,a){"use strict";a.r(s);var e=a(14),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"全量-eslint-检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全量-eslint-检查"}},[t._v("#")]),t._v(" 全量 eslint 检查")]),t._v(" "),s("p",[t._v("husky+lint-staged 的增量检查不会检测出变量冲突的问题，因为它只检查有变动的文件，不是全量，所以还要设置钩子全量检测")]),t._v(" "),s("h2",{attrs:{id:"echo-tmp-js-node-tmp-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#echo-tmp-js-node-tmp-js"}},[t._v("#")]),t._v(" "),s("code",[t._v('echo "">tmp.js && node tmp.js')])]),t._v(" "),s("p",[t._v('用BK插件执行nodejs脚本总是报错，可以用bash脚本echo "">tmp.js，然后node tmp.js来执行')]),t._v(" "),s("p",[t._v("BK插件中不要写太多"),s("code",[t._v("js/bash")]),t._v("脚本，因为不易管理，不够原子化，也无法复用。可以将核心方法发布成"),s("code",[t._v("npm")]),t._v("包，从"),s("code",[t._v("npm")]),t._v("包中导入方法并使用.")]),t._v(" "),s("h2",{attrs:{id:"打印构建信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打印构建信息"}},[t._v("#")]),t._v(" 打印构建信息")]),t._v(" "),s("p",[t._v("之前逻辑：")]),t._v(" "),s("ol",[s("li",[t._v("发布时同时生成version.js，内容为"),s("code",[t._v("window.igameVersion= {}")])]),t._v(" "),s("li",[t._v("index.html添加version.js请求")])]),t._v(" "),s("p",[t._v("浏览器端")]),t._v(" "),s("ol",[s("li",[t._v("index.html请求version.js")]),t._v(" "),s("li",[t._v("vconsole获取version，并显示")])]),t._v(" "),s("p",[t._v("改造第一版：")]),t._v(" "),s("p",[t._v("去掉version.js请求，直接将"),s("code",[t._v("window.igameVersion= {}")]),t._v("放到index.html中。")]),t._v(" "),s("p",[t._v("改造第二版：")]),t._v(" "),s("p",[t._v("直接在"),s("code",[t._v("index.html")]),t._v("中进行相关日志的打印，不用"),s("code",[t._v("vconsole")]),t._v("插件。\n缺点是：打印信息人人可见，无区分性。")]),t._v(" "),s("h2",{attrs:{id:"registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#registry"}},[t._v("#")]),t._v(" registry")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i @tencent/uni-plugin-light "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--registry")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://mirrors.tencent.com/npm/\n")])])]),s("h2",{attrs:{id:"ci"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ci"}},[t._v("#")]),t._v(" CI")]),t._v(" "),s("p",[t._v("持续集成强调开发人员提交了新代码之后，立刻进行构建、测试。根据测试结果，确定新代码和原有代码能否正确地集成在一起。")]),t._v(" "),s("h2",{attrs:{id:"vuex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),s("p",[t._v("vuex中的"),s("code",[t._v("getters")]),t._v("中不要引用外部不稳定的变量，"),s("code",[t._v("getters")]),t._v("有缓存，且只有依赖的"),s("code",[t._v("state")]),t._v("数据变化时才会更新。")]),t._v(" "),s("h2",{attrs:{id:"webpack生态中-推荐用ts-loader还是-babel-preset-typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack生态中-推荐用ts-loader还是-babel-preset-typescript"}},[t._v("#")]),t._v(" webpack生态中，推荐用ts-loader还是@babel/preset-typescript")]),t._v(" "),s("p",[t._v("推荐 @babel/preset-typescript")]),t._v(" "),s("h2",{attrs:{id:"截图与总结思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#截图与总结思考"}},[t._v("#")]),t._v(" 截图与总结思考")]),t._v(" "),s("p",[t._v("如果只是截了个图，而没有提炼出文字，那么是白截的。没有总结，更别提自己的思考了。没有自己的思考是记不住的，没法运用到实际的")]),t._v(" "),s("h2",{attrs:{id:"vue的设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue的设计原则"}},[t._v("#")]),t._v(" Vue的设计原则")]),t._v(" "),s("ul",[s("li",[t._v("易用")]),t._v(" "),s("li",[t._v("灵活")]),t._v(" "),s("li",[t._v("高效")]),t._v(" "),s("li",[t._v("渐进式的js框架")])]),t._v(" "),s("h2",{attrs:{id:"rollup-plugin-commonjs需要放在-rollup-plugin-babel插件前面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollup-plugin-commonjs需要放在-rollup-plugin-babel插件前面"}},[t._v("#")]),t._v(" @rollup/plugin-commonjs需要放在@rollup/plugin-babel插件前面")]),t._v(" "),s("p",[t._v("文档地址：https://github.com/rollup/plugins/tree/master/packages/babel#using-with-rollupplugin-commonjs")]),t._v(" "),s("h2",{attrs:{id:"通用化、配置化是自动化的手段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用化、配置化是自动化的手段"}},[t._v("#")]),t._v(" 通用化、配置化是自动化的手段")]),t._v(" "),s("h2",{attrs:{id:"高度自动化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高度自动化"}},[t._v("#")]),t._v(" 高度自动化")]),t._v(" "),s("h2",{attrs:{id:"pagex-pagey"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pagex-pagey"}},[t._v("#")]),t._v(" pageX/pageY")]),t._v(" "),s("p",[t._v("pageX 规定了事件对象与目标节点的内填充边（padding edge）在 X 轴方向上的偏移量。进入 border 的时候，pageX 或 pageY 是负数。")]),t._v(" "),s("p",[t._v("pageY=clientY+滚动条距离（"),s("code",[t._v("document.documentElement.scrollTop")]),t._v("）,只有document.body滚动的距离会被加到pageY中，子元素的滚动距离不算，即子元素滚动了，但是"),s("code",[t._v("document.documentElement.scrollTop=0")]),t._v("，那么pageY和clientY还是相等的。")]),t._v(" "),s("h2",{attrs:{id:"sortable-chosen-sortable-ghost"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sortable-chosen-sortable-ghost"}},[t._v("#")]),t._v(" sortable-chosen/sortable-ghost")]),t._v(" "),s("p",[t._v("h5的拖拽有两个特殊class")]),t._v(" "),s("h2",{attrs:{id:"如何看待typescript使得前端开发变成强类型语言的开发-增加了大量工作量-改变了javascript的特性的言论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何看待typescript使得前端开发变成强类型语言的开发-增加了大量工作量-改变了javascript的特性的言论"}},[t._v("#")]),t._v(" 如何看待typescript使得前端开发变成强类型语言的开发，增加了大量工作量，改变了javascript的特性的言论？")]),t._v(" "),s("p",[t._v("首先，TypeScript 不是“强类型”语言，而是“弱类型”语言。同时 TypeScript 是“静态类型”语言。")]),t._v(" "),s("h3",{attrs:{id:"typescript-是静态类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-是静态类型"}},[t._v("#")]),t._v(" TypeScript 是静态类型")]),t._v(" "),s("p",[t._v("类型系统按照「类型检查的时机」来分类，可以分为动态类型和静态类型。")]),t._v(" "),s("p",[t._v("动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript 是一门解释型语言，没有编译阶段，所以它是动态类型，以下这段代码在运行时才会报错：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Uncaught TypeError: foo.split is not a function")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 运行时会报错（foo.split 不是一个函数），造成线上 bug")]),t._v("\n")])])]),s("p",[t._v("静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript 在运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查，所以 TypeScript 是静态类型，这段 TypeScript 代码在编译阶段就会报错了：")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfoo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Property 'split' does not exist on type 'number'.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译时会报错（数字没有 split 方法），无法通过编译")]),t._v("\n")])])]),s("h3",{attrs:{id:"typescript-是弱类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-是弱类型"}},[t._v("#")]),t._v(" TypeScript 是弱类型")]),t._v(" "),s("p",[t._v("类型系统按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。")]),t._v(" "),s("p",[t._v("以下这段代码不管是在 JavaScript 中还是在 TypeScript 中都是可以正常运行的，运行时数字 1 会被隐式类型转换为字符串 '1'，加号 + 被识别为字符串拼接，所以打印出结果是字符串 '11'。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印出字符串 '11'")]),t._v("\n")])])]),s("p",[t._v("其次，“增加了大量工作量”也是不准确的。")]),t._v(" "),s("p",[t._v("ts 是 js 的超集。用 ts 开发相比于 js，增加了多少工作量完全是可选的。你完全可以配置一份很宽松的 tsconfig，使得 ts 开发不会增加工作量。当然此时从类型系统中获得的收益也就变少了。")]),t._v(" "),s("p",[t._v("而且即使你不用 ts 开发，也已经享受到了 ts 社区的贡献了——在你编写 js 时的语法提示全是 d.ts 的功劳。")]),t._v(" "),s("p",[t._v("最后，ts 和 js 不是势不两立的，而是各司其职。很多场景也没必要强行上 ts。")])])}),[],!1,null,null,null);s.default=r.exports}}]);